
RTOS_BASED_ATM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b90  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  08006cd0  08006cd0  00016cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006eb0  08006eb0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006eb0  08006eb0  00016eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006eb8  08006eb8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006eb8  08006eb8  00016eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ebc  08006ebc  00016ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006ec0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002898  20000010  08006ed0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200028a8  08006ed0  000228a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ce9a  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003548  00000000  00000000  0003ced3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001660  00000000  00000000  00040420  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014b8  00000000  00000000  00041a80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003cc1  00000000  00000000  00042f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000147b8  00000000  00000000  00046bf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009f317  00000000  00000000  0005b3b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fa6c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e1c  00000000  00000000  000fa744  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000010 	.word	0x20000010
 800015c:	00000000 	.word	0x00000000
 8000160:	08006cb8 	.word	0x08006cb8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000014 	.word	0x20000014
 800017c:	08006cb8 	.word	0x08006cb8

08000180 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000180:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000182:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000186:	f8df 0080 	ldr.w	r0, [pc, #128]	; 8000208 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800018a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800018e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000192:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000194:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000196:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000198:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800019a:	d32e      	bcc.n	80001fa <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800019c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800019e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001a0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001a2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001a4:	d312      	bcc.n	80001cc <_CheckCase2>

080001a6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001a6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001a8:	19d0      	adds	r0, r2, r7
 80001aa:	bf00      	nop

080001ac <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001ac:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80001b0:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80001b4:	3a01      	subs	r2, #1
        BEQ      _CSDone
 80001b6:	d005      	beq.n	80001c4 <_CSDone>
        LDRB     R3,[R1], #+1
 80001b8:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80001bc:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80001c0:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 80001c2:	d1f3      	bne.n	80001ac <_LoopCopyStraight>

080001c4 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 80001c4:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 80001c6:	2001      	movs	r0, #1
        POP      {R4-R7}
 80001c8:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80001ca:	4770      	bx	lr

080001cc <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 80001cc:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 80001ce:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 80001d0:	d317      	bcc.n	8000202 <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 80001d2:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 80001d4:	1b12      	subs	r2, r2, r4

080001d6 <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 80001d6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 80001da:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80001de:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80001e0:	d1f9      	bne.n	80001d6 <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80001e2:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80001e4:	d005      	beq.n	80001f2 <_No2ChunkNeeded>

080001e6 <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80001e6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80001ea:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80001ee:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80001f0:	d1f9      	bne.n	80001e6 <_LoopCopyAfterWrapAround>

080001f2 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80001f2:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80001f4:	2001      	movs	r0, #1
        POP      {R4-R7}
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80001f8:	4770      	bx	lr

080001fa <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80001fa:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80001fc:	3801      	subs	r0, #1
        CMP      R0,R2
 80001fe:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000200:	d2d1      	bcs.n	80001a6 <_Case4>

08000202 <_Case3>:
_Case3:
        MOVS     R0,#+0
 8000202:	2000      	movs	r0, #0
        POP      {R4-R7}
 8000204:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 8000206:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000208:	20002800 	.word	0x20002800

0800020c <__aeabi_uldivmod>:
 800020c:	b953      	cbnz	r3, 8000224 <__aeabi_uldivmod+0x18>
 800020e:	b94a      	cbnz	r2, 8000224 <__aeabi_uldivmod+0x18>
 8000210:	2900      	cmp	r1, #0
 8000212:	bf08      	it	eq
 8000214:	2800      	cmpeq	r0, #0
 8000216:	bf1c      	itt	ne
 8000218:	f04f 31ff 	movne.w	r1, #4294967295
 800021c:	f04f 30ff 	movne.w	r0, #4294967295
 8000220:	f000 b974 	b.w	800050c <__aeabi_idiv0>
 8000224:	f1ad 0c08 	sub.w	ip, sp, #8
 8000228:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800022c:	f000 f806 	bl	800023c <__udivmoddi4>
 8000230:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000234:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000238:	b004      	add	sp, #16
 800023a:	4770      	bx	lr

0800023c <__udivmoddi4>:
 800023c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000240:	468c      	mov	ip, r1
 8000242:	4604      	mov	r4, r0
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	2b00      	cmp	r3, #0
 8000248:	d14b      	bne.n	80002e2 <__udivmoddi4+0xa6>
 800024a:	428a      	cmp	r2, r1
 800024c:	4615      	mov	r5, r2
 800024e:	d967      	bls.n	8000320 <__udivmoddi4+0xe4>
 8000250:	fab2 f282 	clz	r2, r2
 8000254:	b14a      	cbz	r2, 800026a <__udivmoddi4+0x2e>
 8000256:	f1c2 0720 	rsb	r7, r2, #32
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	fa20 f707 	lsr.w	r7, r0, r7
 8000262:	4095      	lsls	r5, r2
 8000264:	ea47 0c03 	orr.w	ip, r7, r3
 8000268:	4094      	lsls	r4, r2
 800026a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800026e:	fbbc f7fe 	udiv	r7, ip, lr
 8000272:	fa1f f885 	uxth.w	r8, r5
 8000276:	fb0e c317 	mls	r3, lr, r7, ip
 800027a:	fb07 f908 	mul.w	r9, r7, r8
 800027e:	0c21      	lsrs	r1, r4, #16
 8000280:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000284:	4599      	cmp	r9, r3
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x60>
 8000288:	18eb      	adds	r3, r5, r3
 800028a:	f107 31ff 	add.w	r1, r7, #4294967295
 800028e:	f080 811c 	bcs.w	80004ca <__udivmoddi4+0x28e>
 8000292:	4599      	cmp	r9, r3
 8000294:	f240 8119 	bls.w	80004ca <__udivmoddi4+0x28e>
 8000298:	3f02      	subs	r7, #2
 800029a:	442b      	add	r3, r5
 800029c:	eba3 0309 	sub.w	r3, r3, r9
 80002a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a8:	fb00 f108 	mul.w	r1, r0, r8
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b2:	42a1      	cmp	r1, r4
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0x8e>
 80002b6:	192c      	adds	r4, r5, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002bc:	f080 8107 	bcs.w	80004ce <__udivmoddi4+0x292>
 80002c0:	42a1      	cmp	r1, r4
 80002c2:	f240 8104 	bls.w	80004ce <__udivmoddi4+0x292>
 80002c6:	3802      	subs	r0, #2
 80002c8:	442c      	add	r4, r5
 80002ca:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ce:	2700      	movs	r7, #0
 80002d0:	1a64      	subs	r4, r4, r1
 80002d2:	b11e      	cbz	r6, 80002dc <__udivmoddi4+0xa0>
 80002d4:	2300      	movs	r3, #0
 80002d6:	40d4      	lsrs	r4, r2
 80002d8:	e9c6 4300 	strd	r4, r3, [r6]
 80002dc:	4639      	mov	r1, r7
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xbe>
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	f000 80ec 	beq.w	80004c4 <__udivmoddi4+0x288>
 80002ec:	2700      	movs	r7, #0
 80002ee:	e9c6 0100 	strd	r0, r1, [r6]
 80002f2:	4638      	mov	r0, r7
 80002f4:	4639      	mov	r1, r7
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f783 	clz	r7, r3
 80002fe:	2f00      	cmp	r7, #0
 8000300:	d148      	bne.n	8000394 <__udivmoddi4+0x158>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd0>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80fb 	bhi.w	8000502 <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469c      	mov	ip, r3
 8000316:	2e00      	cmp	r6, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa0>
 800031a:	e9c6 4c00 	strd	r4, ip, [r6]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa0>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xe8>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 808f 	bne.w	800044c <__udivmoddi4+0x210>
 800032e:	2701      	movs	r7, #1
 8000330:	1b49      	subs	r1, r1, r5
 8000332:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000336:	fa1f f985 	uxth.w	r9, r5
 800033a:	fbb1 fef8 	udiv	lr, r1, r8
 800033e:	fb08 111e 	mls	r1, r8, lr, r1
 8000342:	fb09 f00e 	mul.w	r0, r9, lr
 8000346:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800034a:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 800034e:	4298      	cmp	r0, r3
 8000350:	d907      	bls.n	8000362 <__udivmoddi4+0x126>
 8000352:	18eb      	adds	r3, r5, r3
 8000354:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000358:	d202      	bcs.n	8000360 <__udivmoddi4+0x124>
 800035a:	4298      	cmp	r0, r3
 800035c:	f200 80cd 	bhi.w	80004fa <__udivmoddi4+0x2be>
 8000360:	468e      	mov	lr, r1
 8000362:	1a1b      	subs	r3, r3, r0
 8000364:	fbb3 f0f8 	udiv	r0, r3, r8
 8000368:	fb08 3310 	mls	r3, r8, r0, r3
 800036c:	fb09 f900 	mul.w	r9, r9, r0
 8000370:	b2a4      	uxth	r4, r4
 8000372:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000376:	45a1      	cmp	r9, r4
 8000378:	d907      	bls.n	800038a <__udivmoddi4+0x14e>
 800037a:	192c      	adds	r4, r5, r4
 800037c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x14c>
 8000382:	45a1      	cmp	r9, r4
 8000384:	f200 80b6 	bhi.w	80004f4 <__udivmoddi4+0x2b8>
 8000388:	4618      	mov	r0, r3
 800038a:	eba4 0409 	sub.w	r4, r4, r9
 800038e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000392:	e79e      	b.n	80002d2 <__udivmoddi4+0x96>
 8000394:	f1c7 0520 	rsb	r5, r7, #32
 8000398:	40bb      	lsls	r3, r7
 800039a:	fa22 fc05 	lsr.w	ip, r2, r5
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa21 f405 	lsr.w	r4, r1, r5
 80003a6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003aa:	fbb4 f9fe 	udiv	r9, r4, lr
 80003ae:	fa1f f88c 	uxth.w	r8, ip
 80003b2:	fb0e 4419 	mls	r4, lr, r9, r4
 80003b6:	fa20 f305 	lsr.w	r3, r0, r5
 80003ba:	40b9      	lsls	r1, r7
 80003bc:	fb09 fa08 	mul.w	sl, r9, r8
 80003c0:	4319      	orrs	r1, r3
 80003c2:	0c0b      	lsrs	r3, r1, #16
 80003c4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	fa02 f207 	lsl.w	r2, r2, r7
 80003ce:	fa00 f307 	lsl.w	r3, r0, r7
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b0>
 80003d4:	eb1c 0404 	adds.w	r4, ip, r4
 80003d8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2b4>
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2b4>
 80003e6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ea:	4464      	add	r4, ip
 80003ec:	eba4 040a 	sub.w	r4, r4, sl
 80003f0:	fbb4 f0fe 	udiv	r0, r4, lr
 80003f4:	fb0e 4410 	mls	r4, lr, r0, r4
 80003f8:	fb00 fa08 	mul.w	sl, r0, r8
 80003fc:	b289      	uxth	r1, r1
 80003fe:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000402:	45a2      	cmp	sl, r4
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x1dc>
 8000406:	eb1c 0404 	adds.w	r4, ip, r4
 800040a:	f100 31ff 	add.w	r1, r0, #4294967295
 800040e:	d26b      	bcs.n	80004e8 <__udivmoddi4+0x2ac>
 8000410:	45a2      	cmp	sl, r4
 8000412:	d969      	bls.n	80004e8 <__udivmoddi4+0x2ac>
 8000414:	3802      	subs	r0, #2
 8000416:	4464      	add	r4, ip
 8000418:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041c:	fba0 8902 	umull	r8, r9, r0, r2
 8000420:	eba4 040a 	sub.w	r4, r4, sl
 8000424:	454c      	cmp	r4, r9
 8000426:	4641      	mov	r1, r8
 8000428:	46ce      	mov	lr, r9
 800042a:	d354      	bcc.n	80004d6 <__udivmoddi4+0x29a>
 800042c:	d051      	beq.n	80004d2 <__udivmoddi4+0x296>
 800042e:	2e00      	cmp	r6, #0
 8000430:	d069      	beq.n	8000506 <__udivmoddi4+0x2ca>
 8000432:	1a5a      	subs	r2, r3, r1
 8000434:	eb64 040e 	sbc.w	r4, r4, lr
 8000438:	fa04 f505 	lsl.w	r5, r4, r5
 800043c:	fa22 f307 	lsr.w	r3, r2, r7
 8000440:	40fc      	lsrs	r4, r7
 8000442:	431d      	orrs	r5, r3
 8000444:	e9c6 5400 	strd	r5, r4, [r6]
 8000448:	2700      	movs	r7, #0
 800044a:	e747      	b.n	80002dc <__udivmoddi4+0xa0>
 800044c:	4095      	lsls	r5, r2
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	fa21 f003 	lsr.w	r0, r1, r3
 8000456:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800045a:	fbb0 f7f8 	udiv	r7, r0, r8
 800045e:	fa1f f985 	uxth.w	r9, r5
 8000462:	fb08 0017 	mls	r0, r8, r7, r0
 8000466:	fa24 f303 	lsr.w	r3, r4, r3
 800046a:	4091      	lsls	r1, r2
 800046c:	fb07 fc09 	mul.w	ip, r7, r9
 8000470:	430b      	orrs	r3, r1
 8000472:	0c19      	lsrs	r1, r3, #16
 8000474:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000478:	458c      	cmp	ip, r1
 800047a:	fa04 f402 	lsl.w	r4, r4, r2
 800047e:	d907      	bls.n	8000490 <__udivmoddi4+0x254>
 8000480:	1869      	adds	r1, r5, r1
 8000482:	f107 30ff 	add.w	r0, r7, #4294967295
 8000486:	d231      	bcs.n	80004ec <__udivmoddi4+0x2b0>
 8000488:	458c      	cmp	ip, r1
 800048a:	d92f      	bls.n	80004ec <__udivmoddi4+0x2b0>
 800048c:	3f02      	subs	r7, #2
 800048e:	4429      	add	r1, r5
 8000490:	eba1 010c 	sub.w	r1, r1, ip
 8000494:	fbb1 f0f8 	udiv	r0, r1, r8
 8000498:	fb08 1c10 	mls	ip, r8, r0, r1
 800049c:	fb00 fe09 	mul.w	lr, r0, r9
 80004a0:	b299      	uxth	r1, r3
 80004a2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004a6:	458e      	cmp	lr, r1
 80004a8:	d907      	bls.n	80004ba <__udivmoddi4+0x27e>
 80004aa:	1869      	adds	r1, r5, r1
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d218      	bcs.n	80004e4 <__udivmoddi4+0x2a8>
 80004b2:	458e      	cmp	lr, r1
 80004b4:	d916      	bls.n	80004e4 <__udivmoddi4+0x2a8>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4429      	add	r1, r5
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c2:	e73a      	b.n	800033a <__udivmoddi4+0xfe>
 80004c4:	4637      	mov	r7, r6
 80004c6:	4630      	mov	r0, r6
 80004c8:	e708      	b.n	80002dc <__udivmoddi4+0xa0>
 80004ca:	460f      	mov	r7, r1
 80004cc:	e6e6      	b.n	800029c <__udivmoddi4+0x60>
 80004ce:	4618      	mov	r0, r3
 80004d0:	e6fb      	b.n	80002ca <__udivmoddi4+0x8e>
 80004d2:	4543      	cmp	r3, r8
 80004d4:	d2ab      	bcs.n	800042e <__udivmoddi4+0x1f2>
 80004d6:	ebb8 0102 	subs.w	r1, r8, r2
 80004da:	eb69 020c 	sbc.w	r2, r9, ip
 80004de:	3801      	subs	r0, #1
 80004e0:	4696      	mov	lr, r2
 80004e2:	e7a4      	b.n	800042e <__udivmoddi4+0x1f2>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e7e8      	b.n	80004ba <__udivmoddi4+0x27e>
 80004e8:	4608      	mov	r0, r1
 80004ea:	e795      	b.n	8000418 <__udivmoddi4+0x1dc>
 80004ec:	4607      	mov	r7, r0
 80004ee:	e7cf      	b.n	8000490 <__udivmoddi4+0x254>
 80004f0:	4681      	mov	r9, r0
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	442c      	add	r4, r5
 80004f8:	e747      	b.n	800038a <__udivmoddi4+0x14e>
 80004fa:	f1ae 0e02 	sub.w	lr, lr, #2
 80004fe:	442b      	add	r3, r5
 8000500:	e72f      	b.n	8000362 <__udivmoddi4+0x126>
 8000502:	4638      	mov	r0, r7
 8000504:	e707      	b.n	8000316 <__udivmoddi4+0xda>
 8000506:	4637      	mov	r7, r6
 8000508:	e6e8      	b.n	80002dc <__udivmoddi4+0xa0>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000514:	f000 fabf 	bl	8000a96 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000518:	f000 f85a 	bl	80005d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051c:	f000 f90a 	bl	8000734 <MX_GPIO_Init>
  MX_RTC_Init();
 8000520:	f000 f8b6 	bl	8000690 <MX_RTC_Init>
  MX_USART2_Init();
 8000524:	f000 f8da 	bl	80006dc <MX_USART2_Init>
  /* USER CODE BEGIN 2 */
  DWT_CTRL |= (1 << 0);
 8000528:	4b1b      	ldr	r3, [pc, #108]	; (8000598 <main+0x88>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a1a      	ldr	r2, [pc, #104]	; (8000598 <main+0x88>)
 800052e:	f043 0301 	orr.w	r3, r3, #1
 8000532:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 8000534:	f004 ff60 	bl	80053f8 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8000538:	f005 fe88 	bl	800624c <SEGGER_SYSVIEW_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800053c:	f001 fffc 	bl	8002538 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of bin_sema */
  bin_semaHandle = osSemaphoreNew(1, 1, &bin_sema_attributes);
 8000540:	4a16      	ldr	r2, [pc, #88]	; (800059c <main+0x8c>)
 8000542:	2101      	movs	r1, #1
 8000544:	2001      	movs	r0, #1
 8000546:	f002 f935 	bl	80027b4 <osSemaphoreNew>
 800054a:	4602      	mov	r2, r0
 800054c:	4b14      	ldr	r3, [pc, #80]	; (80005a0 <main+0x90>)
 800054e:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of input */
  inputHandle = osMessageQueueNew (5, sizeof(uint16_t), &input_attributes);
 8000550:	4a14      	ldr	r2, [pc, #80]	; (80005a4 <main+0x94>)
 8000552:	2102      	movs	r1, #2
 8000554:	2005      	movs	r0, #5
 8000556:	f002 f9cb 	bl	80028f0 <osMessageQueueNew>
 800055a:	4602      	mov	r2, r0
 800055c:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <main+0x98>)
 800055e:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of rtc_task */
  rtc_taskHandle = osThreadNew(StartDefaultTask, NULL, &rtc_task_attributes);
 8000560:	4a12      	ldr	r2, [pc, #72]	; (80005ac <main+0x9c>)
 8000562:	2100      	movs	r1, #0
 8000564:	4812      	ldr	r0, [pc, #72]	; (80005b0 <main+0xa0>)
 8000566:	f002 f84d 	bl	8002604 <osThreadNew>
 800056a:	4602      	mov	r2, r0
 800056c:	4b11      	ldr	r3, [pc, #68]	; (80005b4 <main+0xa4>)
 800056e:	601a      	str	r2, [r3, #0]

  /* creation of menu */
  menuHandle = osThreadNew(StartTask04, NULL, &menu_attributes);
 8000570:	4a11      	ldr	r2, [pc, #68]	; (80005b8 <main+0xa8>)
 8000572:	2100      	movs	r1, #0
 8000574:	4811      	ldr	r0, [pc, #68]	; (80005bc <main+0xac>)
 8000576:	f002 f845 	bl	8002604 <osThreadNew>
 800057a:	4602      	mov	r2, r0
 800057c:	4b10      	ldr	r3, [pc, #64]	; (80005c0 <main+0xb0>)
 800057e:	601a      	str	r2, [r3, #0]

  /* creation of input_processin */
  input_processinHandle = osThreadNew(StartTask05, NULL, &input_processin_attributes);
 8000580:	4a10      	ldr	r2, [pc, #64]	; (80005c4 <main+0xb4>)
 8000582:	2100      	movs	r1, #0
 8000584:	4810      	ldr	r0, [pc, #64]	; (80005c8 <main+0xb8>)
 8000586:	f002 f83d 	bl	8002604 <osThreadNew>
 800058a:	4602      	mov	r2, r0
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <main+0xbc>)
 800058e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000590:	f002 f804 	bl	800259c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000594:	e7fe      	b.n	8000594 <main+0x84>
 8000596:	bf00      	nop
 8000598:	e0001000 	.word	0xe0001000
 800059c:	08006e68 	.word	0x08006e68
 80005a0:	20002704 	.word	0x20002704
 80005a4:	08006e50 	.word	0x08006e50
 80005a8:	20002710 	.word	0x20002710
 80005ac:	08006de4 	.word	0x08006de4
 80005b0:	080007d1 	.word	0x080007d1
 80005b4:	20002778 	.word	0x20002778
 80005b8:	08006e08 	.word	0x08006e08
 80005bc:	080007e1 	.word	0x080007e1
 80005c0:	2000270c 	.word	0x2000270c
 80005c4:	08006e2c 	.word	0x08006e2c
 80005c8:	080007f1 	.word	0x080007f1
 80005cc:	20002708 	.word	0x20002708

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b096      	sub	sp, #88	; 0x58
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005da:	2234      	movs	r2, #52	; 0x34
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f006 fb62 	bl	8006ca8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	f107 0310 	add.w	r3, r7, #16
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005f4:	1d3b      	adds	r3, r7, #4
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005fe:	4b23      	ldr	r3, [pc, #140]	; (800068c <SystemClock_Config+0xbc>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000606:	4a21      	ldr	r2, [pc, #132]	; (800068c <SystemClock_Config+0xbc>)
 8000608:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800060c:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 800060e:	2318      	movs	r3, #24
 8000610:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000612:	2301      	movs	r3, #1
 8000614:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000616:	2301      	movs	r3, #1
 8000618:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800061e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000622:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000624:	2300      	movs	r3, #0
 8000626:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000628:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800062c:	4618      	mov	r0, r3
 800062e:	f000 fced 	bl	800100c <HAL_RCC_OscConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000638:	f000 f8f4 	bl	8000824 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063c:	230f      	movs	r3, #15
 800063e:	613b      	str	r3, [r7, #16]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000650:	f107 0310 	add.w	r3, r7, #16
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f001 f808 	bl	800166c <HAL_RCC_ClockConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000662:	f000 f8df 	bl	8000824 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000666:	2301      	movs	r3, #1
 8000668:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800066a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800066e:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	4618      	mov	r0, r3
 8000674:	f001 fa92 	bl	8001b9c <HAL_RCCEx_PeriphCLKConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800067e:	f000 f8d1 	bl	8000824 <Error_Handler>
  }
}
 8000682:	bf00      	nop
 8000684:	3758      	adds	r7, #88	; 0x58
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40007000 	.word	0x40007000

08000690 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000694:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <MX_RTC_Init+0x44>)
 8000696:	4a10      	ldr	r2, [pc, #64]	; (80006d8 <MX_RTC_Init+0x48>)
 8000698:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <MX_RTC_Init+0x44>)
 800069c:	2200      	movs	r2, #0
 800069e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80006a0:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <MX_RTC_Init+0x44>)
 80006a2:	227f      	movs	r2, #127	; 0x7f
 80006a4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80006a6:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <MX_RTC_Init+0x44>)
 80006a8:	22ff      	movs	r2, #255	; 0xff
 80006aa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006ac:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <MX_RTC_Init+0x44>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006b2:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <MX_RTC_Init+0x44>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <MX_RTC_Init+0x44>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006be:	4805      	ldr	r0, [pc, #20]	; (80006d4 <MX_RTC_Init+0x44>)
 80006c0:	f001 fb4e 	bl	8001d60 <HAL_RTC_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80006ca:	f000 f8ab 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20002714 	.word	0x20002714
 80006d8:	40002800 	.word	0x40002800

080006dc <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 80006e0:	4b12      	ldr	r3, [pc, #72]	; (800072c <MX_USART2_Init+0x50>)
 80006e2:	4a13      	ldr	r2, [pc, #76]	; (8000730 <MX_USART2_Init+0x54>)
 80006e4:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 80006e6:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_USART2_Init+0x50>)
 80006e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006ec:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 80006ee:	4b0f      	ldr	r3, [pc, #60]	; (800072c <MX_USART2_Init+0x50>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 80006f4:	4b0d      	ldr	r3, [pc, #52]	; (800072c <MX_USART2_Init+0x50>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 80006fa:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_USART2_Init+0x50>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 8000700:	4b0a      	ldr	r3, [pc, #40]	; (800072c <MX_USART2_Init+0x50>)
 8000702:	220c      	movs	r2, #12
 8000704:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_USART2_Init+0x50>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 800070c:	4b07      	ldr	r3, [pc, #28]	; (800072c <MX_USART2_Init+0x50>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000712:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_USART2_Init+0x50>)
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 8000718:	4804      	ldr	r0, [pc, #16]	; (800072c <MX_USART2_Init+0x50>)
 800071a:	f001 fdd1 	bl	80022c0 <HAL_USART_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 8000724:	f000 f87e 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20002734 	.word	0x20002734
 8000730:	40004400 	.word	0x40004400

08000734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b088      	sub	sp, #32
 8000738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073a:	f107 030c 	add.w	r3, r7, #12
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	4b1e      	ldr	r3, [pc, #120]	; (80007c4 <MX_GPIO_Init+0x90>)
 800074c:	69db      	ldr	r3, [r3, #28]
 800074e:	4a1d      	ldr	r2, [pc, #116]	; (80007c4 <MX_GPIO_Init+0x90>)
 8000750:	f043 0304 	orr.w	r3, r3, #4
 8000754:	61d3      	str	r3, [r2, #28]
 8000756:	4b1b      	ldr	r3, [pc, #108]	; (80007c4 <MX_GPIO_Init+0x90>)
 8000758:	69db      	ldr	r3, [r3, #28]
 800075a:	f003 0304 	and.w	r3, r3, #4
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <MX_GPIO_Init+0x90>)
 8000764:	69db      	ldr	r3, [r3, #28]
 8000766:	4a17      	ldr	r2, [pc, #92]	; (80007c4 <MX_GPIO_Init+0x90>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	61d3      	str	r3, [r2, #28]
 800076e:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <MX_GPIO_Init+0x90>)
 8000770:	69db      	ldr	r3, [r3, #28]
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	2120      	movs	r1, #32
 800077e:	4812      	ldr	r0, [pc, #72]	; (80007c8 <MX_GPIO_Init+0x94>)
 8000780:	f000 fc2c 	bl	8000fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8000784:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000788:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000792:	f107 030c 	add.w	r3, r7, #12
 8000796:	4619      	mov	r1, r3
 8000798:	480c      	ldr	r0, [pc, #48]	; (80007cc <MX_GPIO_Init+0x98>)
 800079a:	f000 fa91 	bl	8000cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 800079e:	2320      	movs	r3, #32
 80007a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a2:	2301      	movs	r3, #1
 80007a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 80007ae:	f107 030c 	add.w	r3, r7, #12
 80007b2:	4619      	mov	r1, r3
 80007b4:	4804      	ldr	r0, [pc, #16]	; (80007c8 <MX_GPIO_Init+0x94>)
 80007b6:	f000 fa83 	bl	8000cc0 <HAL_GPIO_Init>

}
 80007ba:	bf00      	nop
 80007bc:	3720      	adds	r7, #32
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40023800 	.word	0x40023800
 80007c8:	40020000 	.word	0x40020000
 80007cc:	40020800 	.word	0x40020800

080007d0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007d8:	2001      	movs	r0, #1
 80007da:	f001 ffbd 	bl	8002758 <osDelay>
 80007de:	e7fb      	b.n	80007d8 <StartDefaultTask+0x8>

080007e0 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007e8:	2001      	movs	r0, #1
 80007ea:	f001 ffb5 	bl	8002758 <osDelay>
 80007ee:	e7fb      	b.n	80007e8 <StartTask04+0x8>

080007f0 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void *argument)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007f8:	2001      	movs	r0, #1
 80007fa:	f001 ffad 	bl	8002758 <osDelay>
 80007fe:	e7fb      	b.n	80007f8 <StartTask05+0x8>

08000800 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a04      	ldr	r2, [pc, #16]	; (8000820 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d101      	bne.n	8000816 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000812:	f000 f959 	bl	8000ac8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40001000 	.word	0x40001000

08000824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000828:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800082a:	e7fe      	b.n	800082a <Error_Handler+0x6>

0800082c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000832:	4b17      	ldr	r3, [pc, #92]	; (8000890 <HAL_MspInit+0x64>)
 8000834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000836:	4a16      	ldr	r2, [pc, #88]	; (8000890 <HAL_MspInit+0x64>)
 8000838:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800083c:	6253      	str	r3, [r2, #36]	; 0x24
 800083e:	4b14      	ldr	r3, [pc, #80]	; (8000890 <HAL_MspInit+0x64>)
 8000840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000842:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084a:	4b11      	ldr	r3, [pc, #68]	; (8000890 <HAL_MspInit+0x64>)
 800084c:	6a1b      	ldr	r3, [r3, #32]
 800084e:	4a10      	ldr	r2, [pc, #64]	; (8000890 <HAL_MspInit+0x64>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	6213      	str	r3, [r2, #32]
 8000856:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <HAL_MspInit+0x64>)
 8000858:	6a1b      	ldr	r3, [r3, #32]
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000862:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <HAL_MspInit+0x64>)
 8000864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000866:	4a0a      	ldr	r2, [pc, #40]	; (8000890 <HAL_MspInit+0x64>)
 8000868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800086c:	6253      	str	r3, [r2, #36]	; 0x24
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <HAL_MspInit+0x64>)
 8000870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800087a:	2200      	movs	r2, #0
 800087c:	210f      	movs	r1, #15
 800087e:	f06f 0001 	mvn.w	r0, #1
 8000882:	f000 f9f2 	bl	8000c6a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000886:	bf00      	nop
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40023800 	.word	0x40023800

08000894 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a05      	ldr	r2, [pc, #20]	; (80008b8 <HAL_RTC_MspInit+0x24>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d102      	bne.n	80008ac <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80008a6:	4b05      	ldr	r3, [pc, #20]	; (80008bc <HAL_RTC_MspInit+0x28>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80008ac:	bf00      	nop
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bc80      	pop	{r7}
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	40002800 	.word	0x40002800
 80008bc:	424706d8 	.word	0x424706d8

080008c0 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08a      	sub	sp, #40	; 0x28
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART2)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a17      	ldr	r2, [pc, #92]	; (800093c <HAL_USART_MspInit+0x7c>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d127      	bne.n	8000932 <HAL_USART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008e2:	4b17      	ldr	r3, [pc, #92]	; (8000940 <HAL_USART_MspInit+0x80>)
 80008e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008e6:	4a16      	ldr	r2, [pc, #88]	; (8000940 <HAL_USART_MspInit+0x80>)
 80008e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ec:	6253      	str	r3, [r2, #36]	; 0x24
 80008ee:	4b14      	ldr	r3, [pc, #80]	; (8000940 <HAL_USART_MspInit+0x80>)
 80008f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	4b11      	ldr	r3, [pc, #68]	; (8000940 <HAL_USART_MspInit+0x80>)
 80008fc:	69db      	ldr	r3, [r3, #28]
 80008fe:	4a10      	ldr	r2, [pc, #64]	; (8000940 <HAL_USART_MspInit+0x80>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	61d3      	str	r3, [r2, #28]
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <HAL_USART_MspInit+0x80>)
 8000908:	69db      	ldr	r3, [r3, #28]
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PA4     ------> USART2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8000912:	231c      	movs	r3, #28
 8000914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000916:	2302      	movs	r3, #2
 8000918:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091e:	2303      	movs	r3, #3
 8000920:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000922:	2307      	movs	r3, #7
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	4619      	mov	r1, r3
 800092c:	4805      	ldr	r0, [pc, #20]	; (8000944 <HAL_USART_MspInit+0x84>)
 800092e:	f000 f9c7 	bl	8000cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000932:	bf00      	nop
 8000934:	3728      	adds	r7, #40	; 0x28
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40004400 	.word	0x40004400
 8000940:	40023800 	.word	0x40023800
 8000944:	40020000 	.word	0x40020000

08000948 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08c      	sub	sp, #48	; 0x30
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000950:	2300      	movs	r3, #0
 8000952:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority ,0);
 8000958:	2200      	movs	r2, #0
 800095a:	6879      	ldr	r1, [r7, #4]
 800095c:	202b      	movs	r0, #43	; 0x2b
 800095e:	f000 f984 	bl	8000c6a <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000962:	202b      	movs	r0, #43	; 0x2b
 8000964:	f000 f99d 	bl	8000ca2 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000968:	4b1e      	ldr	r3, [pc, #120]	; (80009e4 <HAL_InitTick+0x9c>)
 800096a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800096c:	4a1d      	ldr	r2, [pc, #116]	; (80009e4 <HAL_InitTick+0x9c>)
 800096e:	f043 0310 	orr.w	r3, r3, #16
 8000972:	6253      	str	r3, [r2, #36]	; 0x24
 8000974:	4b1b      	ldr	r3, [pc, #108]	; (80009e4 <HAL_InitTick+0x9c>)
 8000976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000978:	f003 0310 	and.w	r3, r3, #16
 800097c:	60fb      	str	r3, [r7, #12]
 800097e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000980:	f107 0210 	add.w	r2, r7, #16
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	4611      	mov	r1, r2
 800098a:	4618      	mov	r0, r3
 800098c:	f001 f876 	bl	8001a7c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000990:	f001 f84c 	bl	8001a2c <HAL_RCC_GetPCLK1Freq>
 8000994:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000998:	4a13      	ldr	r2, [pc, #76]	; (80009e8 <HAL_InitTick+0xa0>)
 800099a:	fba2 2303 	umull	r2, r3, r2, r3
 800099e:	0c9b      	lsrs	r3, r3, #18
 80009a0:	3b01      	subs	r3, #1
 80009a2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80009a4:	4b11      	ldr	r3, [pc, #68]	; (80009ec <HAL_InitTick+0xa4>)
 80009a6:	4a12      	ldr	r2, [pc, #72]	; (80009f0 <HAL_InitTick+0xa8>)
 80009a8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80009aa:	4b10      	ldr	r3, [pc, #64]	; (80009ec <HAL_InitTick+0xa4>)
 80009ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009b0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80009b2:	4a0e      	ldr	r2, [pc, #56]	; (80009ec <HAL_InitTick+0xa4>)
 80009b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009b6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80009b8:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <HAL_InitTick+0xa4>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <HAL_InitTick+0xa4>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80009c4:	4809      	ldr	r0, [pc, #36]	; (80009ec <HAL_InitTick+0xa4>)
 80009c6:	f001 fa70 	bl	8001eaa <HAL_TIM_Base_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d104      	bne.n	80009da <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80009d0:	4806      	ldr	r0, [pc, #24]	; (80009ec <HAL_InitTick+0xa4>)
 80009d2:	f001 fab3 	bl	8001f3c <HAL_TIM_Base_Start_IT>
 80009d6:	4603      	mov	r3, r0
 80009d8:	e000      	b.n	80009dc <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80009da:	2301      	movs	r3, #1
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3730      	adds	r7, #48	; 0x30
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40023800 	.word	0x40023800
 80009e8:	431bde83 	.word	0x431bde83
 80009ec:	2000277c 	.word	0x2000277c
 80009f0:	40001000 	.word	0x40001000

080009f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <NMI_Handler+0x4>

080009fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009fe:	e7fe      	b.n	80009fe <HardFault_Handler+0x4>

08000a00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <MemManage_Handler+0x4>

08000a06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a0a:	e7fe      	b.n	8000a0a <BusFault_Handler+0x4>

08000a0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <UsageFault_Handler+0x4>

08000a12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bc80      	pop	{r7}
 8000a1c:	4770      	bx	lr
	...

08000a20 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a24:	4802      	ldr	r0, [pc, #8]	; (8000a30 <TIM6_IRQHandler+0x10>)
 8000a26:	f001 fadb 	bl	8001fe0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	2000277c 	.word	0x2000277c

08000a34 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000a38:	4b03      	ldr	r3, [pc, #12]	; (8000a48 <SystemInit+0x14>)
 8000a3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a3e:	609a      	str	r2, [r3, #8]
#endif
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000a4c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000a4e:	e003      	b.n	8000a58 <LoopCopyDataInit>

08000a50 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000a50:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000a52:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000a54:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000a56:	3104      	adds	r1, #4

08000a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000a58:	480a      	ldr	r0, [pc, #40]	; (8000a84 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000a5c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000a5e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000a60:	d3f6      	bcc.n	8000a50 <CopyDataInit>
  ldr r2, =_sbss
 8000a62:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000a64:	e002      	b.n	8000a6c <LoopFillZerobss>

08000a66 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000a66:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000a68:	f842 3b04 	str.w	r3, [r2], #4

08000a6c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000a6c:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000a6e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000a70:	d3f9      	bcc.n	8000a66 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a72:	f7ff ffdf 	bl	8000a34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a76:	f006 f8d9 	bl	8006c2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a7a:	f7ff fd49 	bl	8000510 <main>
  bx lr
 8000a7e:	4770      	bx	lr
  ldr r3, =_sidata
 8000a80:	08006ec0 	.word	0x08006ec0
  ldr r0, =_sdata
 8000a84:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000a88:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8000a8c:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8000a90:	200028a8 	.word	0x200028a8

08000a94 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a94:	e7fe      	b.n	8000a94 <ADC1_IRQHandler>

08000a96 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b082      	sub	sp, #8
 8000a9a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa0:	2003      	movs	r0, #3
 8000aa2:	f000 f8d7 	bl	8000c54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	f7ff ff4e 	bl	8000948 <HAL_InitTick>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d002      	beq.n	8000ab8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	71fb      	strb	r3, [r7, #7]
 8000ab6:	e001      	b.n	8000abc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ab8:	f7ff feb8 	bl	800082c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000abc:	79fb      	ldrb	r3, [r7, #7]
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
	...

08000ac8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000acc:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <HAL_IncTick+0x1c>)
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <HAL_IncTick+0x20>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	4a03      	ldr	r2, [pc, #12]	; (8000ae4 <HAL_IncTick+0x1c>)
 8000ad8:	6013      	str	r3, [r2, #0]
}
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bc80      	pop	{r7}
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	200027bc 	.word	0x200027bc
 8000ae8:	20000008 	.word	0x20000008

08000aec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  return uwTick;
 8000af0:	4b02      	ldr	r3, [pc, #8]	; (8000afc <HAL_GetTick+0x10>)
 8000af2:	681b      	ldr	r3, [r3, #0]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr
 8000afc:	200027bc 	.word	0x200027bc

08000b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f003 0307 	and.w	r3, r3, #7
 8000b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <__NVIC_SetPriorityGrouping+0x44>)
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b16:	68ba      	ldr	r2, [r7, #8]
 8000b18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b32:	4a04      	ldr	r2, [pc, #16]	; (8000b44 <__NVIC_SetPriorityGrouping+0x44>)
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	60d3      	str	r3, [r2, #12]
}
 8000b38:	bf00      	nop
 8000b3a:	3714      	adds	r7, #20
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bc80      	pop	{r7}
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b4c:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <__NVIC_GetPriorityGrouping+0x18>)
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	0a1b      	lsrs	r3, r3, #8
 8000b52:	f003 0307 	and.w	r3, r3, #7
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bc80      	pop	{r7}
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	db0b      	blt.n	8000b8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	f003 021f 	and.w	r2, r3, #31
 8000b7c:	4906      	ldr	r1, [pc, #24]	; (8000b98 <__NVIC_EnableIRQ+0x34>)
 8000b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b82:	095b      	lsrs	r3, r3, #5
 8000b84:	2001      	movs	r0, #1
 8000b86:	fa00 f202 	lsl.w	r2, r0, r2
 8000b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc80      	pop	{r7}
 8000b96:	4770      	bx	lr
 8000b98:	e000e100 	.word	0xe000e100

08000b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	6039      	str	r1, [r7, #0]
 8000ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	db0a      	blt.n	8000bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	490c      	ldr	r1, [pc, #48]	; (8000be8 <__NVIC_SetPriority+0x4c>)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	0112      	lsls	r2, r2, #4
 8000bbc:	b2d2      	uxtb	r2, r2
 8000bbe:	440b      	add	r3, r1
 8000bc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc4:	e00a      	b.n	8000bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	4908      	ldr	r1, [pc, #32]	; (8000bec <__NVIC_SetPriority+0x50>)
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	f003 030f 	and.w	r3, r3, #15
 8000bd2:	3b04      	subs	r3, #4
 8000bd4:	0112      	lsls	r2, r2, #4
 8000bd6:	b2d2      	uxtb	r2, r2
 8000bd8:	440b      	add	r3, r1
 8000bda:	761a      	strb	r2, [r3, #24]
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bc80      	pop	{r7}
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	e000e100 	.word	0xe000e100
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b089      	sub	sp, #36	; 0x24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	f1c3 0307 	rsb	r3, r3, #7
 8000c0a:	2b04      	cmp	r3, #4
 8000c0c:	bf28      	it	cs
 8000c0e:	2304      	movcs	r3, #4
 8000c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	3304      	adds	r3, #4
 8000c16:	2b06      	cmp	r3, #6
 8000c18:	d902      	bls.n	8000c20 <NVIC_EncodePriority+0x30>
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	3b03      	subs	r3, #3
 8000c1e:	e000      	b.n	8000c22 <NVIC_EncodePriority+0x32>
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c24:	f04f 32ff 	mov.w	r2, #4294967295
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	43da      	mvns	r2, r3
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	401a      	ands	r2, r3
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c38:	f04f 31ff 	mov.w	r1, #4294967295
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c42:	43d9      	mvns	r1, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c48:	4313      	orrs	r3, r2
         );
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3724      	adds	r7, #36	; 0x24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr

08000c54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f7ff ff4f 	bl	8000b00 <__NVIC_SetPriorityGrouping>
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b086      	sub	sp, #24
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	4603      	mov	r3, r0
 8000c72:	60b9      	str	r1, [r7, #8]
 8000c74:	607a      	str	r2, [r7, #4]
 8000c76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c7c:	f7ff ff64 	bl	8000b48 <__NVIC_GetPriorityGrouping>
 8000c80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	68b9      	ldr	r1, [r7, #8]
 8000c86:	6978      	ldr	r0, [r7, #20]
 8000c88:	f7ff ffb2 	bl	8000bf0 <NVIC_EncodePriority>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c92:	4611      	mov	r1, r2
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff ff81 	bl	8000b9c <__NVIC_SetPriority>
}
 8000c9a:	bf00      	nop
 8000c9c:	3718      	adds	r7, #24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	4603      	mov	r3, r0
 8000caa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff ff57 	bl	8000b64 <__NVIC_EnableIRQ>
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
	...

08000cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b087      	sub	sp, #28
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000cd6:	e160      	b.n	8000f9a <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	2101      	movs	r1, #1
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	f000 8152 	beq.w	8000f94 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d00b      	beq.n	8000d10 <HAL_GPIO_Init+0x50>
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d007      	beq.n	8000d10 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d04:	2b11      	cmp	r3, #17
 8000d06:	d003      	beq.n	8000d10 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	2b12      	cmp	r3, #18
 8000d0e:	d130      	bne.n	8000d72 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	2203      	movs	r2, #3
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	43db      	mvns	r3, r3
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	4013      	ands	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	68da      	ldr	r2, [r3, #12]
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	693a      	ldr	r2, [r7, #16]
 8000d3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000d46:	2201      	movs	r2, #1
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	43db      	mvns	r3, r3
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	4013      	ands	r3, r2
 8000d54:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	091b      	lsrs	r3, r3, #4
 8000d5c:	f003 0201 	and.w	r2, r3, #1
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	68db      	ldr	r3, [r3, #12]
 8000d76:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	2203      	movs	r2, #3
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43db      	mvns	r3, r3
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	4013      	ands	r3, r2
 8000d88:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	689a      	ldr	r2, [r3, #8]
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d003      	beq.n	8000db2 <HAL_GPIO_Init+0xf2>
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	2b12      	cmp	r3, #18
 8000db0:	d123      	bne.n	8000dfa <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	08da      	lsrs	r2, r3, #3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	3208      	adds	r2, #8
 8000dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dbe:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	220f      	movs	r2, #15
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	691a      	ldr	r2, [r3, #16]
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	f003 0307 	and.w	r3, r3, #7
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	08da      	lsrs	r2, r3, #3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3208      	adds	r2, #8
 8000df4:	6939      	ldr	r1, [r7, #16]
 8000df6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	2203      	movs	r2, #3
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	43db      	mvns	r3, r3
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f003 0203 	and.w	r2, r3, #3
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	f000 80ac 	beq.w	8000f94 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e3c:	4b5d      	ldr	r3, [pc, #372]	; (8000fb4 <HAL_GPIO_Init+0x2f4>)
 8000e3e:	6a1b      	ldr	r3, [r3, #32]
 8000e40:	4a5c      	ldr	r2, [pc, #368]	; (8000fb4 <HAL_GPIO_Init+0x2f4>)
 8000e42:	f043 0301 	orr.w	r3, r3, #1
 8000e46:	6213      	str	r3, [r2, #32]
 8000e48:	4b5a      	ldr	r3, [pc, #360]	; (8000fb4 <HAL_GPIO_Init+0x2f4>)
 8000e4a:	6a1b      	ldr	r3, [r3, #32]
 8000e4c:	f003 0301 	and.w	r3, r3, #1
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000e54:	4a58      	ldr	r2, [pc, #352]	; (8000fb8 <HAL_GPIO_Init+0x2f8>)
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	089b      	lsrs	r3, r3, #2
 8000e5a:	3302      	adds	r3, #2
 8000e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e60:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	f003 0303 	and.w	r3, r3, #3
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	220f      	movs	r2, #15
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	4013      	ands	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a50      	ldr	r2, [pc, #320]	; (8000fbc <HAL_GPIO_Init+0x2fc>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d025      	beq.n	8000ecc <HAL_GPIO_Init+0x20c>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4a4f      	ldr	r2, [pc, #316]	; (8000fc0 <HAL_GPIO_Init+0x300>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d01f      	beq.n	8000ec8 <HAL_GPIO_Init+0x208>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4a4e      	ldr	r2, [pc, #312]	; (8000fc4 <HAL_GPIO_Init+0x304>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d019      	beq.n	8000ec4 <HAL_GPIO_Init+0x204>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4a4d      	ldr	r2, [pc, #308]	; (8000fc8 <HAL_GPIO_Init+0x308>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d013      	beq.n	8000ec0 <HAL_GPIO_Init+0x200>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4a4c      	ldr	r2, [pc, #304]	; (8000fcc <HAL_GPIO_Init+0x30c>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d00d      	beq.n	8000ebc <HAL_GPIO_Init+0x1fc>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4a4b      	ldr	r2, [pc, #300]	; (8000fd0 <HAL_GPIO_Init+0x310>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d007      	beq.n	8000eb8 <HAL_GPIO_Init+0x1f8>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	4a4a      	ldr	r2, [pc, #296]	; (8000fd4 <HAL_GPIO_Init+0x314>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d101      	bne.n	8000eb4 <HAL_GPIO_Init+0x1f4>
 8000eb0:	2306      	movs	r3, #6
 8000eb2:	e00c      	b.n	8000ece <HAL_GPIO_Init+0x20e>
 8000eb4:	2307      	movs	r3, #7
 8000eb6:	e00a      	b.n	8000ece <HAL_GPIO_Init+0x20e>
 8000eb8:	2305      	movs	r3, #5
 8000eba:	e008      	b.n	8000ece <HAL_GPIO_Init+0x20e>
 8000ebc:	2304      	movs	r3, #4
 8000ebe:	e006      	b.n	8000ece <HAL_GPIO_Init+0x20e>
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	e004      	b.n	8000ece <HAL_GPIO_Init+0x20e>
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	e002      	b.n	8000ece <HAL_GPIO_Init+0x20e>
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e000      	b.n	8000ece <HAL_GPIO_Init+0x20e>
 8000ecc:	2300      	movs	r3, #0
 8000ece:	697a      	ldr	r2, [r7, #20]
 8000ed0:	f002 0203 	and.w	r2, r2, #3
 8000ed4:	0092      	lsls	r2, r2, #2
 8000ed6:	4093      	lsls	r3, r2
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000ede:	4936      	ldr	r1, [pc, #216]	; (8000fb8 <HAL_GPIO_Init+0x2f8>)
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	089b      	lsrs	r3, r3, #2
 8000ee4:	3302      	adds	r3, #2
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eec:	4b3a      	ldr	r3, [pc, #232]	; (8000fd8 <HAL_GPIO_Init+0x318>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d003      	beq.n	8000f10 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f10:	4a31      	ldr	r2, [pc, #196]	; (8000fd8 <HAL_GPIO_Init+0x318>)
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f16:	4b30      	ldr	r3, [pc, #192]	; (8000fd8 <HAL_GPIO_Init+0x318>)
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	4013      	ands	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d003      	beq.n	8000f3a <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f3a:	4a27      	ldr	r2, [pc, #156]	; (8000fd8 <HAL_GPIO_Init+0x318>)
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f40:	4b25      	ldr	r3, [pc, #148]	; (8000fd8 <HAL_GPIO_Init+0x318>)
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d003      	beq.n	8000f64 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f64:	4a1c      	ldr	r2, [pc, #112]	; (8000fd8 <HAL_GPIO_Init+0x318>)
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f6a:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <HAL_GPIO_Init+0x318>)
 8000f6c:	68db      	ldr	r3, [r3, #12]
 8000f6e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	43db      	mvns	r3, r3
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	4013      	ands	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f8e:	4a12      	ldr	r2, [pc, #72]	; (8000fd8 <HAL_GPIO_Init+0x318>)
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	3301      	adds	r3, #1
 8000f98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	f47f ae97 	bne.w	8000cd8 <HAL_GPIO_Init+0x18>
  }
}
 8000faa:	bf00      	nop
 8000fac:	371c      	adds	r7, #28
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr
 8000fb4:	40023800 	.word	0x40023800
 8000fb8:	40010000 	.word	0x40010000
 8000fbc:	40020000 	.word	0x40020000
 8000fc0:	40020400 	.word	0x40020400
 8000fc4:	40020800 	.word	0x40020800
 8000fc8:	40020c00 	.word	0x40020c00
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	40021400 	.word	0x40021400
 8000fd4:	40021800 	.word	0x40021800
 8000fd8:	40010400 	.word	0x40010400

08000fdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	807b      	strh	r3, [r7, #2]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fec:	787b      	ldrb	r3, [r7, #1]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ff2:	887a      	ldrh	r2, [r7, #2]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8000ff8:	e003      	b.n	8001002 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000ffa:	887b      	ldrh	r3, [r7, #2]
 8000ffc:	041a      	lsls	r2, r3, #16
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	619a      	str	r2, [r3, #24]
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr

0800100c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d101      	bne.n	800101e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e31d      	b.n	800165a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800101e:	4b94      	ldr	r3, [pc, #592]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	f003 030c 	and.w	r3, r3, #12
 8001026:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001028:	4b91      	ldr	r3, [pc, #580]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001030:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	2b00      	cmp	r3, #0
 800103c:	d07b      	beq.n	8001136 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	2b08      	cmp	r3, #8
 8001042:	d006      	beq.n	8001052 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	2b0c      	cmp	r3, #12
 8001048:	d10f      	bne.n	800106a <HAL_RCC_OscConfig+0x5e>
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001050:	d10b      	bne.n	800106a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001052:	4b87      	ldr	r3, [pc, #540]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d06a      	beq.n	8001134 <HAL_RCC_OscConfig+0x128>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d166      	bne.n	8001134 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e2f7      	b.n	800165a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	2b01      	cmp	r3, #1
 8001070:	d106      	bne.n	8001080 <HAL_RCC_OscConfig+0x74>
 8001072:	4b7f      	ldr	r3, [pc, #508]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a7e      	ldr	r2, [pc, #504]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 8001078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800107c:	6013      	str	r3, [r2, #0]
 800107e:	e02d      	b.n	80010dc <HAL_RCC_OscConfig+0xd0>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d10c      	bne.n	80010a2 <HAL_RCC_OscConfig+0x96>
 8001088:	4b79      	ldr	r3, [pc, #484]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a78      	ldr	r2, [pc, #480]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 800108e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001092:	6013      	str	r3, [r2, #0]
 8001094:	4b76      	ldr	r3, [pc, #472]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a75      	ldr	r2, [pc, #468]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 800109a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800109e:	6013      	str	r3, [r2, #0]
 80010a0:	e01c      	b.n	80010dc <HAL_RCC_OscConfig+0xd0>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	2b05      	cmp	r3, #5
 80010a8:	d10c      	bne.n	80010c4 <HAL_RCC_OscConfig+0xb8>
 80010aa:	4b71      	ldr	r3, [pc, #452]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a70      	ldr	r2, [pc, #448]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 80010b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010b4:	6013      	str	r3, [r2, #0]
 80010b6:	4b6e      	ldr	r3, [pc, #440]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a6d      	ldr	r2, [pc, #436]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 80010bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010c0:	6013      	str	r3, [r2, #0]
 80010c2:	e00b      	b.n	80010dc <HAL_RCC_OscConfig+0xd0>
 80010c4:	4b6a      	ldr	r3, [pc, #424]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a69      	ldr	r2, [pc, #420]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 80010ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010ce:	6013      	str	r3, [r2, #0]
 80010d0:	4b67      	ldr	r3, [pc, #412]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a66      	ldr	r2, [pc, #408]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 80010d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d013      	beq.n	800110c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e4:	f7ff fd02 	bl	8000aec <HAL_GetTick>
 80010e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80010ea:	e008      	b.n	80010fe <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010ec:	f7ff fcfe 	bl	8000aec <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	2b64      	cmp	r3, #100	; 0x64
 80010f8:	d901      	bls.n	80010fe <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e2ad      	b.n	800165a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80010fe:	4b5c      	ldr	r3, [pc, #368]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d0f0      	beq.n	80010ec <HAL_RCC_OscConfig+0xe0>
 800110a:	e014      	b.n	8001136 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800110c:	f7ff fcee 	bl	8000aec <HAL_GetTick>
 8001110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001112:	e008      	b.n	8001126 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001114:	f7ff fcea 	bl	8000aec <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	2b64      	cmp	r3, #100	; 0x64
 8001120:	d901      	bls.n	8001126 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001122:	2303      	movs	r3, #3
 8001124:	e299      	b.n	800165a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001126:	4b52      	ldr	r3, [pc, #328]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d1f0      	bne.n	8001114 <HAL_RCC_OscConfig+0x108>
 8001132:	e000      	b.n	8001136 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001134:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	2b00      	cmp	r3, #0
 8001140:	d05a      	beq.n	80011f8 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	2b04      	cmp	r3, #4
 8001146:	d005      	beq.n	8001154 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	2b0c      	cmp	r3, #12
 800114c:	d119      	bne.n	8001182 <HAL_RCC_OscConfig+0x176>
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d116      	bne.n	8001182 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001154:	4b46      	ldr	r3, [pc, #280]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 0302 	and.w	r3, r3, #2
 800115c:	2b00      	cmp	r3, #0
 800115e:	d005      	beq.n	800116c <HAL_RCC_OscConfig+0x160>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d001      	beq.n	800116c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	e276      	b.n	800165a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800116c:	4b40      	ldr	r3, [pc, #256]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	691b      	ldr	r3, [r3, #16]
 8001178:	021b      	lsls	r3, r3, #8
 800117a:	493d      	ldr	r1, [pc, #244]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 800117c:	4313      	orrs	r3, r2
 800117e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001180:	e03a      	b.n	80011f8 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d020      	beq.n	80011cc <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800118a:	4b3a      	ldr	r3, [pc, #232]	; (8001274 <HAL_RCC_OscConfig+0x268>)
 800118c:	2201      	movs	r2, #1
 800118e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001190:	f7ff fcac 	bl	8000aec <HAL_GetTick>
 8001194:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001196:	e008      	b.n	80011aa <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001198:	f7ff fca8 	bl	8000aec <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d901      	bls.n	80011aa <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e257      	b.n	800165a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80011aa:	4b31      	ldr	r3, [pc, #196]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d0f0      	beq.n	8001198 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b6:	4b2e      	ldr	r3, [pc, #184]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	691b      	ldr	r3, [r3, #16]
 80011c2:	021b      	lsls	r3, r3, #8
 80011c4:	492a      	ldr	r1, [pc, #168]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 80011c6:	4313      	orrs	r3, r2
 80011c8:	604b      	str	r3, [r1, #4]
 80011ca:	e015      	b.n	80011f8 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011cc:	4b29      	ldr	r3, [pc, #164]	; (8001274 <HAL_RCC_OscConfig+0x268>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d2:	f7ff fc8b 	bl	8000aec <HAL_GetTick>
 80011d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80011d8:	e008      	b.n	80011ec <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011da:	f7ff fc87 	bl	8000aec <HAL_GetTick>
 80011de:	4602      	mov	r2, r0
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d901      	bls.n	80011ec <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80011e8:	2303      	movs	r3, #3
 80011ea:	e236      	b.n	800165a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80011ec:	4b20      	ldr	r3, [pc, #128]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d1f0      	bne.n	80011da <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0310 	and.w	r3, r3, #16
 8001200:	2b00      	cmp	r3, #0
 8001202:	f000 80b8 	beq.w	8001376 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d170      	bne.n	80012ee <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800120c:	4b18      	ldr	r3, [pc, #96]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001214:	2b00      	cmp	r3, #0
 8001216:	d005      	beq.n	8001224 <HAL_RCC_OscConfig+0x218>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d101      	bne.n	8001224 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	e21a      	b.n	800165a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6a1a      	ldr	r2, [r3, #32]
 8001228:	4b11      	ldr	r3, [pc, #68]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001230:	429a      	cmp	r2, r3
 8001232:	d921      	bls.n	8001278 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6a1b      	ldr	r3, [r3, #32]
 8001238:	4618      	mov	r0, r3
 800123a:	f000 fc4f 	bl	8001adc <RCC_SetFlashLatencyFromMSIRange>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e208      	b.n	800165a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001248:	4b09      	ldr	r3, [pc, #36]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a1b      	ldr	r3, [r3, #32]
 8001254:	4906      	ldr	r1, [pc, #24]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 8001256:	4313      	orrs	r3, r2
 8001258:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800125a:	4b05      	ldr	r3, [pc, #20]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	69db      	ldr	r3, [r3, #28]
 8001266:	061b      	lsls	r3, r3, #24
 8001268:	4901      	ldr	r1, [pc, #4]	; (8001270 <HAL_RCC_OscConfig+0x264>)
 800126a:	4313      	orrs	r3, r2
 800126c:	604b      	str	r3, [r1, #4]
 800126e:	e020      	b.n	80012b2 <HAL_RCC_OscConfig+0x2a6>
 8001270:	40023800 	.word	0x40023800
 8001274:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001278:	4ba4      	ldr	r3, [pc, #656]	; (800150c <HAL_RCC_OscConfig+0x500>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6a1b      	ldr	r3, [r3, #32]
 8001284:	49a1      	ldr	r1, [pc, #644]	; (800150c <HAL_RCC_OscConfig+0x500>)
 8001286:	4313      	orrs	r3, r2
 8001288:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800128a:	4ba0      	ldr	r3, [pc, #640]	; (800150c <HAL_RCC_OscConfig+0x500>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	69db      	ldr	r3, [r3, #28]
 8001296:	061b      	lsls	r3, r3, #24
 8001298:	499c      	ldr	r1, [pc, #624]	; (800150c <HAL_RCC_OscConfig+0x500>)
 800129a:	4313      	orrs	r3, r2
 800129c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6a1b      	ldr	r3, [r3, #32]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 fc1a 	bl	8001adc <RCC_SetFlashLatencyFromMSIRange>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e1d3      	b.n	800165a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a1b      	ldr	r3, [r3, #32]
 80012b6:	0b5b      	lsrs	r3, r3, #13
 80012b8:	3301      	adds	r3, #1
 80012ba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80012c2:	4a92      	ldr	r2, [pc, #584]	; (800150c <HAL_RCC_OscConfig+0x500>)
 80012c4:	6892      	ldr	r2, [r2, #8]
 80012c6:	0912      	lsrs	r2, r2, #4
 80012c8:	f002 020f 	and.w	r2, r2, #15
 80012cc:	4990      	ldr	r1, [pc, #576]	; (8001510 <HAL_RCC_OscConfig+0x504>)
 80012ce:	5c8a      	ldrb	r2, [r1, r2]
 80012d0:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80012d2:	4a90      	ldr	r2, [pc, #576]	; (8001514 <HAL_RCC_OscConfig+0x508>)
 80012d4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012d6:	4b90      	ldr	r3, [pc, #576]	; (8001518 <HAL_RCC_OscConfig+0x50c>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff fb34 	bl	8000948 <HAL_InitTick>
 80012e0:	4603      	mov	r3, r0
 80012e2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80012e4:	7bfb      	ldrb	r3, [r7, #15]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d045      	beq.n	8001376 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
 80012ec:	e1b5      	b.n	800165a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	699b      	ldr	r3, [r3, #24]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d029      	beq.n	800134a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012f6:	4b89      	ldr	r3, [pc, #548]	; (800151c <HAL_RCC_OscConfig+0x510>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fc:	f7ff fbf6 	bl	8000aec <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001302:	e008      	b.n	8001316 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001304:	f7ff fbf2 	bl	8000aec <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b02      	cmp	r3, #2
 8001310:	d901      	bls.n	8001316 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e1a1      	b.n	800165a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001316:	4b7d      	ldr	r3, [pc, #500]	; (800150c <HAL_RCC_OscConfig+0x500>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800131e:	2b00      	cmp	r3, #0
 8001320:	d0f0      	beq.n	8001304 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001322:	4b7a      	ldr	r3, [pc, #488]	; (800150c <HAL_RCC_OscConfig+0x500>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a1b      	ldr	r3, [r3, #32]
 800132e:	4977      	ldr	r1, [pc, #476]	; (800150c <HAL_RCC_OscConfig+0x500>)
 8001330:	4313      	orrs	r3, r2
 8001332:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001334:	4b75      	ldr	r3, [pc, #468]	; (800150c <HAL_RCC_OscConfig+0x500>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	69db      	ldr	r3, [r3, #28]
 8001340:	061b      	lsls	r3, r3, #24
 8001342:	4972      	ldr	r1, [pc, #456]	; (800150c <HAL_RCC_OscConfig+0x500>)
 8001344:	4313      	orrs	r3, r2
 8001346:	604b      	str	r3, [r1, #4]
 8001348:	e015      	b.n	8001376 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800134a:	4b74      	ldr	r3, [pc, #464]	; (800151c <HAL_RCC_OscConfig+0x510>)
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001350:	f7ff fbcc 	bl	8000aec <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001358:	f7ff fbc8 	bl	8000aec <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e177      	b.n	800165a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800136a:	4b68      	ldr	r3, [pc, #416]	; (800150c <HAL_RCC_OscConfig+0x500>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1f0      	bne.n	8001358 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0308 	and.w	r3, r3, #8
 800137e:	2b00      	cmp	r3, #0
 8001380:	d030      	beq.n	80013e4 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d016      	beq.n	80013b8 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800138a:	4b65      	ldr	r3, [pc, #404]	; (8001520 <HAL_RCC_OscConfig+0x514>)
 800138c:	2201      	movs	r2, #1
 800138e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001390:	f7ff fbac 	bl	8000aec <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001398:	f7ff fba8 	bl	8000aec <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e157      	b.n	800165a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80013aa:	4b58      	ldr	r3, [pc, #352]	; (800150c <HAL_RCC_OscConfig+0x500>)
 80013ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d0f0      	beq.n	8001398 <HAL_RCC_OscConfig+0x38c>
 80013b6:	e015      	b.n	80013e4 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013b8:	4b59      	ldr	r3, [pc, #356]	; (8001520 <HAL_RCC_OscConfig+0x514>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013be:	f7ff fb95 	bl	8000aec <HAL_GetTick>
 80013c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80013c4:	e008      	b.n	80013d8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013c6:	f7ff fb91 	bl	8000aec <HAL_GetTick>
 80013ca:	4602      	mov	r2, r0
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d901      	bls.n	80013d8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e140      	b.n	800165a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80013d8:	4b4c      	ldr	r3, [pc, #304]	; (800150c <HAL_RCC_OscConfig+0x500>)
 80013da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1f0      	bne.n	80013c6 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f000 80b5 	beq.w	800155c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013f2:	2300      	movs	r3, #0
 80013f4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013f6:	4b45      	ldr	r3, [pc, #276]	; (800150c <HAL_RCC_OscConfig+0x500>)
 80013f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d10d      	bne.n	800141e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001402:	4b42      	ldr	r3, [pc, #264]	; (800150c <HAL_RCC_OscConfig+0x500>)
 8001404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001406:	4a41      	ldr	r2, [pc, #260]	; (800150c <HAL_RCC_OscConfig+0x500>)
 8001408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800140c:	6253      	str	r3, [r2, #36]	; 0x24
 800140e:	4b3f      	ldr	r3, [pc, #252]	; (800150c <HAL_RCC_OscConfig+0x500>)
 8001410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800141a:	2301      	movs	r3, #1
 800141c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800141e:	4b41      	ldr	r3, [pc, #260]	; (8001524 <HAL_RCC_OscConfig+0x518>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001426:	2b00      	cmp	r3, #0
 8001428:	d118      	bne.n	800145c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800142a:	4b3e      	ldr	r3, [pc, #248]	; (8001524 <HAL_RCC_OscConfig+0x518>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a3d      	ldr	r2, [pc, #244]	; (8001524 <HAL_RCC_OscConfig+0x518>)
 8001430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001434:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001436:	f7ff fb59 	bl	8000aec <HAL_GetTick>
 800143a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800143c:	e008      	b.n	8001450 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800143e:	f7ff fb55 	bl	8000aec <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b64      	cmp	r3, #100	; 0x64
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e104      	b.n	800165a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001450:	4b34      	ldr	r3, [pc, #208]	; (8001524 <HAL_RCC_OscConfig+0x518>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001458:	2b00      	cmp	r3, #0
 800145a:	d0f0      	beq.n	800143e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d106      	bne.n	8001472 <HAL_RCC_OscConfig+0x466>
 8001464:	4b29      	ldr	r3, [pc, #164]	; (800150c <HAL_RCC_OscConfig+0x500>)
 8001466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001468:	4a28      	ldr	r2, [pc, #160]	; (800150c <HAL_RCC_OscConfig+0x500>)
 800146a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800146e:	6353      	str	r3, [r2, #52]	; 0x34
 8001470:	e02d      	b.n	80014ce <HAL_RCC_OscConfig+0x4c2>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d10c      	bne.n	8001494 <HAL_RCC_OscConfig+0x488>
 800147a:	4b24      	ldr	r3, [pc, #144]	; (800150c <HAL_RCC_OscConfig+0x500>)
 800147c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800147e:	4a23      	ldr	r2, [pc, #140]	; (800150c <HAL_RCC_OscConfig+0x500>)
 8001480:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001484:	6353      	str	r3, [r2, #52]	; 0x34
 8001486:	4b21      	ldr	r3, [pc, #132]	; (800150c <HAL_RCC_OscConfig+0x500>)
 8001488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800148a:	4a20      	ldr	r2, [pc, #128]	; (800150c <HAL_RCC_OscConfig+0x500>)
 800148c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001490:	6353      	str	r3, [r2, #52]	; 0x34
 8001492:	e01c      	b.n	80014ce <HAL_RCC_OscConfig+0x4c2>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	2b05      	cmp	r3, #5
 800149a:	d10c      	bne.n	80014b6 <HAL_RCC_OscConfig+0x4aa>
 800149c:	4b1b      	ldr	r3, [pc, #108]	; (800150c <HAL_RCC_OscConfig+0x500>)
 800149e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014a0:	4a1a      	ldr	r2, [pc, #104]	; (800150c <HAL_RCC_OscConfig+0x500>)
 80014a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014a6:	6353      	str	r3, [r2, #52]	; 0x34
 80014a8:	4b18      	ldr	r3, [pc, #96]	; (800150c <HAL_RCC_OscConfig+0x500>)
 80014aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014ac:	4a17      	ldr	r2, [pc, #92]	; (800150c <HAL_RCC_OscConfig+0x500>)
 80014ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b2:	6353      	str	r3, [r2, #52]	; 0x34
 80014b4:	e00b      	b.n	80014ce <HAL_RCC_OscConfig+0x4c2>
 80014b6:	4b15      	ldr	r3, [pc, #84]	; (800150c <HAL_RCC_OscConfig+0x500>)
 80014b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014ba:	4a14      	ldr	r2, [pc, #80]	; (800150c <HAL_RCC_OscConfig+0x500>)
 80014bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014c0:	6353      	str	r3, [r2, #52]	; 0x34
 80014c2:	4b12      	ldr	r3, [pc, #72]	; (800150c <HAL_RCC_OscConfig+0x500>)
 80014c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014c6:	4a11      	ldr	r2, [pc, #68]	; (800150c <HAL_RCC_OscConfig+0x500>)
 80014c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80014cc:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d015      	beq.n	8001502 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d6:	f7ff fb09 	bl	8000aec <HAL_GetTick>
 80014da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80014dc:	e00a      	b.n	80014f4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014de:	f7ff fb05 	bl	8000aec <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e0b2      	b.n	800165a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80014f4:	4b05      	ldr	r3, [pc, #20]	; (800150c <HAL_RCC_OscConfig+0x500>)
 80014f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d0ee      	beq.n	80014de <HAL_RCC_OscConfig+0x4d2>
 8001500:	e023      	b.n	800154a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001502:	f7ff faf3 	bl	8000aec <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001508:	e019      	b.n	800153e <HAL_RCC_OscConfig+0x532>
 800150a:	bf00      	nop
 800150c:	40023800 	.word	0x40023800
 8001510:	08006e84 	.word	0x08006e84
 8001514:	20000000 	.word	0x20000000
 8001518:	20000004 	.word	0x20000004
 800151c:	42470020 	.word	0x42470020
 8001520:	42470680 	.word	0x42470680
 8001524:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001528:	f7ff fae0 	bl	8000aec <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	f241 3288 	movw	r2, #5000	; 0x1388
 8001536:	4293      	cmp	r3, r2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e08d      	b.n	800165a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800153e:	4b49      	ldr	r3, [pc, #292]	; (8001664 <HAL_RCC_OscConfig+0x658>)
 8001540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001542:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001546:	2b00      	cmp	r3, #0
 8001548:	d1ee      	bne.n	8001528 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800154a:	7ffb      	ldrb	r3, [r7, #31]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d105      	bne.n	800155c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001550:	4b44      	ldr	r3, [pc, #272]	; (8001664 <HAL_RCC_OscConfig+0x658>)
 8001552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001554:	4a43      	ldr	r2, [pc, #268]	; (8001664 <HAL_RCC_OscConfig+0x658>)
 8001556:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800155a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001560:	2b00      	cmp	r3, #0
 8001562:	d079      	beq.n	8001658 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	2b0c      	cmp	r3, #12
 8001568:	d056      	beq.n	8001618 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156e:	2b02      	cmp	r3, #2
 8001570:	d13b      	bne.n	80015ea <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001572:	4b3d      	ldr	r3, [pc, #244]	; (8001668 <HAL_RCC_OscConfig+0x65c>)
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001578:	f7ff fab8 	bl	8000aec <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001580:	f7ff fab4 	bl	8000aec <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e063      	b.n	800165a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001592:	4b34      	ldr	r3, [pc, #208]	; (8001664 <HAL_RCC_OscConfig+0x658>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d1f0      	bne.n	8001580 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800159e:	4b31      	ldr	r3, [pc, #196]	; (8001664 <HAL_RCC_OscConfig+0x658>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ae:	4319      	orrs	r1, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b4:	430b      	orrs	r3, r1
 80015b6:	492b      	ldr	r1, [pc, #172]	; (8001664 <HAL_RCC_OscConfig+0x658>)
 80015b8:	4313      	orrs	r3, r2
 80015ba:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015bc:	4b2a      	ldr	r3, [pc, #168]	; (8001668 <HAL_RCC_OscConfig+0x65c>)
 80015be:	2201      	movs	r2, #1
 80015c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c2:	f7ff fa93 	bl	8000aec <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ca:	f7ff fa8f 	bl	8000aec <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e03e      	b.n	800165a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80015dc:	4b21      	ldr	r3, [pc, #132]	; (8001664 <HAL_RCC_OscConfig+0x658>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d0f0      	beq.n	80015ca <HAL_RCC_OscConfig+0x5be>
 80015e8:	e036      	b.n	8001658 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ea:	4b1f      	ldr	r3, [pc, #124]	; (8001668 <HAL_RCC_OscConfig+0x65c>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f0:	f7ff fa7c 	bl	8000aec <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f8:	f7ff fa78 	bl	8000aec <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e027      	b.n	800165a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800160a:	4b16      	ldr	r3, [pc, #88]	; (8001664 <HAL_RCC_OscConfig+0x658>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1f0      	bne.n	80015f8 <HAL_RCC_OscConfig+0x5ec>
 8001616:	e01f      	b.n	8001658 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161c:	2b01      	cmp	r3, #1
 800161e:	d101      	bne.n	8001624 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e01a      	b.n	800165a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001624:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <HAL_RCC_OscConfig+0x658>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001634:	429a      	cmp	r2, r3
 8001636:	d10d      	bne.n	8001654 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001642:	429a      	cmp	r2, r3
 8001644:	d106      	bne.n	8001654 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001650:	429a      	cmp	r2, r3
 8001652:	d001      	beq.n	8001658 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e000      	b.n	800165a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3720      	adds	r7, #32
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40023800 	.word	0x40023800
 8001668:	42470060 	.word	0x42470060

0800166c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d101      	bne.n	8001680 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e11a      	b.n	80018b6 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001680:	4b8f      	ldr	r3, [pc, #572]	; (80018c0 <HAL_RCC_ClockConfig+0x254>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	683a      	ldr	r2, [r7, #0]
 800168a:	429a      	cmp	r2, r3
 800168c:	d919      	bls.n	80016c2 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d105      	bne.n	80016a0 <HAL_RCC_ClockConfig+0x34>
 8001694:	4b8a      	ldr	r3, [pc, #552]	; (80018c0 <HAL_RCC_ClockConfig+0x254>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a89      	ldr	r2, [pc, #548]	; (80018c0 <HAL_RCC_ClockConfig+0x254>)
 800169a:	f043 0304 	orr.w	r3, r3, #4
 800169e:	6013      	str	r3, [r2, #0]
 80016a0:	4b87      	ldr	r3, [pc, #540]	; (80018c0 <HAL_RCC_ClockConfig+0x254>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f023 0201 	bic.w	r2, r3, #1
 80016a8:	4985      	ldr	r1, [pc, #532]	; (80018c0 <HAL_RCC_ClockConfig+0x254>)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016b0:	4b83      	ldr	r3, [pc, #524]	; (80018c0 <HAL_RCC_ClockConfig+0x254>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0301 	and.w	r3, r3, #1
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d001      	beq.n	80016c2 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e0f9      	b.n	80018b6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d008      	beq.n	80016e0 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016ce:	4b7d      	ldr	r3, [pc, #500]	; (80018c4 <HAL_RCC_ClockConfig+0x258>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	497a      	ldr	r1, [pc, #488]	; (80018c4 <HAL_RCC_ClockConfig+0x258>)
 80016dc:	4313      	orrs	r3, r2
 80016de:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	f000 808e 	beq.w	800180a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d107      	bne.n	8001706 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016f6:	4b73      	ldr	r3, [pc, #460]	; (80018c4 <HAL_RCC_ClockConfig+0x258>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d121      	bne.n	8001746 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e0d7      	b.n	80018b6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	2b03      	cmp	r3, #3
 800170c:	d107      	bne.n	800171e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800170e:	4b6d      	ldr	r3, [pc, #436]	; (80018c4 <HAL_RCC_ClockConfig+0x258>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d115      	bne.n	8001746 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e0cb      	b.n	80018b6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d107      	bne.n	8001736 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001726:	4b67      	ldr	r3, [pc, #412]	; (80018c4 <HAL_RCC_ClockConfig+0x258>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d109      	bne.n	8001746 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e0bf      	b.n	80018b6 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001736:	4b63      	ldr	r3, [pc, #396]	; (80018c4 <HAL_RCC_ClockConfig+0x258>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800173e:	2b00      	cmp	r3, #0
 8001740:	d101      	bne.n	8001746 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e0b7      	b.n	80018b6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001746:	4b5f      	ldr	r3, [pc, #380]	; (80018c4 <HAL_RCC_ClockConfig+0x258>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f023 0203 	bic.w	r2, r3, #3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	495c      	ldr	r1, [pc, #368]	; (80018c4 <HAL_RCC_ClockConfig+0x258>)
 8001754:	4313      	orrs	r3, r2
 8001756:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001758:	f7ff f9c8 	bl	8000aec <HAL_GetTick>
 800175c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	2b02      	cmp	r3, #2
 8001764:	d112      	bne.n	800178c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001766:	e00a      	b.n	800177e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001768:	f7ff f9c0 	bl	8000aec <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	f241 3288 	movw	r2, #5000	; 0x1388
 8001776:	4293      	cmp	r3, r2
 8001778:	d901      	bls.n	800177e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e09b      	b.n	80018b6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800177e:	4b51      	ldr	r3, [pc, #324]	; (80018c4 <HAL_RCC_ClockConfig+0x258>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f003 030c 	and.w	r3, r3, #12
 8001786:	2b08      	cmp	r3, #8
 8001788:	d1ee      	bne.n	8001768 <HAL_RCC_ClockConfig+0xfc>
 800178a:	e03e      	b.n	800180a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	2b03      	cmp	r3, #3
 8001792:	d112      	bne.n	80017ba <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001794:	e00a      	b.n	80017ac <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001796:	f7ff f9a9 	bl	8000aec <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e084      	b.n	80018b6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017ac:	4b45      	ldr	r3, [pc, #276]	; (80018c4 <HAL_RCC_ClockConfig+0x258>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f003 030c 	and.w	r3, r3, #12
 80017b4:	2b0c      	cmp	r3, #12
 80017b6:	d1ee      	bne.n	8001796 <HAL_RCC_ClockConfig+0x12a>
 80017b8:	e027      	b.n	800180a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d11d      	bne.n	80017fe <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80017c2:	e00a      	b.n	80017da <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017c4:	f7ff f992 	bl	8000aec <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e06d      	b.n	80018b6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80017da:	4b3a      	ldr	r3, [pc, #232]	; (80018c4 <HAL_RCC_ClockConfig+0x258>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f003 030c 	and.w	r3, r3, #12
 80017e2:	2b04      	cmp	r3, #4
 80017e4:	d1ee      	bne.n	80017c4 <HAL_RCC_ClockConfig+0x158>
 80017e6:	e010      	b.n	800180a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017e8:	f7ff f980 	bl	8000aec <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e05b      	b.n	80018b6 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80017fe:	4b31      	ldr	r3, [pc, #196]	; (80018c4 <HAL_RCC_ClockConfig+0x258>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 030c 	and.w	r3, r3, #12
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1ee      	bne.n	80017e8 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800180a:	4b2d      	ldr	r3, [pc, #180]	; (80018c0 <HAL_RCC_ClockConfig+0x254>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	429a      	cmp	r2, r3
 8001816:	d219      	bcs.n	800184c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d105      	bne.n	800182a <HAL_RCC_ClockConfig+0x1be>
 800181e:	4b28      	ldr	r3, [pc, #160]	; (80018c0 <HAL_RCC_ClockConfig+0x254>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a27      	ldr	r2, [pc, #156]	; (80018c0 <HAL_RCC_ClockConfig+0x254>)
 8001824:	f043 0304 	orr.w	r3, r3, #4
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	4b25      	ldr	r3, [pc, #148]	; (80018c0 <HAL_RCC_ClockConfig+0x254>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f023 0201 	bic.w	r2, r3, #1
 8001832:	4923      	ldr	r1, [pc, #140]	; (80018c0 <HAL_RCC_ClockConfig+0x254>)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	4313      	orrs	r3, r2
 8001838:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800183a:	4b21      	ldr	r3, [pc, #132]	; (80018c0 <HAL_RCC_ClockConfig+0x254>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	683a      	ldr	r2, [r7, #0]
 8001844:	429a      	cmp	r2, r3
 8001846:	d001      	beq.n	800184c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e034      	b.n	80018b6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0304 	and.w	r3, r3, #4
 8001854:	2b00      	cmp	r3, #0
 8001856:	d008      	beq.n	800186a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001858:	4b1a      	ldr	r3, [pc, #104]	; (80018c4 <HAL_RCC_ClockConfig+0x258>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	4917      	ldr	r1, [pc, #92]	; (80018c4 <HAL_RCC_ClockConfig+0x258>)
 8001866:	4313      	orrs	r3, r2
 8001868:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0308 	and.w	r3, r3, #8
 8001872:	2b00      	cmp	r3, #0
 8001874:	d009      	beq.n	800188a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001876:	4b13      	ldr	r3, [pc, #76]	; (80018c4 <HAL_RCC_ClockConfig+0x258>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	490f      	ldr	r1, [pc, #60]	; (80018c4 <HAL_RCC_ClockConfig+0x258>)
 8001886:	4313      	orrs	r3, r2
 8001888:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800188a:	f000 f823 	bl	80018d4 <HAL_RCC_GetSysClockFreq>
 800188e:	4601      	mov	r1, r0
 8001890:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <HAL_RCC_ClockConfig+0x258>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	091b      	lsrs	r3, r3, #4
 8001896:	f003 030f 	and.w	r3, r3, #15
 800189a:	4a0b      	ldr	r2, [pc, #44]	; (80018c8 <HAL_RCC_ClockConfig+0x25c>)
 800189c:	5cd3      	ldrb	r3, [r2, r3]
 800189e:	fa21 f303 	lsr.w	r3, r1, r3
 80018a2:	4a0a      	ldr	r2, [pc, #40]	; (80018cc <HAL_RCC_ClockConfig+0x260>)
 80018a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80018a6:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <HAL_RCC_ClockConfig+0x264>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff f84c 	bl	8000948 <HAL_InitTick>
 80018b0:	4603      	mov	r3, r0
 80018b2:	72fb      	strb	r3, [r7, #11]

  return status;
 80018b4:	7afb      	ldrb	r3, [r7, #11]
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40023c00 	.word	0x40023c00
 80018c4:	40023800 	.word	0x40023800
 80018c8:	08006e84 	.word	0x08006e84
 80018cc:	20000000 	.word	0x20000000
 80018d0:	20000004 	.word	0x20000004

080018d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018d6:	b087      	sub	sp, #28
 80018d8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80018da:	4b4b      	ldr	r3, [pc, #300]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x134>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f003 030c 	and.w	r3, r3, #12
 80018e6:	2b08      	cmp	r3, #8
 80018e8:	d006      	beq.n	80018f8 <HAL_RCC_GetSysClockFreq+0x24>
 80018ea:	2b0c      	cmp	r3, #12
 80018ec:	d007      	beq.n	80018fe <HAL_RCC_GetSysClockFreq+0x2a>
 80018ee:	2b04      	cmp	r3, #4
 80018f0:	d176      	bne.n	80019e0 <HAL_RCC_GetSysClockFreq+0x10c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018f2:	4b46      	ldr	r3, [pc, #280]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x138>)
 80018f4:	613b      	str	r3, [r7, #16]
      break;
 80018f6:	e081      	b.n	80019fc <HAL_RCC_GetSysClockFreq+0x128>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018f8:	4b45      	ldr	r3, [pc, #276]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x13c>)
 80018fa:	613b      	str	r3, [r7, #16]
      break;
 80018fc:	e07e      	b.n	80019fc <HAL_RCC_GetSysClockFreq+0x128>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	0c9b      	lsrs	r3, r3, #18
 8001902:	f003 030f 	and.w	r3, r3, #15
 8001906:	4a43      	ldr	r2, [pc, #268]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x140>)
 8001908:	5cd3      	ldrb	r3, [r2, r3]
 800190a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	0d9b      	lsrs	r3, r3, #22
 8001910:	f003 0303 	and.w	r3, r3, #3
 8001914:	3301      	adds	r3, #1
 8001916:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001918:	4b3b      	ldr	r3, [pc, #236]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x134>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d019      	beq.n	8001958 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	f04f 0400 	mov.w	r4, #0
 800192a:	4a39      	ldr	r2, [pc, #228]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x13c>)
 800192c:	fb02 f104 	mul.w	r1, r2, r4
 8001930:	2200      	movs	r2, #0
 8001932:	fb02 f203 	mul.w	r2, r2, r3
 8001936:	440a      	add	r2, r1
 8001938:	4935      	ldr	r1, [pc, #212]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x13c>)
 800193a:	fba3 0101 	umull	r0, r1, r3, r1
 800193e:	1853      	adds	r3, r2, r1
 8001940:	4619      	mov	r1, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f04f 0400 	mov.w	r4, #0
 8001948:	461a      	mov	r2, r3
 800194a:	4623      	mov	r3, r4
 800194c:	f7fe fc5e 	bl	800020c <__aeabi_uldivmod>
 8001950:	4603      	mov	r3, r0
 8001952:	460c      	mov	r4, r1
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	e040      	b.n	80019da <HAL_RCC_GetSysClockFreq+0x106>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	461d      	mov	r5, r3
 800195c:	f04f 0600 	mov.w	r6, #0
 8001960:	4629      	mov	r1, r5
 8001962:	4632      	mov	r2, r6
 8001964:	f04f 0300 	mov.w	r3, #0
 8001968:	f04f 0400 	mov.w	r4, #0
 800196c:	0154      	lsls	r4, r2, #5
 800196e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001972:	014b      	lsls	r3, r1, #5
 8001974:	4619      	mov	r1, r3
 8001976:	4622      	mov	r2, r4
 8001978:	1b49      	subs	r1, r1, r5
 800197a:	eb62 0206 	sbc.w	r2, r2, r6
 800197e:	f04f 0300 	mov.w	r3, #0
 8001982:	f04f 0400 	mov.w	r4, #0
 8001986:	0194      	lsls	r4, r2, #6
 8001988:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800198c:	018b      	lsls	r3, r1, #6
 800198e:	1a5b      	subs	r3, r3, r1
 8001990:	eb64 0402 	sbc.w	r4, r4, r2
 8001994:	f04f 0100 	mov.w	r1, #0
 8001998:	f04f 0200 	mov.w	r2, #0
 800199c:	00e2      	lsls	r2, r4, #3
 800199e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80019a2:	00d9      	lsls	r1, r3, #3
 80019a4:	460b      	mov	r3, r1
 80019a6:	4614      	mov	r4, r2
 80019a8:	195b      	adds	r3, r3, r5
 80019aa:	eb44 0406 	adc.w	r4, r4, r6
 80019ae:	f04f 0100 	mov.w	r1, #0
 80019b2:	f04f 0200 	mov.w	r2, #0
 80019b6:	02a2      	lsls	r2, r4, #10
 80019b8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80019bc:	0299      	lsls	r1, r3, #10
 80019be:	460b      	mov	r3, r1
 80019c0:	4614      	mov	r4, r2
 80019c2:	4618      	mov	r0, r3
 80019c4:	4621      	mov	r1, r4
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f04f 0400 	mov.w	r4, #0
 80019cc:	461a      	mov	r2, r3
 80019ce:	4623      	mov	r3, r4
 80019d0:	f7fe fc1c 	bl	800020c <__aeabi_uldivmod>
 80019d4:	4603      	mov	r3, r0
 80019d6:	460c      	mov	r4, r1
 80019d8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	613b      	str	r3, [r7, #16]
      break;
 80019de:	e00d      	b.n	80019fc <HAL_RCC_GetSysClockFreq+0x128>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80019e0:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x134>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	0b5b      	lsrs	r3, r3, #13
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	3301      	adds	r3, #1
 80019f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	613b      	str	r3, [r7, #16]
      break;
 80019fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019fc:	693b      	ldr	r3, [r7, #16]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	371c      	adds	r7, #28
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	00f42400 	.word	0x00f42400
 8001a10:	016e3600 	.word	0x016e3600
 8001a14:	08006e78 	.word	0x08006e78

08001a18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a1c:	4b02      	ldr	r3, [pc, #8]	; (8001a28 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr
 8001a28:	20000000 	.word	0x20000000

08001a2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a30:	f7ff fff2 	bl	8001a18 <HAL_RCC_GetHCLKFreq>
 8001a34:	4601      	mov	r1, r0
 8001a36:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	0a1b      	lsrs	r3, r3, #8
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	4a03      	ldr	r2, [pc, #12]	; (8001a50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a42:	5cd3      	ldrb	r3, [r2, r3]
 8001a44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	08006e94 	.word	0x08006e94

08001a54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a58:	f7ff ffde 	bl	8001a18 <HAL_RCC_GetHCLKFreq>
 8001a5c:	4601      	mov	r1, r0
 8001a5e:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	0adb      	lsrs	r3, r3, #11
 8001a64:	f003 0307 	and.w	r3, r3, #7
 8001a68:	4a03      	ldr	r2, [pc, #12]	; (8001a78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a6a:	5cd3      	ldrb	r3, [r2, r3]
 8001a6c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40023800 	.word	0x40023800
 8001a78:	08006e94 	.word	0x08006e94

08001a7c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	220f      	movs	r2, #15
 8001a8a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a8c:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <HAL_RCC_GetClockConfig+0x58>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 0203 	and.w	r2, r3, #3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a98:	4b0e      	ldr	r3, [pc, #56]	; (8001ad4 <HAL_RCC_GetClockConfig+0x58>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <HAL_RCC_GetClockConfig+0x58>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ab0:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <HAL_RCC_GetClockConfig+0x58>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	08db      	lsrs	r3, r3, #3
 8001ab6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001abe:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <HAL_RCC_GetClockConfig+0x5c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0201 	and.w	r2, r3, #1
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	601a      	str	r2, [r3, #0]
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40023c00 	.word	0x40023c00

08001adc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b087      	sub	sp, #28
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001ae8:	4b29      	ldr	r3, [pc, #164]	; (8001b90 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d12c      	bne.n	8001b4e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001af4:	4b26      	ldr	r3, [pc, #152]	; (8001b90 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d005      	beq.n	8001b0c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001b00:	4b24      	ldr	r3, [pc, #144]	; (8001b94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001b08:	617b      	str	r3, [r7, #20]
 8001b0a:	e016      	b.n	8001b3a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b0c:	4b20      	ldr	r3, [pc, #128]	; (8001b90 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b10:	4a1f      	ldr	r2, [pc, #124]	; (8001b90 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b16:	6253      	str	r3, [r2, #36]	; 0x24
 8001b18:	4b1d      	ldr	r3, [pc, #116]	; (8001b90 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001b24:	4b1b      	ldr	r3, [pc, #108]	; (8001b94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001b2c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b2e:	4b18      	ldr	r3, [pc, #96]	; (8001b90 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b32:	4a17      	ldr	r2, [pc, #92]	; (8001b90 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b38:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001b40:	d105      	bne.n	8001b4e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001b48:	d101      	bne.n	8001b4e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d105      	bne.n	8001b60 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001b54:	4b10      	ldr	r3, [pc, #64]	; (8001b98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a0f      	ldr	r2, [pc, #60]	; (8001b98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b5a:	f043 0304 	orr.w	r3, r3, #4
 8001b5e:	6013      	str	r3, [r2, #0]
 8001b60:	4b0d      	ldr	r3, [pc, #52]	; (8001b98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f023 0201 	bic.w	r2, r3, #1
 8001b68:	490b      	ldr	r1, [pc, #44]	; (8001b98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001b70:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d001      	beq.n	8001b82 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e000      	b.n	8001b84 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	371c      	adds	r7, #28
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bc80      	pop	{r7}
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40007000 	.word	0x40007000
 8001b98:	40023c00 	.word	0x40023c00

08001b9c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d106      	bne.n	8001bbe <HAL_RCCEx_PeriphCLKConfig+0x22>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f000 80c6 	beq.w	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bc2:	4b64      	ldr	r3, [pc, #400]	; (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d10d      	bne.n	8001bea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bce:	4b61      	ldr	r3, [pc, #388]	; (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd2:	4a60      	ldr	r2, [pc, #384]	; (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd8:	6253      	str	r3, [r2, #36]	; 0x24
 8001bda:	4b5e      	ldr	r3, [pc, #376]	; (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be2:	60bb      	str	r3, [r7, #8]
 8001be4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001be6:	2301      	movs	r3, #1
 8001be8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bea:	4b5b      	ldr	r3, [pc, #364]	; (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d118      	bne.n	8001c28 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bf6:	4b58      	ldr	r3, [pc, #352]	; (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a57      	ldr	r2, [pc, #348]	; (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001bfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c02:	f7fe ff73 	bl	8000aec <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c08:	e008      	b.n	8001c1c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c0a:	f7fe ff6f 	bl	8000aec <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b64      	cmp	r3, #100	; 0x64
 8001c16:	d901      	bls.n	8001c1c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e097      	b.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c1c:	4b4e      	ldr	r3, [pc, #312]	; (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d0f0      	beq.n	8001c0a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001c28:	4b4a      	ldr	r3, [pc, #296]	; (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8001c30:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d106      	bne.n	8001c4e <HAL_RCCEx_PeriphCLKConfig+0xb2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d00f      	beq.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c56:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001c5a:	d108      	bne.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001c5c:	4b3d      	ldr	r3, [pc, #244]	; (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c68:	d101      	bne.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e06e      	b.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001c6e:	4b39      	ldr	r3, [pc, #228]	; (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c76:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d041      	beq.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d005      	beq.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d10c      	bne.n	8001cb2 <HAL_RCCEx_PeriphCLKConfig+0x116>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d02d      	beq.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x166>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d027      	beq.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x166>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001cb2:	4b28      	ldr	r3, [pc, #160]	; (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cb6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001cba:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001cbc:	4b27      	ldr	r3, [pc, #156]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001cc2:	4b26      	ldr	r3, [pc, #152]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001cc8:	4a22      	ldr	r2, [pc, #136]	; (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6353      	str	r3, [r2, #52]	; 0x34

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d014      	beq.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd8:	f7fe ff08 	bl	8000aec <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001cde:	e00a      	b.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ce0:	f7fe ff04 	bl	8000aec <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e02a      	b.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001cf6:	4b17      	ldr	r3, [pc, #92]	; (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0ee      	beq.n	8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d0a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001d0e:	d10a      	bne.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8001d10:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8001d20:	490c      	ldr	r1, [pc, #48]	; (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	600b      	str	r3, [r1, #0]
 8001d26:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001d28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d32:	4908      	ldr	r1, [pc, #32]	; (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	634b      	str	r3, [r1, #52]	; 0x34

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d38:	7dfb      	ldrb	r3, [r7, #23]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d105      	bne.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d3e:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d42:	4a04      	ldr	r2, [pc, #16]	; (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001d44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d48:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3718      	adds	r7, #24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40023800 	.word	0x40023800
 8001d58:	40007000 	.word	0x40007000
 8001d5c:	424706dc 	.word	0x424706dc

08001d60 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e06d      	b.n	8001e4e <HAL_RTC_Init+0xee>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	7f5b      	ldrb	r3, [r3, #29]
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d105      	bne.n	8001d88 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7fe fd86 	bl	8000894 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	22ca      	movs	r2, #202	; 0xca
 8001d94:	625a      	str	r2, [r3, #36]	; 0x24
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2253      	movs	r2, #83	; 0x53
 8001d9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 f859 	bl	8001e56 <RTC_EnterInitMode>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d008      	beq.n	8001dbc <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	22ff      	movs	r2, #255	; 0xff
 8001db0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2204      	movs	r2, #4
 8001db6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e048      	b.n	8001e4e <HAL_RTC_Init+0xee>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	6812      	ldr	r2, [r2, #0]
 8001dc6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8001dca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001dce:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6899      	ldr	r1, [r3, #8]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685a      	ldr	r2, [r3, #4]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	431a      	orrs	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	695b      	ldr	r3, [r3, #20]
 8001de4:	431a      	orrs	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	430a      	orrs	r2, r1
 8001dec:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	68d2      	ldr	r2, [r2, #12]
 8001df6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6919      	ldr	r1, [r3, #16]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	041a      	lsls	r2, r3, #16
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68da      	ldr	r2, [r3, #12]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e1a:	60da      	str	r2, [r3, #12]

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e2a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	699a      	ldr	r2, [r3, #24]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	22ff      	movs	r2, #255	; 0xff
 8001e44:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
  }
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b084      	sub	sp, #16
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d119      	bne.n	8001ea0 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f04f 32ff 	mov.w	r2, #4294967295
 8001e74:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8001e76:	f7fe fe39 	bl	8000aec <HAL_GetTick>
 8001e7a:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8001e7c:	e009      	b.n	8001e92 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001e7e:	f7fe fe35 	bl	8000aec <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e8c:	d901      	bls.n	8001e92 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e007      	b.n	8001ea2 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d0ee      	beq.n	8001e7e <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b082      	sub	sp, #8
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e031      	b.n	8001f20 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d106      	bne.n	8001ed6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f000 f829 	bl	8001f28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2202      	movs	r2, #2
 8001eda:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3304      	adds	r3, #4
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4610      	mov	r0, r2
 8001eea:	f000 f979 	bl	80021e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3708      	adds	r7, #8
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr
	...

08001f3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d001      	beq.n	8001f54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e03a      	b.n	8001fca <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2202      	movs	r2, #2
 8001f58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68da      	ldr	r2, [r3, #12]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f042 0201 	orr.w	r2, r2, #1
 8001f6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f74:	d00e      	beq.n	8001f94 <HAL_TIM_Base_Start_IT+0x58>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a16      	ldr	r2, [pc, #88]	; (8001fd4 <HAL_TIM_Base_Start_IT+0x98>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d009      	beq.n	8001f94 <HAL_TIM_Base_Start_IT+0x58>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a14      	ldr	r2, [pc, #80]	; (8001fd8 <HAL_TIM_Base_Start_IT+0x9c>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d004      	beq.n	8001f94 <HAL_TIM_Base_Start_IT+0x58>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a13      	ldr	r2, [pc, #76]	; (8001fdc <HAL_TIM_Base_Start_IT+0xa0>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d111      	bne.n	8001fb8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2b06      	cmp	r3, #6
 8001fa4:	d010      	beq.n	8001fc8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f042 0201 	orr.w	r2, r2, #1
 8001fb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fb6:	e007      	b.n	8001fc8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f042 0201 	orr.w	r2, r2, #1
 8001fc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3714      	adds	r7, #20
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bc80      	pop	{r7}
 8001fd2:	4770      	bx	lr
 8001fd4:	40000400 	.word	0x40000400
 8001fd8:	40000800 	.word	0x40000800
 8001fdc:	40010800 	.word	0x40010800

08001fe0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d122      	bne.n	800203c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b02      	cmp	r3, #2
 8002002:	d11b      	bne.n	800203c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f06f 0202 	mvn.w	r2, #2
 800200c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	f003 0303 	and.w	r3, r3, #3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f8c1 	bl	80021aa <HAL_TIM_IC_CaptureCallback>
 8002028:	e005      	b.n	8002036 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 f8b4 	bl	8002198 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 f8c3 	bl	80021bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	f003 0304 	and.w	r3, r3, #4
 8002046:	2b04      	cmp	r3, #4
 8002048:	d122      	bne.n	8002090 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	f003 0304 	and.w	r3, r3, #4
 8002054:	2b04      	cmp	r3, #4
 8002056:	d11b      	bne.n	8002090 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f06f 0204 	mvn.w	r2, #4
 8002060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2202      	movs	r2, #2
 8002066:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f897 	bl	80021aa <HAL_TIM_IC_CaptureCallback>
 800207c:	e005      	b.n	800208a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f88a 	bl	8002198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 f899 	bl	80021bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	f003 0308 	and.w	r3, r3, #8
 800209a:	2b08      	cmp	r3, #8
 800209c:	d122      	bne.n	80020e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	f003 0308 	and.w	r3, r3, #8
 80020a8:	2b08      	cmp	r3, #8
 80020aa:	d11b      	bne.n	80020e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f06f 0208 	mvn.w	r2, #8
 80020b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2204      	movs	r2, #4
 80020ba:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	f003 0303 	and.w	r3, r3, #3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f86d 	bl	80021aa <HAL_TIM_IC_CaptureCallback>
 80020d0:	e005      	b.n	80020de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f860 	bl	8002198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 f86f 	bl	80021bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	f003 0310 	and.w	r3, r3, #16
 80020ee:	2b10      	cmp	r3, #16
 80020f0:	d122      	bne.n	8002138 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	f003 0310 	and.w	r3, r3, #16
 80020fc:	2b10      	cmp	r3, #16
 80020fe:	d11b      	bne.n	8002138 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f06f 0210 	mvn.w	r2, #16
 8002108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2208      	movs	r2, #8
 800210e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 f843 	bl	80021aa <HAL_TIM_IC_CaptureCallback>
 8002124:	e005      	b.n	8002132 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 f836 	bl	8002198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f000 f845 	bl	80021bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b01      	cmp	r3, #1
 8002144:	d10e      	bne.n	8002164 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	2b01      	cmp	r3, #1
 8002152:	d107      	bne.n	8002164 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f06f 0201 	mvn.w	r2, #1
 800215c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f7fe fb4e 	bl	8000800 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800216e:	2b40      	cmp	r3, #64	; 0x40
 8002170:	d10e      	bne.n	8002190 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800217c:	2b40      	cmp	r3, #64	; 0x40
 800217e:	d107      	bne.n	8002190 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 f81f 	bl	80021ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002190:	bf00      	nop
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bc80      	pop	{r7}
 80021a8:	4770      	bx	lr

080021aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021aa:	b480      	push	{r7}
 80021ac:	b083      	sub	sp, #12
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr

080021bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bc80      	pop	{r7}
 80021cc:	4770      	bx	lr

080021ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr

080021e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021f6:	d00f      	beq.n	8002218 <TIM_Base_SetConfig+0x38>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a2b      	ldr	r2, [pc, #172]	; (80022a8 <TIM_Base_SetConfig+0xc8>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d00b      	beq.n	8002218 <TIM_Base_SetConfig+0x38>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a2a      	ldr	r2, [pc, #168]	; (80022ac <TIM_Base_SetConfig+0xcc>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d007      	beq.n	8002218 <TIM_Base_SetConfig+0x38>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a29      	ldr	r2, [pc, #164]	; (80022b0 <TIM_Base_SetConfig+0xd0>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d003      	beq.n	8002218 <TIM_Base_SetConfig+0x38>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a28      	ldr	r2, [pc, #160]	; (80022b4 <TIM_Base_SetConfig+0xd4>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d108      	bne.n	800222a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800221e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	4313      	orrs	r3, r2
 8002228:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002230:	d017      	beq.n	8002262 <TIM_Base_SetConfig+0x82>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a1c      	ldr	r2, [pc, #112]	; (80022a8 <TIM_Base_SetConfig+0xc8>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d013      	beq.n	8002262 <TIM_Base_SetConfig+0x82>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a1b      	ldr	r2, [pc, #108]	; (80022ac <TIM_Base_SetConfig+0xcc>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d00f      	beq.n	8002262 <TIM_Base_SetConfig+0x82>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a1a      	ldr	r2, [pc, #104]	; (80022b0 <TIM_Base_SetConfig+0xd0>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d00b      	beq.n	8002262 <TIM_Base_SetConfig+0x82>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a19      	ldr	r2, [pc, #100]	; (80022b4 <TIM_Base_SetConfig+0xd4>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d007      	beq.n	8002262 <TIM_Base_SetConfig+0x82>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a18      	ldr	r2, [pc, #96]	; (80022b8 <TIM_Base_SetConfig+0xd8>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d003      	beq.n	8002262 <TIM_Base_SetConfig+0x82>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a17      	ldr	r2, [pc, #92]	; (80022bc <TIM_Base_SetConfig+0xdc>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d108      	bne.n	8002274 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002268:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	4313      	orrs	r3, r2
 8002272:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	4313      	orrs	r3, r2
 8002280:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	68fa      	ldr	r2, [r7, #12]
 8002286:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	615a      	str	r2, [r3, #20]
}
 800229e:	bf00      	nop
 80022a0:	3714      	adds	r7, #20
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr
 80022a8:	40000400 	.word	0x40000400
 80022ac:	40000800 	.word	0x40000800
 80022b0:	40000c00 	.word	0x40000c00
 80022b4:	40010800 	.word	0x40010800
 80022b8:	40010c00 	.word	0x40010c00
 80022bc:	40011000 	.word	0x40011000

080022c0 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e033      	b.n	800233a <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d106      	bne.n	80022ec <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7fe faea 	bl	80008c0 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2202      	movs	r2, #2
 80022f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f000 f825 	bl	8002344 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	691a      	ldr	r2, [r3, #16]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002308:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	695a      	ldr	r2, [r3, #20]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002318:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68da      	ldr	r2, [r3, #12]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002328:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
	...

08002344 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800234c:	2300      	movs	r3, #0
 800234e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68da      	ldr	r2, [r3, #12]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 020c 	bic.w	r2, r2, #12
 800235e:	60da      	str	r2, [r3, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800236e:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8002378:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	431a      	orrs	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8002384:	431a      	orrs	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	4313      	orrs	r3, r2
 800238a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800238e:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80023a6:	f023 030c 	bic.w	r3, r3, #12
 80023aa:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	431a      	orrs	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	431a      	orrs	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	4313      	orrs	r3, r2
 80023c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023c4:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	60da      	str	r2, [r3, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	695a      	ldr	r2, [r3, #20]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80023dc:	615a      	str	r2, [r3, #20]

  /*-------------------------- USART BRR Configuration -----------------------*/
  if (husart->Instance == USART1)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a53      	ldr	r2, [pc, #332]	; (8002530 <USART_SetConfig+0x1ec>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d14f      	bne.n	8002488 <USART_SetConfig+0x144>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80023e8:	f7ff fb34 	bl	8001a54 <HAL_RCC_GetPCLK2Freq>
 80023ec:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 80023ee:	68ba      	ldr	r2, [r7, #8]
 80023f0:	4613      	mov	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4413      	add	r3, r2
 80023f6:	009a      	lsls	r2, r3, #2
 80023f8:	441a      	add	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	fbb2 f3f3 	udiv	r3, r2, r3
 8002404:	4a4b      	ldr	r2, [pc, #300]	; (8002534 <USART_SetConfig+0x1f0>)
 8002406:	fba2 2303 	umull	r2, r3, r2, r3
 800240a:	095b      	lsrs	r3, r3, #5
 800240c:	0119      	lsls	r1, r3, #4
 800240e:	68ba      	ldr	r2, [r7, #8]
 8002410:	4613      	mov	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	009a      	lsls	r2, r3, #2
 8002418:	441a      	add	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	fbb2 f2f3 	udiv	r2, r2, r3
 8002424:	4b43      	ldr	r3, [pc, #268]	; (8002534 <USART_SetConfig+0x1f0>)
 8002426:	fba3 0302 	umull	r0, r3, r3, r2
 800242a:	095b      	lsrs	r3, r3, #5
 800242c:	2064      	movs	r0, #100	; 0x64
 800242e:	fb00 f303 	mul.w	r3, r0, r3
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	3332      	adds	r3, #50	; 0x32
 8002438:	4a3e      	ldr	r2, [pc, #248]	; (8002534 <USART_SetConfig+0x1f0>)
 800243a:	fba2 2303 	umull	r2, r3, r2, r3
 800243e:	095b      	lsrs	r3, r3, #5
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002446:	4419      	add	r1, r3
 8002448:	68ba      	ldr	r2, [r7, #8]
 800244a:	4613      	mov	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4413      	add	r3, r2
 8002450:	009a      	lsls	r2, r3, #2
 8002452:	441a      	add	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	fbb2 f2f3 	udiv	r2, r2, r3
 800245e:	4b35      	ldr	r3, [pc, #212]	; (8002534 <USART_SetConfig+0x1f0>)
 8002460:	fba3 0302 	umull	r0, r3, r3, r2
 8002464:	095b      	lsrs	r3, r3, #5
 8002466:	2064      	movs	r0, #100	; 0x64
 8002468:	fb00 f303 	mul.w	r3, r0, r3
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	3332      	adds	r3, #50	; 0x32
 8002472:	4a30      	ldr	r2, [pc, #192]	; (8002534 <USART_SetConfig+0x1f0>)
 8002474:	fba2 2303 	umull	r2, r3, r2, r3
 8002478:	095b      	lsrs	r3, r3, #5
 800247a:	f003 0207 	and.w	r2, r3, #7
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	440a      	add	r2, r1
 8002484:	609a      	str	r2, [r3, #8]
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
}
 8002486:	e04e      	b.n	8002526 <USART_SetConfig+0x1e2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002488:	f7ff fad0 	bl	8001a2c <HAL_RCC_GetPCLK1Freq>
 800248c:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	4613      	mov	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4413      	add	r3, r2
 8002496:	009a      	lsls	r2, r3, #2
 8002498:	441a      	add	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a4:	4a23      	ldr	r2, [pc, #140]	; (8002534 <USART_SetConfig+0x1f0>)
 80024a6:	fba2 2303 	umull	r2, r3, r2, r3
 80024aa:	095b      	lsrs	r3, r3, #5
 80024ac:	0119      	lsls	r1, r3, #4
 80024ae:	68ba      	ldr	r2, [r7, #8]
 80024b0:	4613      	mov	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4413      	add	r3, r2
 80024b6:	009a      	lsls	r2, r3, #2
 80024b8:	441a      	add	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80024c4:	4b1b      	ldr	r3, [pc, #108]	; (8002534 <USART_SetConfig+0x1f0>)
 80024c6:	fba3 0302 	umull	r0, r3, r3, r2
 80024ca:	095b      	lsrs	r3, r3, #5
 80024cc:	2064      	movs	r0, #100	; 0x64
 80024ce:	fb00 f303 	mul.w	r3, r0, r3
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	3332      	adds	r3, #50	; 0x32
 80024d8:	4a16      	ldr	r2, [pc, #88]	; (8002534 <USART_SetConfig+0x1f0>)
 80024da:	fba2 2303 	umull	r2, r3, r2, r3
 80024de:	095b      	lsrs	r3, r3, #5
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80024e6:	4419      	add	r1, r3
 80024e8:	68ba      	ldr	r2, [r7, #8]
 80024ea:	4613      	mov	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	009a      	lsls	r2, r3, #2
 80024f2:	441a      	add	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80024fe:	4b0d      	ldr	r3, [pc, #52]	; (8002534 <USART_SetConfig+0x1f0>)
 8002500:	fba3 0302 	umull	r0, r3, r3, r2
 8002504:	095b      	lsrs	r3, r3, #5
 8002506:	2064      	movs	r0, #100	; 0x64
 8002508:	fb00 f303 	mul.w	r3, r0, r3
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	3332      	adds	r3, #50	; 0x32
 8002512:	4a08      	ldr	r2, [pc, #32]	; (8002534 <USART_SetConfig+0x1f0>)
 8002514:	fba2 2303 	umull	r2, r3, r2, r3
 8002518:	095b      	lsrs	r3, r3, #5
 800251a:	f003 0207 	and.w	r2, r3, #7
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	440a      	add	r2, r1
 8002524:	609a      	str	r2, [r3, #8]
}
 8002526:	bf00      	nop
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40013800 	.word	0x40013800
 8002534:	51eb851f 	.word	0x51eb851f

08002538 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800253e:	f3ef 8305 	mrs	r3, IPSR
 8002542:	60bb      	str	r3, [r7, #8]
  return(result);
 8002544:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10f      	bne.n	800256a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800254a:	f3ef 8310 	mrs	r3, PRIMASK
 800254e:	607b      	str	r3, [r7, #4]
  return(result);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d109      	bne.n	800256a <osKernelInitialize+0x32>
 8002556:	4b10      	ldr	r3, [pc, #64]	; (8002598 <osKernelInitialize+0x60>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2b02      	cmp	r3, #2
 800255c:	d109      	bne.n	8002572 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800255e:	f3ef 8311 	mrs	r3, BASEPRI
 8002562:	603b      	str	r3, [r7, #0]
  return(result);
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800256a:	f06f 0305 	mvn.w	r3, #5
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	e00c      	b.n	800258c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002572:	4b09      	ldr	r3, [pc, #36]	; (8002598 <osKernelInitialize+0x60>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d105      	bne.n	8002586 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800257a:	4b07      	ldr	r3, [pc, #28]	; (8002598 <osKernelInitialize+0x60>)
 800257c:	2201      	movs	r2, #1
 800257e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002580:	2300      	movs	r3, #0
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	e002      	b.n	800258c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002586:	f04f 33ff 	mov.w	r3, #4294967295
 800258a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800258c:	68fb      	ldr	r3, [r7, #12]
}
 800258e:	4618      	mov	r0, r3
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr
 8002598:	2000002c 	.word	0x2000002c

0800259c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025a2:	f3ef 8305 	mrs	r3, IPSR
 80025a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80025a8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d10f      	bne.n	80025ce <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025ae:	f3ef 8310 	mrs	r3, PRIMASK
 80025b2:	607b      	str	r3, [r7, #4]
  return(result);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d109      	bne.n	80025ce <osKernelStart+0x32>
 80025ba:	4b11      	ldr	r3, [pc, #68]	; (8002600 <osKernelStart+0x64>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d109      	bne.n	80025d6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80025c2:	f3ef 8311 	mrs	r3, BASEPRI
 80025c6:	603b      	str	r3, [r7, #0]
  return(result);
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80025ce:	f06f 0305 	mvn.w	r3, #5
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	e00e      	b.n	80025f4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80025d6:	4b0a      	ldr	r3, [pc, #40]	; (8002600 <osKernelStart+0x64>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d107      	bne.n	80025ee <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80025de:	4b08      	ldr	r3, [pc, #32]	; (8002600 <osKernelStart+0x64>)
 80025e0:	2202      	movs	r2, #2
 80025e2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80025e4:	f001 fae0 	bl	8003ba8 <vTaskStartScheduler>
      stat = osOK;
 80025e8:	2300      	movs	r3, #0
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	e002      	b.n	80025f4 <osKernelStart+0x58>
    } else {
      stat = osError;
 80025ee:	f04f 33ff 	mov.w	r3, #4294967295
 80025f2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80025f4:	68fb      	ldr	r3, [r7, #12]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	2000002c 	.word	0x2000002c

08002604 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002604:	b580      	push	{r7, lr}
 8002606:	b092      	sub	sp, #72	; 0x48
 8002608:	af04      	add	r7, sp, #16
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002614:	f3ef 8305 	mrs	r3, IPSR
 8002618:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800261c:	2b00      	cmp	r3, #0
 800261e:	f040 8094 	bne.w	800274a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002622:	f3ef 8310 	mrs	r3, PRIMASK
 8002626:	623b      	str	r3, [r7, #32]
  return(result);
 8002628:	6a3b      	ldr	r3, [r7, #32]
 800262a:	2b00      	cmp	r3, #0
 800262c:	f040 808d 	bne.w	800274a <osThreadNew+0x146>
 8002630:	4b48      	ldr	r3, [pc, #288]	; (8002754 <osThreadNew+0x150>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2b02      	cmp	r3, #2
 8002636:	d106      	bne.n	8002646 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002638:	f3ef 8311 	mrs	r3, BASEPRI
 800263c:	61fb      	str	r3, [r7, #28]
  return(result);
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	2b00      	cmp	r3, #0
 8002642:	f040 8082 	bne.w	800274a <osThreadNew+0x146>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d07e      	beq.n	800274a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800264c:	2380      	movs	r3, #128	; 0x80
 800264e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002650:	2318      	movs	r3, #24
 8002652:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002654:	2300      	movs	r3, #0
 8002656:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002658:	f107 031b 	add.w	r3, r7, #27
 800265c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800265e:	f04f 33ff 	mov.w	r3, #4294967295
 8002662:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d045      	beq.n	80026f6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d002      	beq.n	8002678 <osThreadNew+0x74>
        name = attr->name;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d002      	beq.n	8002686 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002688:	2b00      	cmp	r3, #0
 800268a:	d008      	beq.n	800269e <osThreadNew+0x9a>
 800268c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800268e:	2b38      	cmp	r3, #56	; 0x38
 8002690:	d805      	bhi.n	800269e <osThreadNew+0x9a>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <osThreadNew+0x9e>
        return (NULL);
 800269e:	2300      	movs	r3, #0
 80026a0:	e054      	b.n	800274c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	089b      	lsrs	r3, r3, #2
 80026b0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00e      	beq.n	80026d8 <osThreadNew+0xd4>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	2b5b      	cmp	r3, #91	; 0x5b
 80026c0:	d90a      	bls.n	80026d8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d006      	beq.n	80026d8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d002      	beq.n	80026d8 <osThreadNew+0xd4>
        mem = 1;
 80026d2:	2301      	movs	r3, #1
 80026d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80026d6:	e010      	b.n	80026fa <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10c      	bne.n	80026fa <osThreadNew+0xf6>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d108      	bne.n	80026fa <osThreadNew+0xf6>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d104      	bne.n	80026fa <osThreadNew+0xf6>
          mem = 0;
 80026f0:	2300      	movs	r3, #0
 80026f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80026f4:	e001      	b.n	80026fa <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80026f6:	2300      	movs	r3, #0
 80026f8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80026fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d110      	bne.n	8002722 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002708:	9202      	str	r2, [sp, #8]
 800270a:	9301      	str	r3, [sp, #4]
 800270c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002714:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f001 f86c 	bl	80037f4 <xTaskCreateStatic>
 800271c:	4603      	mov	r3, r0
 800271e:	617b      	str	r3, [r7, #20]
 8002720:	e013      	b.n	800274a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002724:	2b00      	cmp	r3, #0
 8002726:	d110      	bne.n	800274a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800272a:	b29a      	uxth	r2, r3
 800272c:	f107 0314 	add.w	r3, r7, #20
 8002730:	9301      	str	r3, [sp, #4]
 8002732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002734:	9300      	str	r3, [sp, #0]
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f001 f8b3 	bl	80038a6 <xTaskCreate>
 8002740:	4603      	mov	r3, r0
 8002742:	2b01      	cmp	r3, #1
 8002744:	d001      	beq.n	800274a <osThreadNew+0x146>
          hTask = NULL;
 8002746:	2300      	movs	r3, #0
 8002748:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800274a:	697b      	ldr	r3, [r7, #20]
}
 800274c:	4618      	mov	r0, r3
 800274e:	3738      	adds	r7, #56	; 0x38
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	2000002c 	.word	0x2000002c

08002758 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002760:	f3ef 8305 	mrs	r3, IPSR
 8002764:	613b      	str	r3, [r7, #16]
  return(result);
 8002766:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002768:	2b00      	cmp	r3, #0
 800276a:	d10f      	bne.n	800278c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800276c:	f3ef 8310 	mrs	r3, PRIMASK
 8002770:	60fb      	str	r3, [r7, #12]
  return(result);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d109      	bne.n	800278c <osDelay+0x34>
 8002778:	4b0d      	ldr	r3, [pc, #52]	; (80027b0 <osDelay+0x58>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2b02      	cmp	r3, #2
 800277e:	d109      	bne.n	8002794 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002780:	f3ef 8311 	mrs	r3, BASEPRI
 8002784:	60bb      	str	r3, [r7, #8]
  return(result);
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d003      	beq.n	8002794 <osDelay+0x3c>
    stat = osErrorISR;
 800278c:	f06f 0305 	mvn.w	r3, #5
 8002790:	617b      	str	r3, [r7, #20]
 8002792:	e007      	b.n	80027a4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002794:	2300      	movs	r3, #0
 8002796:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d002      	beq.n	80027a4 <osDelay+0x4c>
      vTaskDelay(ticks);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f001 f9ca 	bl	8003b38 <vTaskDelay>
    }
  }

  return (stat);
 80027a4:	697b      	ldr	r3, [r7, #20]
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	2000002c 	.word	0x2000002c

080027b4 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b08c      	sub	sp, #48	; 0x30
 80027b8:	af02      	add	r7, sp, #8
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80027c0:	2300      	movs	r3, #0
 80027c2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027c4:	f3ef 8305 	mrs	r3, IPSR
 80027c8:	61bb      	str	r3, [r7, #24]
  return(result);
 80027ca:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f040 8088 	bne.w	80028e2 <osSemaphoreNew+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027d2:	f3ef 8310 	mrs	r3, PRIMASK
 80027d6:	617b      	str	r3, [r7, #20]
  return(result);
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f040 8081 	bne.w	80028e2 <osSemaphoreNew+0x12e>
 80027e0:	4b42      	ldr	r3, [pc, #264]	; (80028ec <osSemaphoreNew+0x138>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d105      	bne.n	80027f4 <osSemaphoreNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80027e8:	f3ef 8311 	mrs	r3, BASEPRI
 80027ec:	613b      	str	r3, [r7, #16]
  return(result);
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d176      	bne.n	80028e2 <osSemaphoreNew+0x12e>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d073      	beq.n	80028e2 <osSemaphoreNew+0x12e>
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d86f      	bhi.n	80028e2 <osSemaphoreNew+0x12e>
    mem = -1;
 8002802:	f04f 33ff 	mov.w	r3, #4294967295
 8002806:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d015      	beq.n	800283a <osSemaphoreNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d006      	beq.n	8002824 <osSemaphoreNew+0x70>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	2b4f      	cmp	r3, #79	; 0x4f
 800281c:	d902      	bls.n	8002824 <osSemaphoreNew+0x70>
        mem = 1;
 800281e:	2301      	movs	r3, #1
 8002820:	623b      	str	r3, [r7, #32]
 8002822:	e00c      	b.n	800283e <osSemaphoreNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d108      	bne.n	800283e <osSemaphoreNew+0x8a>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d104      	bne.n	800283e <osSemaphoreNew+0x8a>
          mem = 0;
 8002834:	2300      	movs	r3, #0
 8002836:	623b      	str	r3, [r7, #32]
 8002838:	e001      	b.n	800283e <osSemaphoreNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 800283a:	2300      	movs	r3, #0
 800283c:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800283e:	6a3b      	ldr	r3, [r7, #32]
 8002840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002844:	d04d      	beq.n	80028e2 <osSemaphoreNew+0x12e>
      if (max_count == 1U) {
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d129      	bne.n	80028a0 <osSemaphoreNew+0xec>
        if (mem == 1) {
 800284c:	6a3b      	ldr	r3, [r7, #32]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d10b      	bne.n	800286a <osSemaphoreNew+0xb6>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	689a      	ldr	r2, [r3, #8]
 8002856:	2303      	movs	r3, #3
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	4613      	mov	r3, r2
 800285c:	2200      	movs	r2, #0
 800285e:	2100      	movs	r1, #0
 8002860:	2001      	movs	r0, #1
 8002862:	f000 fa06 	bl	8002c72 <xQueueGenericCreateStatic>
 8002866:	6278      	str	r0, [r7, #36]	; 0x24
 8002868:	e005      	b.n	8002876 <osSemaphoreNew+0xc2>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800286a:	2203      	movs	r2, #3
 800286c:	2100      	movs	r1, #0
 800286e:	2001      	movs	r0, #1
 8002870:	f000 fa71 	bl	8002d56 <xQueueGenericCreate>
 8002874:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	2b00      	cmp	r3, #0
 800287a:	d022      	beq.n	80028c2 <osSemaphoreNew+0x10e>
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d01f      	beq.n	80028c2 <osSemaphoreNew+0x10e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002882:	2300      	movs	r3, #0
 8002884:	2200      	movs	r2, #0
 8002886:	2100      	movs	r1, #0
 8002888:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800288a:	f000 fb31 	bl	8002ef0 <xQueueGenericSend>
 800288e:	4603      	mov	r3, r0
 8002890:	2b01      	cmp	r3, #1
 8002892:	d016      	beq.n	80028c2 <osSemaphoreNew+0x10e>
            vSemaphoreDelete (hSemaphore);
 8002894:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002896:	f000 fde5 	bl	8003464 <vQueueDelete>
            hSemaphore = NULL;
 800289a:	2300      	movs	r3, #0
 800289c:	627b      	str	r3, [r7, #36]	; 0x24
 800289e:	e010      	b.n	80028c2 <osSemaphoreNew+0x10e>
          }
        }
      }
      else {
        if (mem == 1) {
 80028a0:	6a3b      	ldr	r3, [r7, #32]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d108      	bne.n	80028b8 <osSemaphoreNew+0x104>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	461a      	mov	r2, r3
 80028ac:	68b9      	ldr	r1, [r7, #8]
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f000 fab7 	bl	8002e22 <xQueueCreateCountingSemaphoreStatic>
 80028b4:	6278      	str	r0, [r7, #36]	; 0x24
 80028b6:	e004      	b.n	80028c2 <osSemaphoreNew+0x10e>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80028b8:	68b9      	ldr	r1, [r7, #8]
 80028ba:	68f8      	ldr	r0, [r7, #12]
 80028bc:	f000 fae6 	bl	8002e8c <xQueueCreateCountingSemaphore>
 80028c0:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00c      	beq.n	80028e2 <osSemaphoreNew+0x12e>
        if (attr != NULL) {
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <osSemaphoreNew+0x122>
          name = attr->name;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	61fb      	str	r3, [r7, #28]
 80028d4:	e001      	b.n	80028da <osSemaphoreNew+0x126>
        } else {
          name = NULL;
 80028d6:	2300      	movs	r3, #0
 80028d8:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80028da:	69f9      	ldr	r1, [r7, #28]
 80028dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80028de:	f000 fefd 	bl	80036dc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3728      	adds	r7, #40	; 0x28
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	2000002c 	.word	0x2000002c

080028f0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b08c      	sub	sp, #48	; 0x30
 80028f4:	af02      	add	r7, sp, #8
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80028fc:	2300      	movs	r3, #0
 80028fe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002900:	f3ef 8305 	mrs	r3, IPSR
 8002904:	61bb      	str	r3, [r7, #24]
  return(result);
 8002906:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8002908:	2b00      	cmp	r3, #0
 800290a:	d170      	bne.n	80029ee <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800290c:	f3ef 8310 	mrs	r3, PRIMASK
 8002910:	617b      	str	r3, [r7, #20]
  return(result);
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d16a      	bne.n	80029ee <osMessageQueueNew+0xfe>
 8002918:	4b37      	ldr	r3, [pc, #220]	; (80029f8 <osMessageQueueNew+0x108>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2b02      	cmp	r3, #2
 800291e:	d105      	bne.n	800292c <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002920:	f3ef 8311 	mrs	r3, BASEPRI
 8002924:	613b      	str	r3, [r7, #16]
  return(result);
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d160      	bne.n	80029ee <osMessageQueueNew+0xfe>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d05d      	beq.n	80029ee <osMessageQueueNew+0xfe>
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d05a      	beq.n	80029ee <osMessageQueueNew+0xfe>
    mem = -1;
 8002938:	f04f 33ff 	mov.w	r3, #4294967295
 800293c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d029      	beq.n	8002998 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d012      	beq.n	8002972 <osMessageQueueNew+0x82>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	2b4f      	cmp	r3, #79	; 0x4f
 8002952:	d90e      	bls.n	8002972 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00a      	beq.n	8002972 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	695a      	ldr	r2, [r3, #20]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	68b9      	ldr	r1, [r7, #8]
 8002964:	fb01 f303 	mul.w	r3, r1, r3
 8002968:	429a      	cmp	r2, r3
 800296a:	d302      	bcc.n	8002972 <osMessageQueueNew+0x82>
        mem = 1;
 800296c:	2301      	movs	r3, #1
 800296e:	623b      	str	r3, [r7, #32]
 8002970:	e014      	b.n	800299c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d110      	bne.n	800299c <osMessageQueueNew+0xac>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10c      	bne.n	800299c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002986:	2b00      	cmp	r3, #0
 8002988:	d108      	bne.n	800299c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d104      	bne.n	800299c <osMessageQueueNew+0xac>
          mem = 0;
 8002992:	2300      	movs	r3, #0
 8002994:	623b      	str	r3, [r7, #32]
 8002996:	e001      	b.n	800299c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8002998:	2300      	movs	r3, #0
 800299a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800299c:	6a3b      	ldr	r3, [r7, #32]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d10c      	bne.n	80029bc <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691a      	ldr	r2, [r3, #16]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6899      	ldr	r1, [r3, #8]
 80029aa:	2300      	movs	r3, #0
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	460b      	mov	r3, r1
 80029b0:	68b9      	ldr	r1, [r7, #8]
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f000 f95d 	bl	8002c72 <xQueueGenericCreateStatic>
 80029b8:	6278      	str	r0, [r7, #36]	; 0x24
 80029ba:	e008      	b.n	80029ce <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 80029bc:	6a3b      	ldr	r3, [r7, #32]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d105      	bne.n	80029ce <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 80029c2:	2200      	movs	r2, #0
 80029c4:	68b9      	ldr	r1, [r7, #8]
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f000 f9c5 	bl	8002d56 <xQueueGenericCreate>
 80029cc:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80029ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00c      	beq.n	80029ee <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d003      	beq.n	80029e2 <osMessageQueueNew+0xf2>
        name = attr->name;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	61fb      	str	r3, [r7, #28]
 80029e0:	e001      	b.n	80029e6 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 80029e2:	2300      	movs	r3, #0
 80029e4:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80029e6:	69f9      	ldr	r1, [r7, #28]
 80029e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029ea:	f000 fe77 	bl	80036dc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80029ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3728      	adds	r7, #40	; 0x28
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	2000002c 	.word	0x2000002c

080029fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	4a06      	ldr	r2, [pc, #24]	; (8002a24 <vApplicationGetIdleTaskMemory+0x28>)
 8002a0c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	4a05      	ldr	r2, [pc, #20]	; (8002a28 <vApplicationGetIdleTaskMemory+0x2c>)
 8002a12:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2280      	movs	r2, #128	; 0x80
 8002a18:	601a      	str	r2, [r3, #0]
}
 8002a1a:	bf00      	nop
 8002a1c:	3714      	adds	r7, #20
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr
 8002a24:	20000030 	.word	0x20000030
 8002a28:	2000008c 	.word	0x2000008c

08002a2c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4a07      	ldr	r2, [pc, #28]	; (8002a58 <vApplicationGetTimerTaskMemory+0x2c>)
 8002a3c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	4a06      	ldr	r2, [pc, #24]	; (8002a5c <vApplicationGetTimerTaskMemory+0x30>)
 8002a42:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a4a:	601a      	str	r2, [r3, #0]
}
 8002a4c:	bf00      	nop
 8002a4e:	3714      	adds	r7, #20
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bc80      	pop	{r7}
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	2000028c 	.word	0x2000028c
 8002a5c:	200002e8 	.word	0x200002e8

08002a60 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f103 0208 	add.w	r2, r3, #8
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f04f 32ff 	mov.w	r2, #4294967295
 8002a78:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f103 0208 	add.w	r2, r3, #8
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f103 0208 	add.w	r2, r3, #8
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bc80      	pop	{r7}
 8002a9c:	4770      	bx	lr

08002a9e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b083      	sub	sp, #12
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bc80      	pop	{r7}
 8002ab4:	4770      	bx	lr

08002ab6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b085      	sub	sp, #20
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
 8002abe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	1c5a      	adds	r2, r3, #1
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	601a      	str	r2, [r3, #0]
}
 8002af2:	bf00      	nop
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bc80      	pop	{r7}
 8002afa:	4770      	bx	lr

08002afc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b12:	d103      	bne.n	8002b1c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	e00c      	b.n	8002b36 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	3308      	adds	r3, #8
 8002b20:	60fb      	str	r3, [r7, #12]
 8002b22:	e002      	b.n	8002b2a <vListInsert+0x2e>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	60fb      	str	r3, [r7, #12]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d2f6      	bcs.n	8002b24 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	1c5a      	adds	r2, r3, #1
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	601a      	str	r2, [r3, #0]
}
 8002b62:	bf00      	nop
 8002b64:	3714      	adds	r7, #20
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bc80      	pop	{r7}
 8002b6a:	4770      	bx	lr

08002b6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	6892      	ldr	r2, [r2, #8]
 8002b82:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	6852      	ldr	r2, [r2, #4]
 8002b8c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d103      	bne.n	8002ba0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	1e5a      	subs	r2, r3, #1
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bc80      	pop	{r7}
 8002bbc:	4770      	bx	lr

08002bbe <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b084      	sub	sp, #16
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
 8002bc6:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d109      	bne.n	8002be6 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd6:	f383 8811 	msr	BASEPRI, r3
 8002bda:	f3bf 8f6f 	isb	sy
 8002bde:	f3bf 8f4f 	dsb	sy
 8002be2:	60bb      	str	r3, [r7, #8]
 8002be4:	e7fe      	b.n	8002be4 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002be6:	f002 f92f 	bl	8004e48 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf2:	68f9      	ldr	r1, [r7, #12]
 8002bf4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002bf6:	fb01 f303 	mul.w	r3, r1, r3
 8002bfa:	441a      	add	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c16:	3b01      	subs	r3, #1
 8002c18:	68f9      	ldr	r1, [r7, #12]
 8002c1a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002c1c:	fb01 f303 	mul.w	r3, r1, r3
 8002c20:	441a      	add	r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	22ff      	movs	r2, #255	; 0xff
 8002c2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	22ff      	movs	r2, #255	; 0xff
 8002c32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d109      	bne.n	8002c50 <xQueueGenericReset+0x92>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00f      	beq.n	8002c64 <xQueueGenericReset+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	3310      	adds	r3, #16
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f001 fa31 	bl	80040b0 <xTaskRemoveFromEventList>
 8002c4e:	e009      	b.n	8002c64 <xQueueGenericReset+0xa6>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	3310      	adds	r3, #16
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff ff03 	bl	8002a60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	3324      	adds	r3, #36	; 0x24
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7ff fefe 	bl	8002a60 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002c64:	f002 f91e 	bl	8004ea4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002c68:	2301      	movs	r3, #1
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b08e      	sub	sp, #56	; 0x38
 8002c76:	af02      	add	r7, sp, #8
 8002c78:	60f8      	str	r0, [r7, #12]
 8002c7a:	60b9      	str	r1, [r7, #8]
 8002c7c:	607a      	str	r2, [r7, #4]
 8002c7e:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d109      	bne.n	8002c9a <xQueueGenericCreateStatic+0x28>
 8002c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c8a:	f383 8811 	msr	BASEPRI, r3
 8002c8e:	f3bf 8f6f 	isb	sy
 8002c92:	f3bf 8f4f 	dsb	sy
 8002c96:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c98:	e7fe      	b.n	8002c98 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d109      	bne.n	8002cb4 <xQueueGenericCreateStatic+0x42>
 8002ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca4:	f383 8811 	msr	BASEPRI, r3
 8002ca8:	f3bf 8f6f 	isb	sy
 8002cac:	f3bf 8f4f 	dsb	sy
 8002cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8002cb2:	e7fe      	b.n	8002cb2 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d002      	beq.n	8002cc0 <xQueueGenericCreateStatic+0x4e>
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <xQueueGenericCreateStatic+0x52>
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e000      	b.n	8002cc6 <xQueueGenericCreateStatic+0x54>
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d109      	bne.n	8002cde <xQueueGenericCreateStatic+0x6c>
 8002cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cce:	f383 8811 	msr	BASEPRI, r3
 8002cd2:	f3bf 8f6f 	isb	sy
 8002cd6:	f3bf 8f4f 	dsb	sy
 8002cda:	623b      	str	r3, [r7, #32]
 8002cdc:	e7fe      	b.n	8002cdc <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d102      	bne.n	8002cea <xQueueGenericCreateStatic+0x78>
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <xQueueGenericCreateStatic+0x7c>
 8002cea:	2301      	movs	r3, #1
 8002cec:	e000      	b.n	8002cf0 <xQueueGenericCreateStatic+0x7e>
 8002cee:	2300      	movs	r3, #0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d109      	bne.n	8002d08 <xQueueGenericCreateStatic+0x96>
 8002cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf8:	f383 8811 	msr	BASEPRI, r3
 8002cfc:	f3bf 8f6f 	isb	sy
 8002d00:	f3bf 8f4f 	dsb	sy
 8002d04:	61fb      	str	r3, [r7, #28]
 8002d06:	e7fe      	b.n	8002d06 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002d08:	2350      	movs	r3, #80	; 0x50
 8002d0a:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	2b50      	cmp	r3, #80	; 0x50
 8002d10:	d009      	beq.n	8002d26 <xQueueGenericCreateStatic+0xb4>
 8002d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d16:	f383 8811 	msr	BASEPRI, r3
 8002d1a:	f3bf 8f6f 	isb	sy
 8002d1e:	f3bf 8f4f 	dsb	sy
 8002d22:	61bb      	str	r3, [r7, #24]
 8002d24:	e7fe      	b.n	8002d24 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00d      	beq.n	8002d4c <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d38:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d3e:	9300      	str	r3, [sp, #0]
 8002d40:	4613      	mov	r3, r2
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	68b9      	ldr	r1, [r7, #8]
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f000 f842 	bl	8002dd0 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3730      	adds	r7, #48	; 0x30
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b08a      	sub	sp, #40	; 0x28
 8002d5a:	af02      	add	r7, sp, #8
 8002d5c:	60f8      	str	r0, [r7, #12]
 8002d5e:	60b9      	str	r1, [r7, #8]
 8002d60:	4613      	mov	r3, r2
 8002d62:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d109      	bne.n	8002d7e <xQueueGenericCreate+0x28>
 8002d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d6e:	f383 8811 	msr	BASEPRI, r3
 8002d72:	f3bf 8f6f 	isb	sy
 8002d76:	f3bf 8f4f 	dsb	sy
 8002d7a:	613b      	str	r3, [r7, #16]
 8002d7c:	e7fe      	b.n	8002d7c <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d102      	bne.n	8002d8a <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002d84:	2300      	movs	r3, #0
 8002d86:	61fb      	str	r3, [r7, #28]
 8002d88:	e004      	b.n	8002d94 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	68ba      	ldr	r2, [r7, #8]
 8002d8e:	fb02 f303 	mul.w	r3, r2, r3
 8002d92:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	3350      	adds	r3, #80	; 0x50
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f002 f94b 	bl	8005034 <pvPortMalloc>
 8002d9e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00f      	beq.n	8002dc6 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	3350      	adds	r3, #80	; 0x50
 8002daa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002db4:	79fa      	ldrb	r2, [r7, #7]
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	697a      	ldr	r2, [r7, #20]
 8002dbe:	68b9      	ldr	r1, [r7, #8]
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f000 f805 	bl	8002dd0 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002dc6:	69bb      	ldr	r3, [r7, #24]
	}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3720      	adds	r7, #32
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
 8002ddc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d103      	bne.n	8002dec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	601a      	str	r2, [r3, #0]
 8002dea:	e002      	b.n	8002df2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002dfe:	2101      	movs	r1, #1
 8002e00:	69b8      	ldr	r0, [r7, #24]
 8002e02:	f7ff fedc 	bl	8002bbe <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	78fa      	ldrb	r2, [r7, #3]
 8002e0a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8002e0e:	78fb      	ldrb	r3, [r7, #3]
 8002e10:	68ba      	ldr	r2, [r7, #8]
 8002e12:	68f9      	ldr	r1, [r7, #12]
 8002e14:	2073      	movs	r0, #115	; 0x73
 8002e16:	f003 f911 	bl	800603c <SEGGER_SYSVIEW_RecordU32x3>
}
 8002e1a:	bf00      	nop
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b08a      	sub	sp, #40	; 0x28
 8002e26:	af02      	add	r7, sp, #8
 8002e28:	60f8      	str	r0, [r7, #12]
 8002e2a:	60b9      	str	r1, [r7, #8]
 8002e2c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d109      	bne.n	8002e48 <xQueueCreateCountingSemaphoreStatic+0x26>
 8002e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e38:	f383 8811 	msr	BASEPRI, r3
 8002e3c:	f3bf 8f6f 	isb	sy
 8002e40:	f3bf 8f4f 	dsb	sy
 8002e44:	61bb      	str	r3, [r7, #24]
 8002e46:	e7fe      	b.n	8002e46 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002e48:	68ba      	ldr	r2, [r7, #8]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d909      	bls.n	8002e64 <xQueueCreateCountingSemaphoreStatic+0x42>
 8002e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e54:	f383 8811 	msr	BASEPRI, r3
 8002e58:	f3bf 8f6f 	isb	sy
 8002e5c:	f3bf 8f4f 	dsb	sy
 8002e60:	617b      	str	r3, [r7, #20]
 8002e62:	e7fe      	b.n	8002e62 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002e64:	2302      	movs	r3, #2
 8002e66:	9300      	str	r3, [sp, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f7ff feff 	bl	8002c72 <xQueueGenericCreateStatic>
 8002e74:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d002      	beq.n	8002e82 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	68ba      	ldr	r2, [r7, #8]
 8002e80:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002e82:	69fb      	ldr	r3, [r7, #28]
	}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3720      	adds	r7, #32
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d109      	bne.n	8002eb0 <xQueueCreateCountingSemaphore+0x24>
 8002e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea0:	f383 8811 	msr	BASEPRI, r3
 8002ea4:	f3bf 8f6f 	isb	sy
 8002ea8:	f3bf 8f4f 	dsb	sy
 8002eac:	613b      	str	r3, [r7, #16]
 8002eae:	e7fe      	b.n	8002eae <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d909      	bls.n	8002ecc <xQueueCreateCountingSemaphore+0x40>
 8002eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ebc:	f383 8811 	msr	BASEPRI, r3
 8002ec0:	f3bf 8f6f 	isb	sy
 8002ec4:	f3bf 8f4f 	dsb	sy
 8002ec8:	60fb      	str	r3, [r7, #12]
 8002eca:	e7fe      	b.n	8002eca <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002ecc:	2202      	movs	r2, #2
 8002ece:	2100      	movs	r1, #0
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f7ff ff40 	bl	8002d56 <xQueueGenericCreate>
 8002ed6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d002      	beq.n	8002ee4 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002ee4:	697b      	ldr	r3, [r7, #20]
	}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3718      	adds	r7, #24
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
	...

08002ef0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b090      	sub	sp, #64	; 0x40
 8002ef4:	af02      	add	r7, sp, #8
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
 8002efc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002efe:	2300      	movs	r3, #0
 8002f00:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d109      	bne.n	8002f20 <xQueueGenericSend+0x30>
 8002f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f10:	f383 8811 	msr	BASEPRI, r3
 8002f14:	f3bf 8f6f 	isb	sy
 8002f18:	f3bf 8f4f 	dsb	sy
 8002f1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f1e:	e7fe      	b.n	8002f1e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d103      	bne.n	8002f2e <xQueueGenericSend+0x3e>
 8002f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <xQueueGenericSend+0x42>
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e000      	b.n	8002f34 <xQueueGenericSend+0x44>
 8002f32:	2300      	movs	r3, #0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d109      	bne.n	8002f4c <xQueueGenericSend+0x5c>
 8002f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f3c:	f383 8811 	msr	BASEPRI, r3
 8002f40:	f3bf 8f6f 	isb	sy
 8002f44:	f3bf 8f4f 	dsb	sy
 8002f48:	627b      	str	r3, [r7, #36]	; 0x24
 8002f4a:	e7fe      	b.n	8002f4a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d103      	bne.n	8002f5a <xQueueGenericSend+0x6a>
 8002f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d101      	bne.n	8002f5e <xQueueGenericSend+0x6e>
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e000      	b.n	8002f60 <xQueueGenericSend+0x70>
 8002f5e:	2300      	movs	r3, #0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d109      	bne.n	8002f78 <xQueueGenericSend+0x88>
 8002f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f68:	f383 8811 	msr	BASEPRI, r3
 8002f6c:	f3bf 8f6f 	isb	sy
 8002f70:	f3bf 8f4f 	dsb	sy
 8002f74:	623b      	str	r3, [r7, #32]
 8002f76:	e7fe      	b.n	8002f76 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f78:	f001 fa8a 	bl	8004490 <xTaskGetSchedulerState>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d102      	bne.n	8002f88 <xQueueGenericSend+0x98>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d101      	bne.n	8002f8c <xQueueGenericSend+0x9c>
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e000      	b.n	8002f8e <xQueueGenericSend+0x9e>
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d109      	bne.n	8002fa6 <xQueueGenericSend+0xb6>
 8002f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f96:	f383 8811 	msr	BASEPRI, r3
 8002f9a:	f3bf 8f6f 	isb	sy
 8002f9e:	f3bf 8f4f 	dsb	sy
 8002fa2:	61fb      	str	r3, [r7, #28]
 8002fa4:	e7fe      	b.n	8002fa4 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002fa6:	f001 ff4f 	bl	8004e48 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d302      	bcc.n	8002fbc <xQueueGenericSend+0xcc>
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d11f      	bne.n	8002ffc <xQueueGenericSend+0x10c>
			{
				traceQUEUE_SEND( pxQueue );
 8002fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f003 fcec 	bl	800699c <SEGGER_SYSVIEW_ShrinkId>
 8002fc4:	68ba      	ldr	r2, [r7, #8]
 8002fc6:	6879      	ldr	r1, [r7, #4]
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	9300      	str	r3, [sp, #0]
 8002fcc:	460b      	mov	r3, r1
 8002fce:	4601      	mov	r1, r0
 8002fd0:	205a      	movs	r0, #90	; 0x5a
 8002fd2:	f003 f8a9 	bl	8006128 <SEGGER_SYSVIEW_RecordU32x4>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002fd6:	683a      	ldr	r2, [r7, #0]
 8002fd8:	68b9      	ldr	r1, [r7, #8]
 8002fda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fdc:	f000 fa6d 	bl	80034ba <prvCopyDataToQueue>
 8002fe0:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d004      	beq.n	8002ff4 <xQueueGenericSend+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fec:	3324      	adds	r3, #36	; 0x24
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f001 f85e 	bl	80040b0 <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002ff4:	f001 ff56 	bl	8004ea4 <vPortExitCritical>
				return pdPASS;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e07d      	b.n	80030f8 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d110      	bne.n	8003024 <xQueueGenericSend+0x134>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003002:	f001 ff4f 	bl	8004ea4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8003006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003008:	4618      	mov	r0, r3
 800300a:	f003 fcc7 	bl	800699c <SEGGER_SYSVIEW_ShrinkId>
 800300e:	68ba      	ldr	r2, [r7, #8]
 8003010:	6879      	ldr	r1, [r7, #4]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	460b      	mov	r3, r1
 8003018:	4601      	mov	r1, r0
 800301a:	205a      	movs	r0, #90	; 0x5a
 800301c:	f003 f884 	bl	8006128 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 8003020:	2300      	movs	r3, #0
 8003022:	e069      	b.n	80030f8 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003026:	2b00      	cmp	r3, #0
 8003028:	d106      	bne.n	8003038 <xQueueGenericSend+0x148>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800302a:	f107 0314 	add.w	r3, r7, #20
 800302e:	4618      	mov	r0, r3
 8003030:	f001 f8a4 	bl	800417c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003034:	2301      	movs	r3, #1
 8003036:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003038:	f001 ff34 	bl	8004ea4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800303c:	f000 fe18 	bl	8003c70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003040:	f001 ff02 	bl	8004e48 <vPortEnterCritical>
 8003044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003046:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800304a:	b25b      	sxtb	r3, r3
 800304c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003050:	d103      	bne.n	800305a <xQueueGenericSend+0x16a>
 8003052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003054:	2200      	movs	r2, #0
 8003056:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800305a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003060:	b25b      	sxtb	r3, r3
 8003062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003066:	d103      	bne.n	8003070 <xQueueGenericSend+0x180>
 8003068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800306a:	2200      	movs	r2, #0
 800306c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003070:	f001 ff18 	bl	8004ea4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003074:	1d3a      	adds	r2, r7, #4
 8003076:	f107 0314 	add.w	r3, r7, #20
 800307a:	4611      	mov	r1, r2
 800307c:	4618      	mov	r0, r3
 800307e:	f001 f893 	bl	80041a8 <xTaskCheckForTimeOut>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d124      	bne.n	80030d2 <xQueueGenericSend+0x1e2>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003088:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800308a:	f000 fb0e 	bl	80036aa <prvIsQueueFull>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d018      	beq.n	80030c6 <xQueueGenericSend+0x1d6>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003096:	3310      	adds	r3, #16
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	4611      	mov	r1, r2
 800309c:	4618      	mov	r0, r3
 800309e:	f000 ffb5 	bl	800400c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80030a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030a4:	f000 fa99 	bl	80035da <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80030a8:	f000 fdf0 	bl	8003c8c <xTaskResumeAll>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f47f af79 	bne.w	8002fa6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80030b4:	4b12      	ldr	r3, [pc, #72]	; (8003100 <xQueueGenericSend+0x210>)
 80030b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	f3bf 8f4f 	dsb	sy
 80030c0:	f3bf 8f6f 	isb	sy
 80030c4:	e76f      	b.n	8002fa6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80030c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030c8:	f000 fa87 	bl	80035da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80030cc:	f000 fdde 	bl	8003c8c <xTaskResumeAll>
 80030d0:	e769      	b.n	8002fa6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80030d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030d4:	f000 fa81 	bl	80035da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80030d8:	f000 fdd8 	bl	8003c8c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 80030dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030de:	4618      	mov	r0, r3
 80030e0:	f003 fc5c 	bl	800699c <SEGGER_SYSVIEW_ShrinkId>
 80030e4:	68ba      	ldr	r2, [r7, #8]
 80030e6:	6879      	ldr	r1, [r7, #4]
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	9300      	str	r3, [sp, #0]
 80030ec:	460b      	mov	r3, r1
 80030ee:	4601      	mov	r1, r0
 80030f0:	205a      	movs	r0, #90	; 0x5a
 80030f2:	f003 f819 	bl	8006128 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 80030f6:	2300      	movs	r3, #0
		}
	}
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3738      	adds	r7, #56	; 0x38
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	e000ed04 	.word	0xe000ed04

08003104 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b08e      	sub	sp, #56	; 0x38
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
 8003110:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003118:	2b00      	cmp	r3, #0
 800311a:	d109      	bne.n	8003130 <xQueueGenericSendFromISR+0x2c>
 800311c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003120:	f383 8811 	msr	BASEPRI, r3
 8003124:	f3bf 8f6f 	isb	sy
 8003128:	f3bf 8f4f 	dsb	sy
 800312c:	627b      	str	r3, [r7, #36]	; 0x24
 800312e:	e7fe      	b.n	800312e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d103      	bne.n	800313e <xQueueGenericSendFromISR+0x3a>
 8003136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <xQueueGenericSendFromISR+0x3e>
 800313e:	2301      	movs	r3, #1
 8003140:	e000      	b.n	8003144 <xQueueGenericSendFromISR+0x40>
 8003142:	2300      	movs	r3, #0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d109      	bne.n	800315c <xQueueGenericSendFromISR+0x58>
 8003148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800314c:	f383 8811 	msr	BASEPRI, r3
 8003150:	f3bf 8f6f 	isb	sy
 8003154:	f3bf 8f4f 	dsb	sy
 8003158:	623b      	str	r3, [r7, #32]
 800315a:	e7fe      	b.n	800315a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	2b02      	cmp	r3, #2
 8003160:	d103      	bne.n	800316a <xQueueGenericSendFromISR+0x66>
 8003162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003166:	2b01      	cmp	r3, #1
 8003168:	d101      	bne.n	800316e <xQueueGenericSendFromISR+0x6a>
 800316a:	2301      	movs	r3, #1
 800316c:	e000      	b.n	8003170 <xQueueGenericSendFromISR+0x6c>
 800316e:	2300      	movs	r3, #0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d109      	bne.n	8003188 <xQueueGenericSendFromISR+0x84>
 8003174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003178:	f383 8811 	msr	BASEPRI, r3
 800317c:	f3bf 8f6f 	isb	sy
 8003180:	f3bf 8f4f 	dsb	sy
 8003184:	61fb      	str	r3, [r7, #28]
 8003186:	e7fe      	b.n	8003186 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003188:	f001 ff18 	bl	8004fbc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800318c:	f3ef 8211 	mrs	r2, BASEPRI
 8003190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003194:	f383 8811 	msr	BASEPRI, r3
 8003198:	f3bf 8f6f 	isb	sy
 800319c:	f3bf 8f4f 	dsb	sy
 80031a0:	61ba      	str	r2, [r7, #24]
 80031a2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80031a4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80031a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80031a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d302      	bcc.n	80031ba <xQueueGenericSendFromISR+0xb6>
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d136      	bne.n	8003228 <xQueueGenericSendFromISR+0x124>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80031ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 80031c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c6:	4618      	mov	r0, r3
 80031c8:	f003 fbe8 	bl	800699c <SEGGER_SYSVIEW_ShrinkId>
 80031cc:	4601      	mov	r1, r0
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	461a      	mov	r2, r3
 80031d2:	2060      	movs	r0, #96	; 0x60
 80031d4:	f002 fed8 	bl	8005f88 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	68b9      	ldr	r1, [r7, #8]
 80031dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031de:	f000 f96c 	bl	80034ba <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80031e2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80031e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ea:	d112      	bne.n	8003212 <xQueueGenericSendFromISR+0x10e>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d016      	beq.n	8003222 <xQueueGenericSendFromISR+0x11e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f6:	3324      	adds	r3, #36	; 0x24
 80031f8:	4618      	mov	r0, r3
 80031fa:	f000 ff59 	bl	80040b0 <xTaskRemoveFromEventList>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00e      	beq.n	8003222 <xQueueGenericSendFromISR+0x11e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00b      	beq.n	8003222 <xQueueGenericSendFromISR+0x11e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2201      	movs	r2, #1
 800320e:	601a      	str	r2, [r3, #0]
 8003210:	e007      	b.n	8003222 <xQueueGenericSendFromISR+0x11e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003212:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003216:	3301      	adds	r3, #1
 8003218:	b2db      	uxtb	r3, r3
 800321a:	b25a      	sxtb	r2, r3
 800321c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800321e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003222:	2301      	movs	r3, #1
 8003224:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003226:	e00b      	b.n	8003240 <xQueueGenericSendFromISR+0x13c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8003228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800322a:	4618      	mov	r0, r3
 800322c:	f003 fbb6 	bl	800699c <SEGGER_SYSVIEW_ShrinkId>
 8003230:	4601      	mov	r1, r0
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	461a      	mov	r2, r3
 8003236:	2060      	movs	r0, #96	; 0x60
 8003238:	f002 fea6 	bl	8005f88 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 800323c:	2300      	movs	r3, #0
 800323e:	637b      	str	r3, [r7, #52]	; 0x34
 8003240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003242:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800324a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800324c:	4618      	mov	r0, r3
 800324e:	3738      	adds	r7, #56	; 0x38
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003254:	b590      	push	{r4, r7, lr}
 8003256:	b08f      	sub	sp, #60	; 0x3c
 8003258:	af02      	add	r7, sp, #8
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003260:	2300      	movs	r3, #0
 8003262:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326a:	2b00      	cmp	r3, #0
 800326c:	d109      	bne.n	8003282 <xQueueReceive+0x2e>
	__asm volatile
 800326e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003272:	f383 8811 	msr	BASEPRI, r3
 8003276:	f3bf 8f6f 	isb	sy
 800327a:	f3bf 8f4f 	dsb	sy
 800327e:	623b      	str	r3, [r7, #32]
 8003280:	e7fe      	b.n	8003280 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d103      	bne.n	8003290 <xQueueReceive+0x3c>
 8003288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800328a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328c:	2b00      	cmp	r3, #0
 800328e:	d101      	bne.n	8003294 <xQueueReceive+0x40>
 8003290:	2301      	movs	r3, #1
 8003292:	e000      	b.n	8003296 <xQueueReceive+0x42>
 8003294:	2300      	movs	r3, #0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d109      	bne.n	80032ae <xQueueReceive+0x5a>
 800329a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800329e:	f383 8811 	msr	BASEPRI, r3
 80032a2:	f3bf 8f6f 	isb	sy
 80032a6:	f3bf 8f4f 	dsb	sy
 80032aa:	61fb      	str	r3, [r7, #28]
 80032ac:	e7fe      	b.n	80032ac <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80032ae:	f001 f8ef 	bl	8004490 <xTaskGetSchedulerState>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d102      	bne.n	80032be <xQueueReceive+0x6a>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <xQueueReceive+0x6e>
 80032be:	2301      	movs	r3, #1
 80032c0:	e000      	b.n	80032c4 <xQueueReceive+0x70>
 80032c2:	2300      	movs	r3, #0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d109      	bne.n	80032dc <xQueueReceive+0x88>
 80032c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032cc:	f383 8811 	msr	BASEPRI, r3
 80032d0:	f3bf 8f6f 	isb	sy
 80032d4:	f3bf 8f4f 	dsb	sy
 80032d8:	61bb      	str	r3, [r7, #24]
 80032da:	e7fe      	b.n	80032da <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80032dc:	f001 fdb4 	bl	8004e48 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d026      	beq.n	800333a <xQueueReceive+0xe6>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80032ec:	68b9      	ldr	r1, [r7, #8]
 80032ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032f0:	f000 f94d 	bl	800358e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 80032f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f6:	4618      	mov	r0, r3
 80032f8:	f003 fb50 	bl	800699c <SEGGER_SYSVIEW_ShrinkId>
 80032fc:	4604      	mov	r4, r0
 80032fe:	2000      	movs	r0, #0
 8003300:	f003 fb4c 	bl	800699c <SEGGER_SYSVIEW_ShrinkId>
 8003304:	4601      	mov	r1, r0
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	2301      	movs	r3, #1
 800330a:	9300      	str	r3, [sp, #0]
 800330c:	4613      	mov	r3, r2
 800330e:	460a      	mov	r2, r1
 8003310:	4621      	mov	r1, r4
 8003312:	205c      	movs	r0, #92	; 0x5c
 8003314:	f002 ff08 	bl	8006128 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331a:	1e5a      	subs	r2, r3, #1
 800331c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800331e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d004      	beq.n	8003332 <xQueueReceive+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800332a:	3310      	adds	r3, #16
 800332c:	4618      	mov	r0, r3
 800332e:	f000 febf 	bl	80040b0 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003332:	f001 fdb7 	bl	8004ea4 <vPortExitCritical>
				return pdPASS;
 8003336:	2301      	movs	r3, #1
 8003338:	e08e      	b.n	8003458 <xQueueReceive+0x204>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d115      	bne.n	800336c <xQueueReceive+0x118>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003340:	f001 fdb0 	bl	8004ea4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003346:	4618      	mov	r0, r3
 8003348:	f003 fb28 	bl	800699c <SEGGER_SYSVIEW_ShrinkId>
 800334c:	4604      	mov	r4, r0
 800334e:	2000      	movs	r0, #0
 8003350:	f003 fb24 	bl	800699c <SEGGER_SYSVIEW_ShrinkId>
 8003354:	4601      	mov	r1, r0
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	2301      	movs	r3, #1
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	4613      	mov	r3, r2
 800335e:	460a      	mov	r2, r1
 8003360:	4621      	mov	r1, r4
 8003362:	205c      	movs	r0, #92	; 0x5c
 8003364:	f002 fee0 	bl	8006128 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8003368:	2300      	movs	r3, #0
 800336a:	e075      	b.n	8003458 <xQueueReceive+0x204>
				}
				else if( xEntryTimeSet == pdFALSE )
 800336c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800336e:	2b00      	cmp	r3, #0
 8003370:	d106      	bne.n	8003380 <xQueueReceive+0x12c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003372:	f107 0310 	add.w	r3, r7, #16
 8003376:	4618      	mov	r0, r3
 8003378:	f000 ff00 	bl	800417c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800337c:	2301      	movs	r3, #1
 800337e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003380:	f001 fd90 	bl	8004ea4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003384:	f000 fc74 	bl	8003c70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003388:	f001 fd5e 	bl	8004e48 <vPortEnterCritical>
 800338c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800338e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003392:	b25b      	sxtb	r3, r3
 8003394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003398:	d103      	bne.n	80033a2 <xQueueReceive+0x14e>
 800339a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800339c:	2200      	movs	r2, #0
 800339e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033a8:	b25b      	sxtb	r3, r3
 80033aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ae:	d103      	bne.n	80033b8 <xQueueReceive+0x164>
 80033b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033b8:	f001 fd74 	bl	8004ea4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80033bc:	1d3a      	adds	r2, r7, #4
 80033be:	f107 0310 	add.w	r3, r7, #16
 80033c2:	4611      	mov	r1, r2
 80033c4:	4618      	mov	r0, r3
 80033c6:	f000 feef 	bl	80041a8 <xTaskCheckForTimeOut>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d124      	bne.n	800341a <xQueueReceive+0x1c6>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033d2:	f000 f954 	bl	800367e <prvIsQueueEmpty>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d018      	beq.n	800340e <xQueueReceive+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80033dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033de:	3324      	adds	r3, #36	; 0x24
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	4611      	mov	r1, r2
 80033e4:	4618      	mov	r0, r3
 80033e6:	f000 fe11 	bl	800400c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80033ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033ec:	f000 f8f5 	bl	80035da <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80033f0:	f000 fc4c 	bl	8003c8c <xTaskResumeAll>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f47f af70 	bne.w	80032dc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80033fc:	4b18      	ldr	r3, [pc, #96]	; (8003460 <xQueueReceive+0x20c>)
 80033fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003402:	601a      	str	r2, [r3, #0]
 8003404:	f3bf 8f4f 	dsb	sy
 8003408:	f3bf 8f6f 	isb	sy
 800340c:	e766      	b.n	80032dc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800340e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003410:	f000 f8e3 	bl	80035da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003414:	f000 fc3a 	bl	8003c8c <xTaskResumeAll>
 8003418:	e760      	b.n	80032dc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800341a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800341c:	f000 f8dd 	bl	80035da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003420:	f000 fc34 	bl	8003c8c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003424:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003426:	f000 f92a 	bl	800367e <prvIsQueueEmpty>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	f43f af55 	beq.w	80032dc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003434:	4618      	mov	r0, r3
 8003436:	f003 fab1 	bl	800699c <SEGGER_SYSVIEW_ShrinkId>
 800343a:	4604      	mov	r4, r0
 800343c:	2000      	movs	r0, #0
 800343e:	f003 faad 	bl	800699c <SEGGER_SYSVIEW_ShrinkId>
 8003442:	4601      	mov	r1, r0
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	2301      	movs	r3, #1
 8003448:	9300      	str	r3, [sp, #0]
 800344a:	4613      	mov	r3, r2
 800344c:	460a      	mov	r2, r1
 800344e:	4621      	mov	r1, r4
 8003450:	205c      	movs	r0, #92	; 0x5c
 8003452:	f002 fe69 	bl	8006128 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8003456:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003458:	4618      	mov	r0, r3
 800345a:	3734      	adds	r7, #52	; 0x34
 800345c:	46bd      	mov	sp, r7
 800345e:	bd90      	pop	{r4, r7, pc}
 8003460:	e000ed04 	.word	0xe000ed04

08003464 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d109      	bne.n	800348a <vQueueDelete+0x26>
 8003476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800347a:	f383 8811 	msr	BASEPRI, r3
 800347e:	f3bf 8f6f 	isb	sy
 8003482:	f3bf 8f4f 	dsb	sy
 8003486:	60bb      	str	r3, [r7, #8]
 8003488:	e7fe      	b.n	8003488 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	4618      	mov	r0, r3
 800348e:	f003 fa85 	bl	800699c <SEGGER_SYSVIEW_ShrinkId>
 8003492:	4603      	mov	r3, r0
 8003494:	4619      	mov	r1, r3
 8003496:	205f      	movs	r0, #95	; 0x5f
 8003498:	f002 fd3a 	bl	8005f10 <SEGGER_SYSVIEW_RecordU32>

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f000 f94d 	bl	800373c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d102      	bne.n	80034b2 <vQueueDelete+0x4e>
		{
			vPortFree( pxQueue );
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f001 fe83 	bl	80051b8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80034b2:	bf00      	nop
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b086      	sub	sp, #24
 80034be:	af00      	add	r7, sp, #0
 80034c0:	60f8      	str	r0, [r7, #12]
 80034c2:	60b9      	str	r1, [r7, #8]
 80034c4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80034c6:	2300      	movs	r3, #0
 80034c8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ce:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10d      	bne.n	80034f4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d14d      	bne.n	800357c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f000 fff1 	bl	80044cc <xTaskPriorityDisinherit>
 80034ea:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	605a      	str	r2, [r3, #4]
 80034f2:	e043      	b.n	800357c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d119      	bne.n	800352e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6898      	ldr	r0, [r3, #8]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	461a      	mov	r2, r3
 8003504:	68b9      	ldr	r1, [r7, #8]
 8003506:	f003 fbc4 	bl	8006c92 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	689a      	ldr	r2, [r3, #8]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	441a      	add	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	689a      	ldr	r2, [r3, #8]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	429a      	cmp	r2, r3
 8003522:	d32b      	bcc.n	800357c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	609a      	str	r2, [r3, #8]
 800352c:	e026      	b.n	800357c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	68d8      	ldr	r0, [r3, #12]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	461a      	mov	r2, r3
 8003538:	68b9      	ldr	r1, [r7, #8]
 800353a:	f003 fbaa 	bl	8006c92 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	68da      	ldr	r2, [r3, #12]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	425b      	negs	r3, r3
 8003548:	441a      	add	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	68da      	ldr	r2, [r3, #12]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	429a      	cmp	r2, r3
 8003558:	d207      	bcs.n	800356a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	685a      	ldr	r2, [r3, #4]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	425b      	negs	r3, r3
 8003564:	441a      	add	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2b02      	cmp	r3, #2
 800356e:	d105      	bne.n	800357c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d002      	beq.n	800357c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	3b01      	subs	r3, #1
 800357a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1c5a      	adds	r2, r3, #1
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003584:	697b      	ldr	r3, [r7, #20]
}
 8003586:	4618      	mov	r0, r3
 8003588:	3718      	adds	r7, #24
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b082      	sub	sp, #8
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
 8003596:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359c:	2b00      	cmp	r3, #0
 800359e:	d018      	beq.n	80035d2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68da      	ldr	r2, [r3, #12]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a8:	441a      	add	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	68da      	ldr	r2, [r3, #12]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d303      	bcc.n	80035c2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68d9      	ldr	r1, [r3, #12]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	461a      	mov	r2, r3
 80035cc:	6838      	ldr	r0, [r7, #0]
 80035ce:	f003 fb60 	bl	8006c92 <memcpy>
	}
}
 80035d2:	bf00      	nop
 80035d4:	3708      	adds	r7, #8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b084      	sub	sp, #16
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80035e2:	f001 fc31 	bl	8004e48 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035ec:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80035ee:	e011      	b.n	8003614 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d012      	beq.n	800361e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	3324      	adds	r3, #36	; 0x24
 80035fc:	4618      	mov	r0, r3
 80035fe:	f000 fd57 	bl	80040b0 <xTaskRemoveFromEventList>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d001      	beq.n	800360c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003608:	f000 fe2e 	bl	8004268 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800360c:	7bfb      	ldrb	r3, [r7, #15]
 800360e:	3b01      	subs	r3, #1
 8003610:	b2db      	uxtb	r3, r3
 8003612:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003614:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003618:	2b00      	cmp	r3, #0
 800361a:	dce9      	bgt.n	80035f0 <prvUnlockQueue+0x16>
 800361c:	e000      	b.n	8003620 <prvUnlockQueue+0x46>
					break;
 800361e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	22ff      	movs	r2, #255	; 0xff
 8003624:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003628:	f001 fc3c 	bl	8004ea4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800362c:	f001 fc0c 	bl	8004e48 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003636:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003638:	e011      	b.n	800365e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d012      	beq.n	8003668 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	3310      	adds	r3, #16
 8003646:	4618      	mov	r0, r3
 8003648:	f000 fd32 	bl	80040b0 <xTaskRemoveFromEventList>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003652:	f000 fe09 	bl	8004268 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003656:	7bbb      	ldrb	r3, [r7, #14]
 8003658:	3b01      	subs	r3, #1
 800365a:	b2db      	uxtb	r3, r3
 800365c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800365e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003662:	2b00      	cmp	r3, #0
 8003664:	dce9      	bgt.n	800363a <prvUnlockQueue+0x60>
 8003666:	e000      	b.n	800366a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003668:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	22ff      	movs	r2, #255	; 0xff
 800366e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003672:	f001 fc17 	bl	8004ea4 <vPortExitCritical>
}
 8003676:	bf00      	nop
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b084      	sub	sp, #16
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003686:	f001 fbdf 	bl	8004e48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368e:	2b00      	cmp	r3, #0
 8003690:	d102      	bne.n	8003698 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003692:	2301      	movs	r3, #1
 8003694:	60fb      	str	r3, [r7, #12]
 8003696:	e001      	b.n	800369c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003698:	2300      	movs	r3, #0
 800369a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800369c:	f001 fc02 	bl	8004ea4 <vPortExitCritical>

	return xReturn;
 80036a0:	68fb      	ldr	r3, [r7, #12]
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b084      	sub	sp, #16
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80036b2:	f001 fbc9 	bl	8004e48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036be:	429a      	cmp	r2, r3
 80036c0:	d102      	bne.n	80036c8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80036c2:	2301      	movs	r3, #1
 80036c4:	60fb      	str	r3, [r7, #12]
 80036c6:	e001      	b.n	80036cc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80036c8:	2300      	movs	r3, #0
 80036ca:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80036cc:	f001 fbea 	bl	8004ea4 <vPortExitCritical>

	return xReturn;
 80036d0:	68fb      	ldr	r3, [r7, #12]
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
	...

080036dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80036e6:	2300      	movs	r3, #0
 80036e8:	60fb      	str	r3, [r7, #12]
 80036ea:	e01e      	b.n	800372a <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80036ec:	4a12      	ldr	r2, [pc, #72]	; (8003738 <vQueueAddToRegistry+0x5c>)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d115      	bne.n	8003724 <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80036f8:	490f      	ldr	r1, [pc, #60]	; (8003738 <vQueueAddToRegistry+0x5c>)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	683a      	ldr	r2, [r7, #0]
 80036fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003702:	4a0d      	ldr	r2, [pc, #52]	; (8003738 <vQueueAddToRegistry+0x5c>)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	4413      	add	r3, r2
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4618      	mov	r0, r3
 8003712:	f003 f943 	bl	800699c <SEGGER_SYSVIEW_ShrinkId>
 8003716:	4601      	mov	r1, r0
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	461a      	mov	r2, r3
 800371c:	2071      	movs	r0, #113	; 0x71
 800371e:	f002 fc33 	bl	8005f88 <SEGGER_SYSVIEW_RecordU32x2>
				break;
 8003722:	e005      	b.n	8003730 <vQueueAddToRegistry+0x54>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	3301      	adds	r3, #1
 8003728:	60fb      	str	r3, [r7, #12]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2b07      	cmp	r3, #7
 800372e:	d9dd      	bls.n	80036ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003730:	bf00      	nop
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	200027c0 	.word	0x200027c0

0800373c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003744:	2300      	movs	r3, #0
 8003746:	60fb      	str	r3, [r7, #12]
 8003748:	e016      	b.n	8003778 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800374a:	4a0f      	ldr	r2, [pc, #60]	; (8003788 <vQueueUnregisterQueue+0x4c>)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	4413      	add	r3, r2
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	429a      	cmp	r2, r3
 8003758:	d10b      	bne.n	8003772 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800375a:	4a0b      	ldr	r2, [pc, #44]	; (8003788 <vQueueUnregisterQueue+0x4c>)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2100      	movs	r1, #0
 8003760:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003764:	4a08      	ldr	r2, [pc, #32]	; (8003788 <vQueueUnregisterQueue+0x4c>)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	4413      	add	r3, r2
 800376c:	2200      	movs	r2, #0
 800376e:	605a      	str	r2, [r3, #4]
				break;
 8003770:	e005      	b.n	800377e <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	3301      	adds	r3, #1
 8003776:	60fb      	str	r3, [r7, #12]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2b07      	cmp	r3, #7
 800377c:	d9e5      	bls.n	800374a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800377e:	bf00      	nop
 8003780:	3714      	adds	r7, #20
 8003782:	46bd      	mov	sp, r7
 8003784:	bc80      	pop	{r7}
 8003786:	4770      	bx	lr
 8003788:	200027c0 	.word	0x200027c0

0800378c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800379c:	f001 fb54 	bl	8004e48 <vPortEnterCritical>
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037a6:	b25b      	sxtb	r3, r3
 80037a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ac:	d103      	bne.n	80037b6 <vQueueWaitForMessageRestricted+0x2a>
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037bc:	b25b      	sxtb	r3, r3
 80037be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c2:	d103      	bne.n	80037cc <vQueueWaitForMessageRestricted+0x40>
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037cc:	f001 fb6a 	bl	8004ea4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d106      	bne.n	80037e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	3324      	adds	r3, #36	; 0x24
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	68b9      	ldr	r1, [r7, #8]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f000 fc37 	bl	8004054 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80037e6:	6978      	ldr	r0, [r7, #20]
 80037e8:	f7ff fef7 	bl	80035da <prvUnlockQueue>
	}
 80037ec:	bf00      	nop
 80037ee:	3718      	adds	r7, #24
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b08e      	sub	sp, #56	; 0x38
 80037f8:	af04      	add	r7, sp, #16
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
 8003800:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003804:	2b00      	cmp	r3, #0
 8003806:	d109      	bne.n	800381c <xTaskCreateStatic+0x28>
 8003808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800380c:	f383 8811 	msr	BASEPRI, r3
 8003810:	f3bf 8f6f 	isb	sy
 8003814:	f3bf 8f4f 	dsb	sy
 8003818:	623b      	str	r3, [r7, #32]
 800381a:	e7fe      	b.n	800381a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800381c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800381e:	2b00      	cmp	r3, #0
 8003820:	d109      	bne.n	8003836 <xTaskCreateStatic+0x42>
 8003822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003826:	f383 8811 	msr	BASEPRI, r3
 800382a:	f3bf 8f6f 	isb	sy
 800382e:	f3bf 8f4f 	dsb	sy
 8003832:	61fb      	str	r3, [r7, #28]
 8003834:	e7fe      	b.n	8003834 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003836:	235c      	movs	r3, #92	; 0x5c
 8003838:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	2b5c      	cmp	r3, #92	; 0x5c
 800383e:	d009      	beq.n	8003854 <xTaskCreateStatic+0x60>
 8003840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003844:	f383 8811 	msr	BASEPRI, r3
 8003848:	f3bf 8f6f 	isb	sy
 800384c:	f3bf 8f4f 	dsb	sy
 8003850:	61bb      	str	r3, [r7, #24]
 8003852:	e7fe      	b.n	8003852 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003856:	2b00      	cmp	r3, #0
 8003858:	d01e      	beq.n	8003898 <xTaskCreateStatic+0xa4>
 800385a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800385c:	2b00      	cmp	r3, #0
 800385e:	d01b      	beq.n	8003898 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003862:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003866:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003868:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800386a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386c:	2202      	movs	r2, #2
 800386e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003872:	2300      	movs	r3, #0
 8003874:	9303      	str	r3, [sp, #12]
 8003876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003878:	9302      	str	r3, [sp, #8]
 800387a:	f107 0314 	add.w	r3, r7, #20
 800387e:	9301      	str	r3, [sp, #4]
 8003880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	68b9      	ldr	r1, [r7, #8]
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f000 f850 	bl	8003930 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003890:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003892:	f000 f8d3 	bl	8003a3c <prvAddNewTaskToReadyList>
 8003896:	e001      	b.n	800389c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8003898:	2300      	movs	r3, #0
 800389a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800389c:	697b      	ldr	r3, [r7, #20]
	}
 800389e:	4618      	mov	r0, r3
 80038a0:	3728      	adds	r7, #40	; 0x28
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b08c      	sub	sp, #48	; 0x30
 80038aa:	af04      	add	r7, sp, #16
 80038ac:	60f8      	str	r0, [r7, #12]
 80038ae:	60b9      	str	r1, [r7, #8]
 80038b0:	603b      	str	r3, [r7, #0]
 80038b2:	4613      	mov	r3, r2
 80038b4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038b6:	88fb      	ldrh	r3, [r7, #6]
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4618      	mov	r0, r3
 80038bc:	f001 fbba 	bl	8005034 <pvPortMalloc>
 80038c0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00e      	beq.n	80038e6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80038c8:	205c      	movs	r0, #92	; 0x5c
 80038ca:	f001 fbb3 	bl	8005034 <pvPortMalloc>
 80038ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d003      	beq.n	80038de <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	697a      	ldr	r2, [r7, #20]
 80038da:	631a      	str	r2, [r3, #48]	; 0x30
 80038dc:	e005      	b.n	80038ea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80038de:	6978      	ldr	r0, [r7, #20]
 80038e0:	f001 fc6a 	bl	80051b8 <vPortFree>
 80038e4:	e001      	b.n	80038ea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80038e6:	2300      	movs	r3, #0
 80038e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d017      	beq.n	8003920 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80038f8:	88fa      	ldrh	r2, [r7, #6]
 80038fa:	2300      	movs	r3, #0
 80038fc:	9303      	str	r3, [sp, #12]
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	9302      	str	r3, [sp, #8]
 8003902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003904:	9301      	str	r3, [sp, #4]
 8003906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	68b9      	ldr	r1, [r7, #8]
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f000 f80e 	bl	8003930 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003914:	69f8      	ldr	r0, [r7, #28]
 8003916:	f000 f891 	bl	8003a3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800391a:	2301      	movs	r3, #1
 800391c:	61bb      	str	r3, [r7, #24]
 800391e:	e002      	b.n	8003926 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003920:	f04f 33ff 	mov.w	r3, #4294967295
 8003924:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003926:	69bb      	ldr	r3, [r7, #24]
	}
 8003928:	4618      	mov	r0, r3
 800392a:	3720      	adds	r7, #32
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b088      	sub	sp, #32
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
 800393c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800393e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003940:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	461a      	mov	r2, r3
 8003948:	21a5      	movs	r1, #165	; 0xa5
 800394a:	f003 f9ad 	bl	8006ca8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800394e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003950:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003958:	3b01      	subs	r3, #1
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	4413      	add	r3, r2
 800395e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	f023 0307 	bic.w	r3, r3, #7
 8003966:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	f003 0307 	and.w	r3, r3, #7
 800396e:	2b00      	cmp	r3, #0
 8003970:	d009      	beq.n	8003986 <prvInitialiseNewTask+0x56>
 8003972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003976:	f383 8811 	msr	BASEPRI, r3
 800397a:	f3bf 8f6f 	isb	sy
 800397e:	f3bf 8f4f 	dsb	sy
 8003982:	617b      	str	r3, [r7, #20]
 8003984:	e7fe      	b.n	8003984 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003986:	2300      	movs	r3, #0
 8003988:	61fb      	str	r3, [r7, #28]
 800398a:	e012      	b.n	80039b2 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	4413      	add	r3, r2
 8003992:	7819      	ldrb	r1, [r3, #0]
 8003994:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	4413      	add	r3, r2
 800399a:	3334      	adds	r3, #52	; 0x34
 800399c:	460a      	mov	r2, r1
 800399e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80039a0:	68ba      	ldr	r2, [r7, #8]
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	4413      	add	r3, r2
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d006      	beq.n	80039ba <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	3301      	adds	r3, #1
 80039b0:	61fb      	str	r3, [r7, #28]
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	2b0f      	cmp	r3, #15
 80039b6:	d9e9      	bls.n	800398c <prvInitialiseNewTask+0x5c>
 80039b8:	e000      	b.n	80039bc <prvInitialiseNewTask+0x8c>
		{
			break;
 80039ba:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80039bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80039c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c6:	2b37      	cmp	r3, #55	; 0x37
 80039c8:	d901      	bls.n	80039ce <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80039ca:	2337      	movs	r3, #55	; 0x37
 80039cc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80039ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039d2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80039d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039d8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80039da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039dc:	2200      	movs	r2, #0
 80039de:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80039e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e2:	3304      	adds	r3, #4
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7ff f85a 	bl	8002a9e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80039ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ec:	3318      	adds	r3, #24
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7ff f855 	bl	8002a9e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80039f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039f8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a02:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a08:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	68f9      	ldr	r1, [r7, #12]
 8003a1c:	69b8      	ldr	r0, [r7, #24]
 8003a1e:	f001 f927 	bl	8004c70 <pxPortInitialiseStack>
 8003a22:	4602      	mov	r2, r0
 8003a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a26:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d002      	beq.n	8003a34 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a32:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a34:	bf00      	nop
 8003a36:	3720      	adds	r7, #32
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003a3c:	b5b0      	push	{r4, r5, r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af02      	add	r7, sp, #8
 8003a42:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003a44:	f001 fa00 	bl	8004e48 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003a48:	4b35      	ldr	r3, [pc, #212]	; (8003b20 <prvAddNewTaskToReadyList+0xe4>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	4a34      	ldr	r2, [pc, #208]	; (8003b20 <prvAddNewTaskToReadyList+0xe4>)
 8003a50:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003a52:	4b34      	ldr	r3, [pc, #208]	; (8003b24 <prvAddNewTaskToReadyList+0xe8>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d109      	bne.n	8003a6e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003a5a:	4a32      	ldr	r2, [pc, #200]	; (8003b24 <prvAddNewTaskToReadyList+0xe8>)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a60:	4b2f      	ldr	r3, [pc, #188]	; (8003b20 <prvAddNewTaskToReadyList+0xe4>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d110      	bne.n	8003a8a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003a68:	f000 fc1c 	bl	80042a4 <prvInitialiseTaskLists>
 8003a6c:	e00d      	b.n	8003a8a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003a6e:	4b2e      	ldr	r3, [pc, #184]	; (8003b28 <prvAddNewTaskToReadyList+0xec>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d109      	bne.n	8003a8a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003a76:	4b2b      	ldr	r3, [pc, #172]	; (8003b24 <prvAddNewTaskToReadyList+0xe8>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d802      	bhi.n	8003a8a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003a84:	4a27      	ldr	r2, [pc, #156]	; (8003b24 <prvAddNewTaskToReadyList+0xe8>)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003a8a:	4b28      	ldr	r3, [pc, #160]	; (8003b2c <prvAddNewTaskToReadyList+0xf0>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	3301      	adds	r3, #1
 8003a90:	4a26      	ldr	r2, [pc, #152]	; (8003b2c <prvAddNewTaskToReadyList+0xf0>)
 8003a92:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003a94:	4b25      	ldr	r3, [pc, #148]	; (8003b2c <prvAddNewTaskToReadyList+0xf0>)
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d016      	beq.n	8003ad0 <prvAddNewTaskToReadyList+0x94>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f002 feb3 	bl	8006810 <SEGGER_SYSVIEW_OnTaskCreate>
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aba:	461d      	mov	r5, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	461c      	mov	r4, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac6:	1ae3      	subs	r3, r4, r3
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	462b      	mov	r3, r5
 8003acc:	f001 fd42 	bl	8005554 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f002 ff20 	bl	8006918 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003adc:	4b14      	ldr	r3, [pc, #80]	; (8003b30 <prvAddNewTaskToReadyList+0xf4>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d903      	bls.n	8003aec <prvAddNewTaskToReadyList+0xb0>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae8:	4a11      	ldr	r2, [pc, #68]	; (8003b30 <prvAddNewTaskToReadyList+0xf4>)
 8003aea:	6013      	str	r3, [r2, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af0:	4613      	mov	r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4413      	add	r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	4a0e      	ldr	r2, [pc, #56]	; (8003b34 <prvAddNewTaskToReadyList+0xf8>)
 8003afa:	441a      	add	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	3304      	adds	r3, #4
 8003b00:	4619      	mov	r1, r3
 8003b02:	4610      	mov	r0, r2
 8003b04:	f7fe ffd7 	bl	8002ab6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003b08:	f001 f9cc 	bl	8004ea4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003b0c:	4b06      	ldr	r3, [pc, #24]	; (8003b28 <prvAddNewTaskToReadyList+0xec>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <prvAddNewTaskToReadyList+0xdc>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b14:	4b03      	ldr	r3, [pc, #12]	; (8003b24 <prvAddNewTaskToReadyList+0xe8>)
 8003b16:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b18:	bf00      	nop
 8003b1a:	3708      	adds	r7, #8
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bdb0      	pop	{r4, r5, r7, pc}
 8003b20:	20000bbc 	.word	0x20000bbc
 8003b24:	200006e8 	.word	0x200006e8
 8003b28:	20000bc8 	.word	0x20000bc8
 8003b2c:	20000bd8 	.word	0x20000bd8
 8003b30:	20000bc4 	.word	0x20000bc4
 8003b34:	200006ec 	.word	0x200006ec

08003b38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003b40:	2300      	movs	r3, #0
 8003b42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d01a      	beq.n	8003b80 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003b4a:	4b15      	ldr	r3, [pc, #84]	; (8003ba0 <vTaskDelay+0x68>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d009      	beq.n	8003b66 <vTaskDelay+0x2e>
 8003b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b56:	f383 8811 	msr	BASEPRI, r3
 8003b5a:	f3bf 8f6f 	isb	sy
 8003b5e:	f3bf 8f4f 	dsb	sy
 8003b62:	60bb      	str	r3, [r7, #8]
 8003b64:	e7fe      	b.n	8003b64 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003b66:	f000 f883 	bl	8003c70 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8003b6a:	6879      	ldr	r1, [r7, #4]
 8003b6c:	2023      	movs	r0, #35	; 0x23
 8003b6e:	f002 f9cf 	bl	8005f10 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003b72:	2100      	movs	r1, #0
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 fd1d 	bl	80045b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003b7a:	f000 f887 	bl	8003c8c <xTaskResumeAll>
 8003b7e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d107      	bne.n	8003b96 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8003b86:	4b07      	ldr	r3, [pc, #28]	; (8003ba4 <vTaskDelay+0x6c>)
 8003b88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b8c:	601a      	str	r2, [r3, #0]
 8003b8e:	f3bf 8f4f 	dsb	sy
 8003b92:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003b96:	bf00      	nop
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	20000be4 	.word	0x20000be4
 8003ba4:	e000ed04 	.word	0xe000ed04

08003ba8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b08a      	sub	sp, #40	; 0x28
 8003bac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003bb6:	463a      	mov	r2, r7
 8003bb8:	1d39      	adds	r1, r7, #4
 8003bba:	f107 0308 	add.w	r3, r7, #8
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7fe ff1c 	bl	80029fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003bc4:	6839      	ldr	r1, [r7, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68ba      	ldr	r2, [r7, #8]
 8003bca:	9202      	str	r2, [sp, #8]
 8003bcc:	9301      	str	r3, [sp, #4]
 8003bce:	2300      	movs	r3, #0
 8003bd0:	9300      	str	r3, [sp, #0]
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	460a      	mov	r2, r1
 8003bd6:	4920      	ldr	r1, [pc, #128]	; (8003c58 <vTaskStartScheduler+0xb0>)
 8003bd8:	4820      	ldr	r0, [pc, #128]	; (8003c5c <vTaskStartScheduler+0xb4>)
 8003bda:	f7ff fe0b 	bl	80037f4 <xTaskCreateStatic>
 8003bde:	4602      	mov	r2, r0
 8003be0:	4b1f      	ldr	r3, [pc, #124]	; (8003c60 <vTaskStartScheduler+0xb8>)
 8003be2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003be4:	4b1e      	ldr	r3, [pc, #120]	; (8003c60 <vTaskStartScheduler+0xb8>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d002      	beq.n	8003bf2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003bec:	2301      	movs	r3, #1
 8003bee:	617b      	str	r3, [r7, #20]
 8003bf0:	e001      	b.n	8003bf6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d102      	bne.n	8003c02 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003bfc:	f000 fd2e 	bl	800465c <xTimerCreateTimerTask>
 8003c00:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d115      	bne.n	8003c34 <vTaskStartScheduler+0x8c>
 8003c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c0c:	f383 8811 	msr	BASEPRI, r3
 8003c10:	f3bf 8f6f 	isb	sy
 8003c14:	f3bf 8f4f 	dsb	sy
 8003c18:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003c1a:	4b12      	ldr	r3, [pc, #72]	; (8003c64 <vTaskStartScheduler+0xbc>)
 8003c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c20:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003c22:	4b11      	ldr	r3, [pc, #68]	; (8003c68 <vTaskStartScheduler+0xc0>)
 8003c24:	2201      	movs	r2, #1
 8003c26:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003c28:	4b10      	ldr	r3, [pc, #64]	; (8003c6c <vTaskStartScheduler+0xc4>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003c2e:	f001 f89b 	bl	8004d68 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003c32:	e00d      	b.n	8003c50 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c3a:	d109      	bne.n	8003c50 <vTaskStartScheduler+0xa8>
 8003c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c40:	f383 8811 	msr	BASEPRI, r3
 8003c44:	f3bf 8f6f 	isb	sy
 8003c48:	f3bf 8f4f 	dsb	sy
 8003c4c:	60fb      	str	r3, [r7, #12]
 8003c4e:	e7fe      	b.n	8003c4e <vTaskStartScheduler+0xa6>
}
 8003c50:	bf00      	nop
 8003c52:	3718      	adds	r7, #24
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	08006d08 	.word	0x08006d08
 8003c5c:	08004281 	.word	0x08004281
 8003c60:	20000be0 	.word	0x20000be0
 8003c64:	20000bdc 	.word	0x20000bdc
 8003c68:	20000bc8 	.word	0x20000bc8
 8003c6c:	20000bc0 	.word	0x20000bc0

08003c70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c70:	b480      	push	{r7}
 8003c72:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003c74:	4b04      	ldr	r3, [pc, #16]	; (8003c88 <vTaskSuspendAll+0x18>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	4a03      	ldr	r2, [pc, #12]	; (8003c88 <vTaskSuspendAll+0x18>)
 8003c7c:	6013      	str	r3, [r2, #0]
}
 8003c7e:	bf00      	nop
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bc80      	pop	{r7}
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	20000be4 	.word	0x20000be4

08003c8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003c92:	2300      	movs	r3, #0
 8003c94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c96:	2300      	movs	r3, #0
 8003c98:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c9a:	4b3d      	ldr	r3, [pc, #244]	; (8003d90 <xTaskResumeAll+0x104>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d109      	bne.n	8003cb6 <xTaskResumeAll+0x2a>
 8003ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca6:	f383 8811 	msr	BASEPRI, r3
 8003caa:	f3bf 8f6f 	isb	sy
 8003cae:	f3bf 8f4f 	dsb	sy
 8003cb2:	603b      	str	r3, [r7, #0]
 8003cb4:	e7fe      	b.n	8003cb4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003cb6:	f001 f8c7 	bl	8004e48 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003cba:	4b35      	ldr	r3, [pc, #212]	; (8003d90 <xTaskResumeAll+0x104>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	4a33      	ldr	r2, [pc, #204]	; (8003d90 <xTaskResumeAll+0x104>)
 8003cc2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cc4:	4b32      	ldr	r3, [pc, #200]	; (8003d90 <xTaskResumeAll+0x104>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d15a      	bne.n	8003d82 <xTaskResumeAll+0xf6>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ccc:	4b31      	ldr	r3, [pc, #196]	; (8003d94 <xTaskResumeAll+0x108>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d056      	beq.n	8003d82 <xTaskResumeAll+0xf6>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cd4:	e033      	b.n	8003d3e <xTaskResumeAll+0xb2>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003cd6:	4b30      	ldr	r3, [pc, #192]	; (8003d98 <xTaskResumeAll+0x10c>)
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	3318      	adds	r3, #24
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7fe ff42 	bl	8002b6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	3304      	adds	r3, #4
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7fe ff3d 	bl	8002b6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f002 fe0f 	bl	8006918 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cfe:	4b27      	ldr	r3, [pc, #156]	; (8003d9c <xTaskResumeAll+0x110>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d903      	bls.n	8003d0e <xTaskResumeAll+0x82>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0a:	4a24      	ldr	r2, [pc, #144]	; (8003d9c <xTaskResumeAll+0x110>)
 8003d0c:	6013      	str	r3, [r2, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d12:	4613      	mov	r3, r2
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	4413      	add	r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	4a21      	ldr	r2, [pc, #132]	; (8003da0 <xTaskResumeAll+0x114>)
 8003d1c:	441a      	add	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	3304      	adds	r3, #4
 8003d22:	4619      	mov	r1, r3
 8003d24:	4610      	mov	r0, r2
 8003d26:	f7fe fec6 	bl	8002ab6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d2e:	4b1d      	ldr	r3, [pc, #116]	; (8003da4 <xTaskResumeAll+0x118>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d302      	bcc.n	8003d3e <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8003d38:	4b1b      	ldr	r3, [pc, #108]	; (8003da8 <xTaskResumeAll+0x11c>)
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d3e:	4b16      	ldr	r3, [pc, #88]	; (8003d98 <xTaskResumeAll+0x10c>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1c7      	bne.n	8003cd6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003d4c:	f000 fb7c 	bl	8004448 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003d50:	4b16      	ldr	r3, [pc, #88]	; (8003dac <xTaskResumeAll+0x120>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	60bb      	str	r3, [r7, #8]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d010      	beq.n	8003d7e <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003d5c:	f000 f848 	bl	8003df0 <xTaskIncrementTick>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d002      	beq.n	8003d6c <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8003d66:	4b10      	ldr	r3, [pc, #64]	; (8003da8 <xTaskResumeAll+0x11c>)
 8003d68:	2201      	movs	r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	60bb      	str	r3, [r7, #8]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d1f1      	bne.n	8003d5c <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8003d78:	4b0c      	ldr	r3, [pc, #48]	; (8003dac <xTaskResumeAll+0x120>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003d7e:	4b0a      	ldr	r3, [pc, #40]	; (8003da8 <xTaskResumeAll+0x11c>)
 8003d80:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d82:	f001 f88f 	bl	8004ea4 <vPortExitCritical>

	return xAlreadyYielded;
 8003d86:	687b      	ldr	r3, [r7, #4]
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	20000be4 	.word	0x20000be4
 8003d94:	20000bbc 	.word	0x20000bbc
 8003d98:	20000b7c 	.word	0x20000b7c
 8003d9c:	20000bc4 	.word	0x20000bc4
 8003da0:	200006ec 	.word	0x200006ec
 8003da4:	200006e8 	.word	0x200006e8
 8003da8:	20000bd0 	.word	0x20000bd0
 8003dac:	20000bcc 	.word	0x20000bcc

08003db0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003db6:	4b04      	ldr	r3, [pc, #16]	; (8003dc8 <xTaskGetTickCount+0x18>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003dbc:	687b      	ldr	r3, [r7, #4]
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bc80      	pop	{r7}
 8003dc6:	4770      	bx	lr
 8003dc8:	20000bc0 	.word	0x20000bc0

08003dcc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003dd2:	f001 f8f3 	bl	8004fbc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8003dda:	4b04      	ldr	r3, [pc, #16]	; (8003dec <xTaskGetTickCountFromISR+0x20>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003de0:	683b      	ldr	r3, [r7, #0]
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	20000bc0 	.word	0x20000bc0

08003df0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003df6:	2300      	movs	r3, #0
 8003df8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dfa:	4b43      	ldr	r3, [pc, #268]	; (8003f08 <xTaskIncrementTick+0x118>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d178      	bne.n	8003ef4 <xTaskIncrementTick+0x104>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003e02:	4b42      	ldr	r3, [pc, #264]	; (8003f0c <xTaskIncrementTick+0x11c>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	3301      	adds	r3, #1
 8003e08:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003e0a:	4a40      	ldr	r2, [pc, #256]	; (8003f0c <xTaskIncrementTick+0x11c>)
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d11f      	bne.n	8003e56 <xTaskIncrementTick+0x66>
		{
			taskSWITCH_DELAYED_LISTS();
 8003e16:	4b3e      	ldr	r3, [pc, #248]	; (8003f10 <xTaskIncrementTick+0x120>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d009      	beq.n	8003e34 <xTaskIncrementTick+0x44>
 8003e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e24:	f383 8811 	msr	BASEPRI, r3
 8003e28:	f3bf 8f6f 	isb	sy
 8003e2c:	f3bf 8f4f 	dsb	sy
 8003e30:	603b      	str	r3, [r7, #0]
 8003e32:	e7fe      	b.n	8003e32 <xTaskIncrementTick+0x42>
 8003e34:	4b36      	ldr	r3, [pc, #216]	; (8003f10 <xTaskIncrementTick+0x120>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	60fb      	str	r3, [r7, #12]
 8003e3a:	4b36      	ldr	r3, [pc, #216]	; (8003f14 <xTaskIncrementTick+0x124>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a34      	ldr	r2, [pc, #208]	; (8003f10 <xTaskIncrementTick+0x120>)
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	4a34      	ldr	r2, [pc, #208]	; (8003f14 <xTaskIncrementTick+0x124>)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6013      	str	r3, [r2, #0]
 8003e48:	4b33      	ldr	r3, [pc, #204]	; (8003f18 <xTaskIncrementTick+0x128>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	4a32      	ldr	r2, [pc, #200]	; (8003f18 <xTaskIncrementTick+0x128>)
 8003e50:	6013      	str	r3, [r2, #0]
 8003e52:	f000 faf9 	bl	8004448 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003e56:	4b31      	ldr	r3, [pc, #196]	; (8003f1c <xTaskIncrementTick+0x12c>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d34e      	bcc.n	8003efe <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e60:	4b2b      	ldr	r3, [pc, #172]	; (8003f10 <xTaskIncrementTick+0x120>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d101      	bne.n	8003e6e <xTaskIncrementTick+0x7e>
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e000      	b.n	8003e70 <xTaskIncrementTick+0x80>
 8003e6e:	2300      	movs	r3, #0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d004      	beq.n	8003e7e <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e74:	4b29      	ldr	r3, [pc, #164]	; (8003f1c <xTaskIncrementTick+0x12c>)
 8003e76:	f04f 32ff 	mov.w	r2, #4294967295
 8003e7a:	601a      	str	r2, [r3, #0]
					break;
 8003e7c:	e03f      	b.n	8003efe <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003e7e:	4b24      	ldr	r3, [pc, #144]	; (8003f10 <xTaskIncrementTick+0x120>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d203      	bcs.n	8003e9e <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003e96:	4a21      	ldr	r2, [pc, #132]	; (8003f1c <xTaskIncrementTick+0x12c>)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6013      	str	r3, [r2, #0]
						break;
 8003e9c:	e02f      	b.n	8003efe <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7fe fe62 	bl	8002b6c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d004      	beq.n	8003eba <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	3318      	adds	r3, #24
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7fe fe59 	bl	8002b6c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f002 fd2b 	bl	8006918 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec6:	4b16      	ldr	r3, [pc, #88]	; (8003f20 <xTaskIncrementTick+0x130>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d903      	bls.n	8003ed6 <xTaskIncrementTick+0xe6>
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed2:	4a13      	ldr	r2, [pc, #76]	; (8003f20 <xTaskIncrementTick+0x130>)
 8003ed4:	6013      	str	r3, [r2, #0]
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eda:	4613      	mov	r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	4413      	add	r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	4a10      	ldr	r2, [pc, #64]	; (8003f24 <xTaskIncrementTick+0x134>)
 8003ee4:	441a      	add	r2, r3
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	3304      	adds	r3, #4
 8003eea:	4619      	mov	r1, r3
 8003eec:	4610      	mov	r0, r2
 8003eee:	f7fe fde2 	bl	8002ab6 <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ef2:	e7b5      	b.n	8003e60 <xTaskIncrementTick+0x70>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003ef4:	4b0c      	ldr	r3, [pc, #48]	; (8003f28 <xTaskIncrementTick+0x138>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	4a0b      	ldr	r2, [pc, #44]	; (8003f28 <xTaskIncrementTick+0x138>)
 8003efc:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003efe:	697b      	ldr	r3, [r7, #20]
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3718      	adds	r7, #24
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	20000be4 	.word	0x20000be4
 8003f0c:	20000bc0 	.word	0x20000bc0
 8003f10:	20000b74 	.word	0x20000b74
 8003f14:	20000b78 	.word	0x20000b78
 8003f18:	20000bd4 	.word	0x20000bd4
 8003f1c:	20000bdc 	.word	0x20000bdc
 8003f20:	20000bc4 	.word	0x20000bc4
 8003f24:	200006ec 	.word	0x200006ec
 8003f28:	20000bcc 	.word	0x20000bcc

08003f2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f32:	4b30      	ldr	r3, [pc, #192]	; (8003ff4 <vTaskSwitchContext+0xc8>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d003      	beq.n	8003f42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003f3a:	4b2f      	ldr	r3, [pc, #188]	; (8003ff8 <vTaskSwitchContext+0xcc>)
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003f40:	e053      	b.n	8003fea <vTaskSwitchContext+0xbe>
		xYieldPending = pdFALSE;
 8003f42:	4b2d      	ldr	r3, [pc, #180]	; (8003ff8 <vTaskSwitchContext+0xcc>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003f48:	4b2c      	ldr	r3, [pc, #176]	; (8003ffc <vTaskSwitchContext+0xd0>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	60fb      	str	r3, [r7, #12]
 8003f4e:	e00f      	b.n	8003f70 <vTaskSwitchContext+0x44>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d109      	bne.n	8003f6a <vTaskSwitchContext+0x3e>
 8003f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f5a:	f383 8811 	msr	BASEPRI, r3
 8003f5e:	f3bf 8f6f 	isb	sy
 8003f62:	f3bf 8f4f 	dsb	sy
 8003f66:	607b      	str	r3, [r7, #4]
 8003f68:	e7fe      	b.n	8003f68 <vTaskSwitchContext+0x3c>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	60fb      	str	r3, [r7, #12]
 8003f70:	4923      	ldr	r1, [pc, #140]	; (8004000 <vTaskSwitchContext+0xd4>)
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	4613      	mov	r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	4413      	add	r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	440b      	add	r3, r1
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d0e5      	beq.n	8003f50 <vTaskSwitchContext+0x24>
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	4613      	mov	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4413      	add	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	4a1c      	ldr	r2, [pc, #112]	; (8004000 <vTaskSwitchContext+0xd4>)
 8003f90:	4413      	add	r3, r2
 8003f92:	60bb      	str	r3, [r7, #8]
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	605a      	str	r2, [r3, #4]
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	3308      	adds	r3, #8
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d104      	bne.n	8003fb4 <vTaskSwitchContext+0x88>
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	605a      	str	r2, [r3, #4]
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	4a12      	ldr	r2, [pc, #72]	; (8004004 <vTaskSwitchContext+0xd8>)
 8003fbc:	6013      	str	r3, [r2, #0]
 8003fbe:	4a0f      	ldr	r2, [pc, #60]	; (8003ffc <vTaskSwitchContext+0xd0>)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8003fc4:	4b0f      	ldr	r3, [pc, #60]	; (8004004 <vTaskSwitchContext+0xd8>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	3334      	adds	r3, #52	; 0x34
 8003fca:	2205      	movs	r2, #5
 8003fcc:	490e      	ldr	r1, [pc, #56]	; (8004008 <vTaskSwitchContext+0xdc>)
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f002 fe50 	bl	8006c74 <memcmp>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d005      	beq.n	8003fe6 <vTaskSwitchContext+0xba>
 8003fda:	4b0a      	ldr	r3, [pc, #40]	; (8004004 <vTaskSwitchContext+0xd8>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f002 fc58 	bl	8006894 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003fe4:	e001      	b.n	8003fea <vTaskSwitchContext+0xbe>
		traceTASK_SWITCHED_IN();
 8003fe6:	f002 fbf7 	bl	80067d8 <SEGGER_SYSVIEW_OnIdle>
}
 8003fea:	bf00      	nop
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	20000be4 	.word	0x20000be4
 8003ff8:	20000bd0 	.word	0x20000bd0
 8003ffc:	20000bc4 	.word	0x20000bc4
 8004000:	200006ec 	.word	0x200006ec
 8004004:	200006e8 	.word	0x200006e8
 8004008:	08006d08 	.word	0x08006d08

0800400c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d109      	bne.n	8004030 <vTaskPlaceOnEventList+0x24>
 800401c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004020:	f383 8811 	msr	BASEPRI, r3
 8004024:	f3bf 8f6f 	isb	sy
 8004028:	f3bf 8f4f 	dsb	sy
 800402c:	60fb      	str	r3, [r7, #12]
 800402e:	e7fe      	b.n	800402e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004030:	4b07      	ldr	r3, [pc, #28]	; (8004050 <vTaskPlaceOnEventList+0x44>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	3318      	adds	r3, #24
 8004036:	4619      	mov	r1, r3
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f7fe fd5f 	bl	8002afc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800403e:	2101      	movs	r1, #1
 8004040:	6838      	ldr	r0, [r7, #0]
 8004042:	f000 fab7 	bl	80045b4 <prvAddCurrentTaskToDelayedList>
}
 8004046:	bf00      	nop
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	200006e8 	.word	0x200006e8

08004054 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004054:	b580      	push	{r7, lr}
 8004056:	b086      	sub	sp, #24
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d109      	bne.n	800407a <vTaskPlaceOnEventListRestricted+0x26>
 8004066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406a:	f383 8811 	msr	BASEPRI, r3
 800406e:	f3bf 8f6f 	isb	sy
 8004072:	f3bf 8f4f 	dsb	sy
 8004076:	617b      	str	r3, [r7, #20]
 8004078:	e7fe      	b.n	8004078 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800407a:	4b0c      	ldr	r3, [pc, #48]	; (80040ac <vTaskPlaceOnEventListRestricted+0x58>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	3318      	adds	r3, #24
 8004080:	4619      	mov	r1, r3
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f7fe fd17 	bl	8002ab6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d002      	beq.n	8004094 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800408e:	f04f 33ff 	mov.w	r3, #4294967295
 8004092:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8004094:	2024      	movs	r0, #36	; 0x24
 8004096:	f001 ff1d 	bl	8005ed4 <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800409a:	6879      	ldr	r1, [r7, #4]
 800409c:	68b8      	ldr	r0, [r7, #8]
 800409e:	f000 fa89 	bl	80045b4 <prvAddCurrentTaskToDelayedList>
	}
 80040a2:	bf00      	nop
 80040a4:	3718      	adds	r7, #24
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	200006e8 	.word	0x200006e8

080040b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d109      	bne.n	80040da <xTaskRemoveFromEventList+0x2a>
 80040c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ca:	f383 8811 	msr	BASEPRI, r3
 80040ce:	f3bf 8f6f 	isb	sy
 80040d2:	f3bf 8f4f 	dsb	sy
 80040d6:	60fb      	str	r3, [r7, #12]
 80040d8:	e7fe      	b.n	80040d8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	3318      	adds	r3, #24
 80040de:	4618      	mov	r0, r3
 80040e0:	f7fe fd44 	bl	8002b6c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040e4:	4b1f      	ldr	r3, [pc, #124]	; (8004164 <xTaskRemoveFromEventList+0xb4>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d121      	bne.n	8004130 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	3304      	adds	r3, #4
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7fe fd3b 	bl	8002b6c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f002 fc0d 	bl	8006918 <SEGGER_SYSVIEW_OnTaskStartReady>
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004102:	4b19      	ldr	r3, [pc, #100]	; (8004168 <xTaskRemoveFromEventList+0xb8>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	429a      	cmp	r2, r3
 8004108:	d903      	bls.n	8004112 <xTaskRemoveFromEventList+0x62>
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410e:	4a16      	ldr	r2, [pc, #88]	; (8004168 <xTaskRemoveFromEventList+0xb8>)
 8004110:	6013      	str	r3, [r2, #0]
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004116:	4613      	mov	r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	4413      	add	r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	4a13      	ldr	r2, [pc, #76]	; (800416c <xTaskRemoveFromEventList+0xbc>)
 8004120:	441a      	add	r2, r3
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	3304      	adds	r3, #4
 8004126:	4619      	mov	r1, r3
 8004128:	4610      	mov	r0, r2
 800412a:	f7fe fcc4 	bl	8002ab6 <vListInsertEnd>
 800412e:	e005      	b.n	800413c <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	3318      	adds	r3, #24
 8004134:	4619      	mov	r1, r3
 8004136:	480e      	ldr	r0, [pc, #56]	; (8004170 <xTaskRemoveFromEventList+0xc0>)
 8004138:	f7fe fcbd 	bl	8002ab6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004140:	4b0c      	ldr	r3, [pc, #48]	; (8004174 <xTaskRemoveFromEventList+0xc4>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004146:	429a      	cmp	r2, r3
 8004148:	d905      	bls.n	8004156 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800414a:	2301      	movs	r3, #1
 800414c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800414e:	4b0a      	ldr	r3, [pc, #40]	; (8004178 <xTaskRemoveFromEventList+0xc8>)
 8004150:	2201      	movs	r2, #1
 8004152:	601a      	str	r2, [r3, #0]
 8004154:	e001      	b.n	800415a <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8004156:	2300      	movs	r3, #0
 8004158:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800415a:	697b      	ldr	r3, [r7, #20]
}
 800415c:	4618      	mov	r0, r3
 800415e:	3718      	adds	r7, #24
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	20000be4 	.word	0x20000be4
 8004168:	20000bc4 	.word	0x20000bc4
 800416c:	200006ec 	.word	0x200006ec
 8004170:	20000b7c 	.word	0x20000b7c
 8004174:	200006e8 	.word	0x200006e8
 8004178:	20000bd0 	.word	0x20000bd0

0800417c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004184:	4b06      	ldr	r3, [pc, #24]	; (80041a0 <vTaskInternalSetTimeOutState+0x24>)
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800418c:	4b05      	ldr	r3, [pc, #20]	; (80041a4 <vTaskInternalSetTimeOutState+0x28>)
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	605a      	str	r2, [r3, #4]
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	bc80      	pop	{r7}
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	20000bd4 	.word	0x20000bd4
 80041a4:	20000bc0 	.word	0x20000bc0

080041a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b088      	sub	sp, #32
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d109      	bne.n	80041cc <xTaskCheckForTimeOut+0x24>
 80041b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041bc:	f383 8811 	msr	BASEPRI, r3
 80041c0:	f3bf 8f6f 	isb	sy
 80041c4:	f3bf 8f4f 	dsb	sy
 80041c8:	613b      	str	r3, [r7, #16]
 80041ca:	e7fe      	b.n	80041ca <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d109      	bne.n	80041e6 <xTaskCheckForTimeOut+0x3e>
 80041d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d6:	f383 8811 	msr	BASEPRI, r3
 80041da:	f3bf 8f6f 	isb	sy
 80041de:	f3bf 8f4f 	dsb	sy
 80041e2:	60fb      	str	r3, [r7, #12]
 80041e4:	e7fe      	b.n	80041e4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80041e6:	f000 fe2f 	bl	8004e48 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80041ea:	4b1d      	ldr	r3, [pc, #116]	; (8004260 <xTaskCheckForTimeOut+0xb8>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	69ba      	ldr	r2, [r7, #24]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004202:	d102      	bne.n	800420a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004204:	2300      	movs	r3, #0
 8004206:	61fb      	str	r3, [r7, #28]
 8004208:	e023      	b.n	8004252 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	4b15      	ldr	r3, [pc, #84]	; (8004264 <xTaskCheckForTimeOut+0xbc>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	429a      	cmp	r2, r3
 8004214:	d007      	beq.n	8004226 <xTaskCheckForTimeOut+0x7e>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	429a      	cmp	r2, r3
 800421e:	d302      	bcc.n	8004226 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004220:	2301      	movs	r3, #1
 8004222:	61fb      	str	r3, [r7, #28]
 8004224:	e015      	b.n	8004252 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	429a      	cmp	r2, r3
 800422e:	d20b      	bcs.n	8004248 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	1ad2      	subs	r2, r2, r3
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f7ff ff9d 	bl	800417c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004242:	2300      	movs	r3, #0
 8004244:	61fb      	str	r3, [r7, #28]
 8004246:	e004      	b.n	8004252 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	2200      	movs	r2, #0
 800424c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800424e:	2301      	movs	r3, #1
 8004250:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004252:	f000 fe27 	bl	8004ea4 <vPortExitCritical>

	return xReturn;
 8004256:	69fb      	ldr	r3, [r7, #28]
}
 8004258:	4618      	mov	r0, r3
 800425a:	3720      	adds	r7, #32
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	20000bc0 	.word	0x20000bc0
 8004264:	20000bd4 	.word	0x20000bd4

08004268 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800426c:	4b03      	ldr	r3, [pc, #12]	; (800427c <vTaskMissedYield+0x14>)
 800426e:	2201      	movs	r2, #1
 8004270:	601a      	str	r2, [r3, #0]
}
 8004272:	bf00      	nop
 8004274:	46bd      	mov	sp, r7
 8004276:	bc80      	pop	{r7}
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	20000bd0 	.word	0x20000bd0

08004280 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004288:	f000 f84c 	bl	8004324 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 800428c:	4b04      	ldr	r3, [pc, #16]	; (80042a0 <prvIdleTask+0x20>)
 800428e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004292:	601a      	str	r2, [r3, #0]
 8004294:	f3bf 8f4f 	dsb	sy
 8004298:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800429c:	e7f4      	b.n	8004288 <prvIdleTask+0x8>
 800429e:	bf00      	nop
 80042a0:	e000ed04 	.word	0xe000ed04

080042a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042aa:	2300      	movs	r3, #0
 80042ac:	607b      	str	r3, [r7, #4]
 80042ae:	e00c      	b.n	80042ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	4613      	mov	r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	4413      	add	r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	4a12      	ldr	r2, [pc, #72]	; (8004304 <prvInitialiseTaskLists+0x60>)
 80042bc:	4413      	add	r3, r2
 80042be:	4618      	mov	r0, r3
 80042c0:	f7fe fbce 	bl	8002a60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	3301      	adds	r3, #1
 80042c8:	607b      	str	r3, [r7, #4]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2b37      	cmp	r3, #55	; 0x37
 80042ce:	d9ef      	bls.n	80042b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80042d0:	480d      	ldr	r0, [pc, #52]	; (8004308 <prvInitialiseTaskLists+0x64>)
 80042d2:	f7fe fbc5 	bl	8002a60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80042d6:	480d      	ldr	r0, [pc, #52]	; (800430c <prvInitialiseTaskLists+0x68>)
 80042d8:	f7fe fbc2 	bl	8002a60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80042dc:	480c      	ldr	r0, [pc, #48]	; (8004310 <prvInitialiseTaskLists+0x6c>)
 80042de:	f7fe fbbf 	bl	8002a60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80042e2:	480c      	ldr	r0, [pc, #48]	; (8004314 <prvInitialiseTaskLists+0x70>)
 80042e4:	f7fe fbbc 	bl	8002a60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80042e8:	480b      	ldr	r0, [pc, #44]	; (8004318 <prvInitialiseTaskLists+0x74>)
 80042ea:	f7fe fbb9 	bl	8002a60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80042ee:	4b0b      	ldr	r3, [pc, #44]	; (800431c <prvInitialiseTaskLists+0x78>)
 80042f0:	4a05      	ldr	r2, [pc, #20]	; (8004308 <prvInitialiseTaskLists+0x64>)
 80042f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80042f4:	4b0a      	ldr	r3, [pc, #40]	; (8004320 <prvInitialiseTaskLists+0x7c>)
 80042f6:	4a05      	ldr	r2, [pc, #20]	; (800430c <prvInitialiseTaskLists+0x68>)
 80042f8:	601a      	str	r2, [r3, #0]
}
 80042fa:	bf00      	nop
 80042fc:	3708      	adds	r7, #8
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	200006ec 	.word	0x200006ec
 8004308:	20000b4c 	.word	0x20000b4c
 800430c:	20000b60 	.word	0x20000b60
 8004310:	20000b7c 	.word	0x20000b7c
 8004314:	20000b90 	.word	0x20000b90
 8004318:	20000ba8 	.word	0x20000ba8
 800431c:	20000b74 	.word	0x20000b74
 8004320:	20000b78 	.word	0x20000b78

08004324 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800432a:	e019      	b.n	8004360 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800432c:	f000 fd8c 	bl	8004e48 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004330:	4b0f      	ldr	r3, [pc, #60]	; (8004370 <prvCheckTasksWaitingTermination+0x4c>)
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	3304      	adds	r3, #4
 800433c:	4618      	mov	r0, r3
 800433e:	f7fe fc15 	bl	8002b6c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004342:	4b0c      	ldr	r3, [pc, #48]	; (8004374 <prvCheckTasksWaitingTermination+0x50>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	3b01      	subs	r3, #1
 8004348:	4a0a      	ldr	r2, [pc, #40]	; (8004374 <prvCheckTasksWaitingTermination+0x50>)
 800434a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800434c:	4b0a      	ldr	r3, [pc, #40]	; (8004378 <prvCheckTasksWaitingTermination+0x54>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	3b01      	subs	r3, #1
 8004352:	4a09      	ldr	r2, [pc, #36]	; (8004378 <prvCheckTasksWaitingTermination+0x54>)
 8004354:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004356:	f000 fda5 	bl	8004ea4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 f846 	bl	80043ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004360:	4b05      	ldr	r3, [pc, #20]	; (8004378 <prvCheckTasksWaitingTermination+0x54>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1e1      	bne.n	800432c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004368:	bf00      	nop
 800436a:	3708      	adds	r7, #8
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	20000b90 	.word	0x20000b90
 8004374:	20000bbc 	.word	0x20000bbc
 8004378:	20000ba4 	.word	0x20000ba4

0800437c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8004384:	2300      	movs	r3, #0
 8004386:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8004388:	e005      	b.n	8004396 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	3301      	adds	r3, #1
 800438e:	607b      	str	r3, [r7, #4]
			ulCount++;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	3301      	adds	r3, #1
 8004394:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	2ba5      	cmp	r3, #165	; 0xa5
 800439c:	d0f5      	beq.n	800438a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	089b      	lsrs	r3, r3, #2
 80043a2:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	b29b      	uxth	r3, r3
	}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3714      	adds	r7, #20
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bc80      	pop	{r7}
 80043b0:	4770      	bx	lr
	...

080043b4 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d102      	bne.n	80043c8 <uxTaskGetStackHighWaterMark+0x14>
 80043c2:	4b09      	ldr	r3, [pc, #36]	; (80043e8 <uxTaskGetStackHighWaterMark+0x34>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	e000      	b.n	80043ca <uxTaskGetStackHighWaterMark+0x16>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d0:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 80043d2:	6938      	ldr	r0, [r7, #16]
 80043d4:	f7ff ffd2 	bl	800437c <prvTaskCheckFreeStackSpace>
 80043d8:	4603      	mov	r3, r0
 80043da:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 80043dc:	68fb      	ldr	r3, [r7, #12]
	}
 80043de:	4618      	mov	r0, r3
 80043e0:	3718      	adds	r7, #24
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	200006e8 	.word	0x200006e8

080043ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d108      	bne.n	8004410 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004402:	4618      	mov	r0, r3
 8004404:	f000 fed8 	bl	80051b8 <vPortFree>
				vPortFree( pxTCB );
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 fed5 	bl	80051b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800440e:	e017      	b.n	8004440 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004416:	2b01      	cmp	r3, #1
 8004418:	d103      	bne.n	8004422 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 fecc 	bl	80051b8 <vPortFree>
	}
 8004420:	e00e      	b.n	8004440 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004428:	2b02      	cmp	r3, #2
 800442a:	d009      	beq.n	8004440 <prvDeleteTCB+0x54>
 800442c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004430:	f383 8811 	msr	BASEPRI, r3
 8004434:	f3bf 8f6f 	isb	sy
 8004438:	f3bf 8f4f 	dsb	sy
 800443c:	60fb      	str	r3, [r7, #12]
 800443e:	e7fe      	b.n	800443e <prvDeleteTCB+0x52>
	}
 8004440:	bf00      	nop
 8004442:	3710      	adds	r7, #16
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800444e:	4b0e      	ldr	r3, [pc, #56]	; (8004488 <prvResetNextTaskUnblockTime+0x40>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d101      	bne.n	800445c <prvResetNextTaskUnblockTime+0x14>
 8004458:	2301      	movs	r3, #1
 800445a:	e000      	b.n	800445e <prvResetNextTaskUnblockTime+0x16>
 800445c:	2300      	movs	r3, #0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d004      	beq.n	800446c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004462:	4b0a      	ldr	r3, [pc, #40]	; (800448c <prvResetNextTaskUnblockTime+0x44>)
 8004464:	f04f 32ff 	mov.w	r2, #4294967295
 8004468:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800446a:	e008      	b.n	800447e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800446c:	4b06      	ldr	r3, [pc, #24]	; (8004488 <prvResetNextTaskUnblockTime+0x40>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	4a04      	ldr	r2, [pc, #16]	; (800448c <prvResetNextTaskUnblockTime+0x44>)
 800447c:	6013      	str	r3, [r2, #0]
}
 800447e:	bf00      	nop
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	bc80      	pop	{r7}
 8004486:	4770      	bx	lr
 8004488:	20000b74 	.word	0x20000b74
 800448c:	20000bdc 	.word	0x20000bdc

08004490 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004496:	4b0b      	ldr	r3, [pc, #44]	; (80044c4 <xTaskGetSchedulerState+0x34>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d102      	bne.n	80044a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800449e:	2301      	movs	r3, #1
 80044a0:	607b      	str	r3, [r7, #4]
 80044a2:	e008      	b.n	80044b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044a4:	4b08      	ldr	r3, [pc, #32]	; (80044c8 <xTaskGetSchedulerState+0x38>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d102      	bne.n	80044b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80044ac:	2302      	movs	r3, #2
 80044ae:	607b      	str	r3, [r7, #4]
 80044b0:	e001      	b.n	80044b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80044b2:	2300      	movs	r3, #0
 80044b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80044b6:	687b      	ldr	r3, [r7, #4]
	}
 80044b8:	4618      	mov	r0, r3
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	bc80      	pop	{r7}
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	20000bc8 	.word	0x20000bc8
 80044c8:	20000be4 	.word	0x20000be4

080044cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80044d8:	2300      	movs	r3, #0
 80044da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d05d      	beq.n	800459e <xTaskPriorityDisinherit+0xd2>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80044e2:	4b31      	ldr	r3, [pc, #196]	; (80045a8 <xTaskPriorityDisinherit+0xdc>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d009      	beq.n	8004500 <xTaskPriorityDisinherit+0x34>
 80044ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f0:	f383 8811 	msr	BASEPRI, r3
 80044f4:	f3bf 8f6f 	isb	sy
 80044f8:	f3bf 8f4f 	dsb	sy
 80044fc:	60fb      	str	r3, [r7, #12]
 80044fe:	e7fe      	b.n	80044fe <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004504:	2b00      	cmp	r3, #0
 8004506:	d109      	bne.n	800451c <xTaskPriorityDisinherit+0x50>
 8004508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450c:	f383 8811 	msr	BASEPRI, r3
 8004510:	f3bf 8f6f 	isb	sy
 8004514:	f3bf 8f4f 	dsb	sy
 8004518:	60bb      	str	r3, [r7, #8]
 800451a:	e7fe      	b.n	800451a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004520:	1e5a      	subs	r2, r3, #1
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800452e:	429a      	cmp	r2, r3
 8004530:	d035      	beq.n	800459e <xTaskPriorityDisinherit+0xd2>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004536:	2b00      	cmp	r3, #0
 8004538:	d131      	bne.n	800459e <xTaskPriorityDisinherit+0xd2>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	3304      	adds	r3, #4
 800453e:	4618      	mov	r0, r3
 8004540:	f7fe fb14 	bl	8002b6c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4619      	mov	r1, r3
 8004548:	204a      	movs	r0, #74	; 0x4a
 800454a:	f001 fce1 	bl	8005f10 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	4618      	mov	r0, r3
 8004566:	f002 f9d7 	bl	8006918 <SEGGER_SYSVIEW_OnTaskStartReady>
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800456e:	4b0f      	ldr	r3, [pc, #60]	; (80045ac <xTaskPriorityDisinherit+0xe0>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	429a      	cmp	r2, r3
 8004574:	d903      	bls.n	800457e <xTaskPriorityDisinherit+0xb2>
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457a:	4a0c      	ldr	r2, [pc, #48]	; (80045ac <xTaskPriorityDisinherit+0xe0>)
 800457c:	6013      	str	r3, [r2, #0]
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004582:	4613      	mov	r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	4413      	add	r3, r2
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	4a09      	ldr	r2, [pc, #36]	; (80045b0 <xTaskPriorityDisinherit+0xe4>)
 800458c:	441a      	add	r2, r3
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	3304      	adds	r3, #4
 8004592:	4619      	mov	r1, r3
 8004594:	4610      	mov	r0, r2
 8004596:	f7fe fa8e 	bl	8002ab6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800459a:	2301      	movs	r3, #1
 800459c:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800459e:	697b      	ldr	r3, [r7, #20]
	}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3718      	adds	r7, #24
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	200006e8 	.word	0x200006e8
 80045ac:	20000bc4 	.word	0x20000bc4
 80045b0:	200006ec 	.word	0x200006ec

080045b4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80045be:	4b21      	ldr	r3, [pc, #132]	; (8004644 <prvAddCurrentTaskToDelayedList+0x90>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045c4:	4b20      	ldr	r3, [pc, #128]	; (8004648 <prvAddCurrentTaskToDelayedList+0x94>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	3304      	adds	r3, #4
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7fe face 	bl	8002b6c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d6:	d10a      	bne.n	80045ee <prvAddCurrentTaskToDelayedList+0x3a>
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d007      	beq.n	80045ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045de:	4b1a      	ldr	r3, [pc, #104]	; (8004648 <prvAddCurrentTaskToDelayedList+0x94>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	3304      	adds	r3, #4
 80045e4:	4619      	mov	r1, r3
 80045e6:	4819      	ldr	r0, [pc, #100]	; (800464c <prvAddCurrentTaskToDelayedList+0x98>)
 80045e8:	f7fe fa65 	bl	8002ab6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80045ec:	e026      	b.n	800463c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4413      	add	r3, r2
 80045f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80045f6:	4b14      	ldr	r3, [pc, #80]	; (8004648 <prvAddCurrentTaskToDelayedList+0x94>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	429a      	cmp	r2, r3
 8004604:	d209      	bcs.n	800461a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004606:	4b12      	ldr	r3, [pc, #72]	; (8004650 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	4b0f      	ldr	r3, [pc, #60]	; (8004648 <prvAddCurrentTaskToDelayedList+0x94>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	3304      	adds	r3, #4
 8004610:	4619      	mov	r1, r3
 8004612:	4610      	mov	r0, r2
 8004614:	f7fe fa72 	bl	8002afc <vListInsert>
}
 8004618:	e010      	b.n	800463c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800461a:	4b0e      	ldr	r3, [pc, #56]	; (8004654 <prvAddCurrentTaskToDelayedList+0xa0>)
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	4b0a      	ldr	r3, [pc, #40]	; (8004648 <prvAddCurrentTaskToDelayedList+0x94>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	3304      	adds	r3, #4
 8004624:	4619      	mov	r1, r3
 8004626:	4610      	mov	r0, r2
 8004628:	f7fe fa68 	bl	8002afc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800462c:	4b0a      	ldr	r3, [pc, #40]	; (8004658 <prvAddCurrentTaskToDelayedList+0xa4>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68ba      	ldr	r2, [r7, #8]
 8004632:	429a      	cmp	r2, r3
 8004634:	d202      	bcs.n	800463c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004636:	4a08      	ldr	r2, [pc, #32]	; (8004658 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	6013      	str	r3, [r2, #0]
}
 800463c:	bf00      	nop
 800463e:	3710      	adds	r7, #16
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	20000bc0 	.word	0x20000bc0
 8004648:	200006e8 	.word	0x200006e8
 800464c:	20000ba8 	.word	0x20000ba8
 8004650:	20000b78 	.word	0x20000b78
 8004654:	20000b74 	.word	0x20000b74
 8004658:	20000bdc 	.word	0x20000bdc

0800465c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b08a      	sub	sp, #40	; 0x28
 8004660:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004662:	2300      	movs	r3, #0
 8004664:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004666:	f000 fac3 	bl	8004bf0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800466a:	4b1c      	ldr	r3, [pc, #112]	; (80046dc <xTimerCreateTimerTask+0x80>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d021      	beq.n	80046b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004672:	2300      	movs	r3, #0
 8004674:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004676:	2300      	movs	r3, #0
 8004678:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800467a:	1d3a      	adds	r2, r7, #4
 800467c:	f107 0108 	add.w	r1, r7, #8
 8004680:	f107 030c 	add.w	r3, r7, #12
 8004684:	4618      	mov	r0, r3
 8004686:	f7fe f9d1 	bl	8002a2c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800468a:	6879      	ldr	r1, [r7, #4]
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	9202      	str	r2, [sp, #8]
 8004692:	9301      	str	r3, [sp, #4]
 8004694:	2302      	movs	r3, #2
 8004696:	9300      	str	r3, [sp, #0]
 8004698:	2300      	movs	r3, #0
 800469a:	460a      	mov	r2, r1
 800469c:	4910      	ldr	r1, [pc, #64]	; (80046e0 <xTimerCreateTimerTask+0x84>)
 800469e:	4811      	ldr	r0, [pc, #68]	; (80046e4 <xTimerCreateTimerTask+0x88>)
 80046a0:	f7ff f8a8 	bl	80037f4 <xTaskCreateStatic>
 80046a4:	4602      	mov	r2, r0
 80046a6:	4b10      	ldr	r3, [pc, #64]	; (80046e8 <xTimerCreateTimerTask+0x8c>)
 80046a8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80046aa:	4b0f      	ldr	r3, [pc, #60]	; (80046e8 <xTimerCreateTimerTask+0x8c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d001      	beq.n	80046b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80046b2:	2301      	movs	r3, #1
 80046b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d109      	bne.n	80046d0 <xTimerCreateTimerTask+0x74>
 80046bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c0:	f383 8811 	msr	BASEPRI, r3
 80046c4:	f3bf 8f6f 	isb	sy
 80046c8:	f3bf 8f4f 	dsb	sy
 80046cc:	613b      	str	r3, [r7, #16]
 80046ce:	e7fe      	b.n	80046ce <xTimerCreateTimerTask+0x72>
	return xReturn;
 80046d0:	697b      	ldr	r3, [r7, #20]
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3718      	adds	r7, #24
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	20000c18 	.word	0x20000c18
 80046e0:	08006d10 	.word	0x08006d10
 80046e4:	08004805 	.word	0x08004805
 80046e8:	20000c1c 	.word	0x20000c1c

080046ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b08a      	sub	sp, #40	; 0x28
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
 80046f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80046fa:	2300      	movs	r3, #0
 80046fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d109      	bne.n	8004718 <xTimerGenericCommand+0x2c>
 8004704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004708:	f383 8811 	msr	BASEPRI, r3
 800470c:	f3bf 8f6f 	isb	sy
 8004710:	f3bf 8f4f 	dsb	sy
 8004714:	623b      	str	r3, [r7, #32]
 8004716:	e7fe      	b.n	8004716 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004718:	4b19      	ldr	r3, [pc, #100]	; (8004780 <xTimerGenericCommand+0x94>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d02a      	beq.n	8004776 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	2b05      	cmp	r3, #5
 8004730:	dc18      	bgt.n	8004764 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004732:	f7ff fead 	bl	8004490 <xTaskGetSchedulerState>
 8004736:	4603      	mov	r3, r0
 8004738:	2b02      	cmp	r3, #2
 800473a:	d109      	bne.n	8004750 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800473c:	4b10      	ldr	r3, [pc, #64]	; (8004780 <xTimerGenericCommand+0x94>)
 800473e:	6818      	ldr	r0, [r3, #0]
 8004740:	f107 0110 	add.w	r1, r7, #16
 8004744:	2300      	movs	r3, #0
 8004746:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004748:	f7fe fbd2 	bl	8002ef0 <xQueueGenericSend>
 800474c:	6278      	str	r0, [r7, #36]	; 0x24
 800474e:	e012      	b.n	8004776 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004750:	4b0b      	ldr	r3, [pc, #44]	; (8004780 <xTimerGenericCommand+0x94>)
 8004752:	6818      	ldr	r0, [r3, #0]
 8004754:	f107 0110 	add.w	r1, r7, #16
 8004758:	2300      	movs	r3, #0
 800475a:	2200      	movs	r2, #0
 800475c:	f7fe fbc8 	bl	8002ef0 <xQueueGenericSend>
 8004760:	6278      	str	r0, [r7, #36]	; 0x24
 8004762:	e008      	b.n	8004776 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004764:	4b06      	ldr	r3, [pc, #24]	; (8004780 <xTimerGenericCommand+0x94>)
 8004766:	6818      	ldr	r0, [r3, #0]
 8004768:	f107 0110 	add.w	r1, r7, #16
 800476c:	2300      	movs	r3, #0
 800476e:	683a      	ldr	r2, [r7, #0]
 8004770:	f7fe fcc8 	bl	8003104 <xQueueGenericSendFromISR>
 8004774:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004778:	4618      	mov	r0, r3
 800477a:	3728      	adds	r7, #40	; 0x28
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	20000c18 	.word	0x20000c18

08004784 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b088      	sub	sp, #32
 8004788:	af02      	add	r7, sp, #8
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800478e:	4b1c      	ldr	r3, [pc, #112]	; (8004800 <prvProcessExpiredTimer+0x7c>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	3304      	adds	r3, #4
 800479c:	4618      	mov	r0, r3
 800479e:	f7fe f9e5 	bl	8002b6c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	69db      	ldr	r3, [r3, #28]
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d121      	bne.n	80047ee <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	699a      	ldr	r2, [r3, #24]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	18d1      	adds	r1, r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	6978      	ldr	r0, [r7, #20]
 80047b8:	f000 f8c8 	bl	800494c <prvInsertTimerInActiveList>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d015      	beq.n	80047ee <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80047c2:	2300      	movs	r3, #0
 80047c4:	9300      	str	r3, [sp, #0]
 80047c6:	2300      	movs	r3, #0
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	2100      	movs	r1, #0
 80047cc:	6978      	ldr	r0, [r7, #20]
 80047ce:	f7ff ff8d 	bl	80046ec <xTimerGenericCommand>
 80047d2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d109      	bne.n	80047ee <prvProcessExpiredTimer+0x6a>
 80047da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047de:	f383 8811 	msr	BASEPRI, r3
 80047e2:	f3bf 8f6f 	isb	sy
 80047e6:	f3bf 8f4f 	dsb	sy
 80047ea:	60fb      	str	r3, [r7, #12]
 80047ec:	e7fe      	b.n	80047ec <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f2:	6978      	ldr	r0, [r7, #20]
 80047f4:	4798      	blx	r3
}
 80047f6:	bf00      	nop
 80047f8:	3718      	adds	r7, #24
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	20000c10 	.word	0x20000c10

08004804 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800480c:	f107 0308 	add.w	r3, r7, #8
 8004810:	4618      	mov	r0, r3
 8004812:	f000 f857 	bl	80048c4 <prvGetNextExpireTime>
 8004816:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	4619      	mov	r1, r3
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f000 f803 	bl	8004828 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004822:	f000 f8d5 	bl	80049d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004826:	e7f1      	b.n	800480c <prvTimerTask+0x8>

08004828 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004832:	f7ff fa1d 	bl	8003c70 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004836:	f107 0308 	add.w	r3, r7, #8
 800483a:	4618      	mov	r0, r3
 800483c:	f000 f866 	bl	800490c <prvSampleTimeNow>
 8004840:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d130      	bne.n	80048aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10a      	bne.n	8004864 <prvProcessTimerOrBlockTask+0x3c>
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	429a      	cmp	r2, r3
 8004854:	d806      	bhi.n	8004864 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004856:	f7ff fa19 	bl	8003c8c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800485a:	68f9      	ldr	r1, [r7, #12]
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f7ff ff91 	bl	8004784 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004862:	e024      	b.n	80048ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d008      	beq.n	800487c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800486a:	4b13      	ldr	r3, [pc, #76]	; (80048b8 <prvProcessTimerOrBlockTask+0x90>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	bf0c      	ite	eq
 8004874:	2301      	moveq	r3, #1
 8004876:	2300      	movne	r3, #0
 8004878:	b2db      	uxtb	r3, r3
 800487a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800487c:	4b0f      	ldr	r3, [pc, #60]	; (80048bc <prvProcessTimerOrBlockTask+0x94>)
 800487e:	6818      	ldr	r0, [r3, #0]
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	683a      	ldr	r2, [r7, #0]
 8004888:	4619      	mov	r1, r3
 800488a:	f7fe ff7f 	bl	800378c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800488e:	f7ff f9fd 	bl	8003c8c <xTaskResumeAll>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d10a      	bne.n	80048ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004898:	4b09      	ldr	r3, [pc, #36]	; (80048c0 <prvProcessTimerOrBlockTask+0x98>)
 800489a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800489e:	601a      	str	r2, [r3, #0]
 80048a0:	f3bf 8f4f 	dsb	sy
 80048a4:	f3bf 8f6f 	isb	sy
}
 80048a8:	e001      	b.n	80048ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80048aa:	f7ff f9ef 	bl	8003c8c <xTaskResumeAll>
}
 80048ae:	bf00      	nop
 80048b0:	3710      	adds	r7, #16
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	20000c14 	.word	0x20000c14
 80048bc:	20000c18 	.word	0x20000c18
 80048c0:	e000ed04 	.word	0xe000ed04

080048c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80048cc:	4b0e      	ldr	r3, [pc, #56]	; (8004908 <prvGetNextExpireTime+0x44>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	bf0c      	ite	eq
 80048d6:	2301      	moveq	r3, #1
 80048d8:	2300      	movne	r3, #0
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	461a      	mov	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d105      	bne.n	80048f6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80048ea:	4b07      	ldr	r3, [pc, #28]	; (8004908 <prvGetNextExpireTime+0x44>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	60fb      	str	r3, [r7, #12]
 80048f4:	e001      	b.n	80048fa <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80048f6:	2300      	movs	r3, #0
 80048f8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80048fa:	68fb      	ldr	r3, [r7, #12]
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3714      	adds	r7, #20
 8004900:	46bd      	mov	sp, r7
 8004902:	bc80      	pop	{r7}
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	20000c10 	.word	0x20000c10

0800490c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004914:	f7ff fa4c 	bl	8003db0 <xTaskGetTickCount>
 8004918:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800491a:	4b0b      	ldr	r3, [pc, #44]	; (8004948 <prvSampleTimeNow+0x3c>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	429a      	cmp	r2, r3
 8004922:	d205      	bcs.n	8004930 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004924:	f000 f904 	bl	8004b30 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	601a      	str	r2, [r3, #0]
 800492e:	e002      	b.n	8004936 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004936:	4a04      	ldr	r2, [pc, #16]	; (8004948 <prvSampleTimeNow+0x3c>)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800493c:	68fb      	ldr	r3, [r7, #12]
}
 800493e:	4618      	mov	r0, r3
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	20000c20 	.word	0x20000c20

0800494c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
 8004958:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800495a:	2300      	movs	r3, #0
 800495c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	68ba      	ldr	r2, [r7, #8]
 8004962:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800496a:	68ba      	ldr	r2, [r7, #8]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	429a      	cmp	r2, r3
 8004970:	d812      	bhi.n	8004998 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	1ad2      	subs	r2, r2, r3
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	429a      	cmp	r2, r3
 800497e:	d302      	bcc.n	8004986 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004980:	2301      	movs	r3, #1
 8004982:	617b      	str	r3, [r7, #20]
 8004984:	e01b      	b.n	80049be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004986:	4b10      	ldr	r3, [pc, #64]	; (80049c8 <prvInsertTimerInActiveList+0x7c>)
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	3304      	adds	r3, #4
 800498e:	4619      	mov	r1, r3
 8004990:	4610      	mov	r0, r2
 8004992:	f7fe f8b3 	bl	8002afc <vListInsert>
 8004996:	e012      	b.n	80049be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	429a      	cmp	r2, r3
 800499e:	d206      	bcs.n	80049ae <prvInsertTimerInActiveList+0x62>
 80049a0:	68ba      	ldr	r2, [r7, #8]
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d302      	bcc.n	80049ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80049a8:	2301      	movs	r3, #1
 80049aa:	617b      	str	r3, [r7, #20]
 80049ac:	e007      	b.n	80049be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80049ae:	4b07      	ldr	r3, [pc, #28]	; (80049cc <prvInsertTimerInActiveList+0x80>)
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	3304      	adds	r3, #4
 80049b6:	4619      	mov	r1, r3
 80049b8:	4610      	mov	r0, r2
 80049ba:	f7fe f89f 	bl	8002afc <vListInsert>
		}
	}

	return xProcessTimerNow;
 80049be:	697b      	ldr	r3, [r7, #20]
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3718      	adds	r7, #24
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	20000c14 	.word	0x20000c14
 80049cc:	20000c10 	.word	0x20000c10

080049d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b08e      	sub	sp, #56	; 0x38
 80049d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80049d6:	e099      	b.n	8004b0c <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	da17      	bge.n	8004a0e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80049de:	1d3b      	adds	r3, r7, #4
 80049e0:	3304      	adds	r3, #4
 80049e2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80049e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d109      	bne.n	80049fe <prvProcessReceivedCommands+0x2e>
 80049ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ee:	f383 8811 	msr	BASEPRI, r3
 80049f2:	f3bf 8f6f 	isb	sy
 80049f6:	f3bf 8f4f 	dsb	sy
 80049fa:	61fb      	str	r3, [r7, #28]
 80049fc:	e7fe      	b.n	80049fc <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80049fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a04:	6850      	ldr	r0, [r2, #4]
 8004a06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a08:	6892      	ldr	r2, [r2, #8]
 8004a0a:	4611      	mov	r1, r2
 8004a0c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	db7a      	blt.n	8004b0a <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1a:	695b      	ldr	r3, [r3, #20]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d004      	beq.n	8004a2a <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a22:	3304      	adds	r3, #4
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7fe f8a1 	bl	8002b6c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a2a:	463b      	mov	r3, r7
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7ff ff6d 	bl	800490c <prvSampleTimeNow>
 8004a32:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b09      	cmp	r3, #9
 8004a38:	d868      	bhi.n	8004b0c <prvProcessReceivedCommands+0x13c>
 8004a3a:	a201      	add	r2, pc, #4	; (adr r2, 8004a40 <prvProcessReceivedCommands+0x70>)
 8004a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a40:	08004a69 	.word	0x08004a69
 8004a44:	08004a69 	.word	0x08004a69
 8004a48:	08004a69 	.word	0x08004a69
 8004a4c:	08004b0d 	.word	0x08004b0d
 8004a50:	08004ac3 	.word	0x08004ac3
 8004a54:	08004af9 	.word	0x08004af9
 8004a58:	08004a69 	.word	0x08004a69
 8004a5c:	08004a69 	.word	0x08004a69
 8004a60:	08004b0d 	.word	0x08004b0d
 8004a64:	08004ac3 	.word	0x08004ac3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004a68:	68ba      	ldr	r2, [r7, #8]
 8004a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	18d1      	adds	r1, r2, r3
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a76:	f7ff ff69 	bl	800494c <prvInsertTimerInActiveList>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d045      	beq.n	8004b0c <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a86:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8a:	69db      	ldr	r3, [r3, #28]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d13d      	bne.n	8004b0c <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004a90:	68ba      	ldr	r2, [r7, #8]
 8004a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	441a      	add	r2, r3
 8004a98:	2300      	movs	r3, #0
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	2100      	movs	r1, #0
 8004aa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004aa2:	f7ff fe23 	bl	80046ec <xTimerGenericCommand>
 8004aa6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004aa8:	6a3b      	ldr	r3, [r7, #32]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d12e      	bne.n	8004b0c <prvProcessReceivedCommands+0x13c>
 8004aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab2:	f383 8811 	msr	BASEPRI, r3
 8004ab6:	f3bf 8f6f 	isb	sy
 8004aba:	f3bf 8f4f 	dsb	sy
 8004abe:	61bb      	str	r3, [r7, #24]
 8004ac0:	e7fe      	b.n	8004ac0 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004ac2:	68ba      	ldr	r2, [r7, #8]
 8004ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d109      	bne.n	8004ae4 <prvProcessReceivedCommands+0x114>
 8004ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad4:	f383 8811 	msr	BASEPRI, r3
 8004ad8:	f3bf 8f6f 	isb	sy
 8004adc:	f3bf 8f4f 	dsb	sy
 8004ae0:	617b      	str	r3, [r7, #20]
 8004ae2:	e7fe      	b.n	8004ae2 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae6:	699a      	ldr	r2, [r3, #24]
 8004ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aea:	18d1      	adds	r1, r2, r3
 8004aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004af0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004af2:	f7ff ff2b 	bl	800494c <prvInsertTimerInActiveList>
					break;
 8004af6:	e009      	b.n	8004b0c <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d104      	bne.n	8004b0c <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8004b02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b04:	f000 fb58 	bl	80051b8 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004b08:	e000      	b.n	8004b0c <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004b0a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b0c:	4b07      	ldr	r3, [pc, #28]	; (8004b2c <prvProcessReceivedCommands+0x15c>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	1d39      	adds	r1, r7, #4
 8004b12:	2200      	movs	r2, #0
 8004b14:	4618      	mov	r0, r3
 8004b16:	f7fe fb9d 	bl	8003254 <xQueueReceive>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f47f af5b 	bne.w	80049d8 <prvProcessReceivedCommands+0x8>
	}
}
 8004b22:	bf00      	nop
 8004b24:	3730      	adds	r7, #48	; 0x30
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	20000c18 	.word	0x20000c18

08004b30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b088      	sub	sp, #32
 8004b34:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b36:	e044      	b.n	8004bc2 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b38:	4b2b      	ldr	r3, [pc, #172]	; (8004be8 <prvSwitchTimerLists+0xb8>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b42:	4b29      	ldr	r3, [pc, #164]	; (8004be8 <prvSwitchTimerLists+0xb8>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	3304      	adds	r3, #4
 8004b50:	4618      	mov	r0, r3
 8004b52:	f7fe f80b 	bl	8002b6c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d12d      	bne.n	8004bc2 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d90e      	bls.n	8004b96 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	68ba      	ldr	r2, [r7, #8]
 8004b7c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b84:	4b18      	ldr	r3, [pc, #96]	; (8004be8 <prvSwitchTimerLists+0xb8>)
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	3304      	adds	r3, #4
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	4610      	mov	r0, r2
 8004b90:	f7fd ffb4 	bl	8002afc <vListInsert>
 8004b94:	e015      	b.n	8004bc2 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b96:	2300      	movs	r3, #0
 8004b98:	9300      	str	r3, [sp, #0]
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	68f8      	ldr	r0, [r7, #12]
 8004ba2:	f7ff fda3 	bl	80046ec <xTimerGenericCommand>
 8004ba6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d109      	bne.n	8004bc2 <prvSwitchTimerLists+0x92>
 8004bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb2:	f383 8811 	msr	BASEPRI, r3
 8004bb6:	f3bf 8f6f 	isb	sy
 8004bba:	f3bf 8f4f 	dsb	sy
 8004bbe:	603b      	str	r3, [r7, #0]
 8004bc0:	e7fe      	b.n	8004bc0 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004bc2:	4b09      	ldr	r3, [pc, #36]	; (8004be8 <prvSwitchTimerLists+0xb8>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1b5      	bne.n	8004b38 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004bcc:	4b06      	ldr	r3, [pc, #24]	; (8004be8 <prvSwitchTimerLists+0xb8>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004bd2:	4b06      	ldr	r3, [pc, #24]	; (8004bec <prvSwitchTimerLists+0xbc>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a04      	ldr	r2, [pc, #16]	; (8004be8 <prvSwitchTimerLists+0xb8>)
 8004bd8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004bda:	4a04      	ldr	r2, [pc, #16]	; (8004bec <prvSwitchTimerLists+0xbc>)
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	6013      	str	r3, [r2, #0]
}
 8004be0:	bf00      	nop
 8004be2:	3718      	adds	r7, #24
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	20000c10 	.word	0x20000c10
 8004bec:	20000c14 	.word	0x20000c14

08004bf0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004bf6:	f000 f927 	bl	8004e48 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004bfa:	4b15      	ldr	r3, [pc, #84]	; (8004c50 <prvCheckForValidListAndQueue+0x60>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d120      	bne.n	8004c44 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004c02:	4814      	ldr	r0, [pc, #80]	; (8004c54 <prvCheckForValidListAndQueue+0x64>)
 8004c04:	f7fd ff2c 	bl	8002a60 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004c08:	4813      	ldr	r0, [pc, #76]	; (8004c58 <prvCheckForValidListAndQueue+0x68>)
 8004c0a:	f7fd ff29 	bl	8002a60 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004c0e:	4b13      	ldr	r3, [pc, #76]	; (8004c5c <prvCheckForValidListAndQueue+0x6c>)
 8004c10:	4a10      	ldr	r2, [pc, #64]	; (8004c54 <prvCheckForValidListAndQueue+0x64>)
 8004c12:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004c14:	4b12      	ldr	r3, [pc, #72]	; (8004c60 <prvCheckForValidListAndQueue+0x70>)
 8004c16:	4a10      	ldr	r2, [pc, #64]	; (8004c58 <prvCheckForValidListAndQueue+0x68>)
 8004c18:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	9300      	str	r3, [sp, #0]
 8004c1e:	4b11      	ldr	r3, [pc, #68]	; (8004c64 <prvCheckForValidListAndQueue+0x74>)
 8004c20:	4a11      	ldr	r2, [pc, #68]	; (8004c68 <prvCheckForValidListAndQueue+0x78>)
 8004c22:	2110      	movs	r1, #16
 8004c24:	200a      	movs	r0, #10
 8004c26:	f7fe f824 	bl	8002c72 <xQueueGenericCreateStatic>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	4b08      	ldr	r3, [pc, #32]	; (8004c50 <prvCheckForValidListAndQueue+0x60>)
 8004c2e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004c30:	4b07      	ldr	r3, [pc, #28]	; (8004c50 <prvCheckForValidListAndQueue+0x60>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d005      	beq.n	8004c44 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004c38:	4b05      	ldr	r3, [pc, #20]	; (8004c50 <prvCheckForValidListAndQueue+0x60>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	490b      	ldr	r1, [pc, #44]	; (8004c6c <prvCheckForValidListAndQueue+0x7c>)
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7fe fd4c 	bl	80036dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c44:	f000 f92e 	bl	8004ea4 <vPortExitCritical>
}
 8004c48:	bf00      	nop
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	20000c18 	.word	0x20000c18
 8004c54:	20000be8 	.word	0x20000be8
 8004c58:	20000bfc 	.word	0x20000bfc
 8004c5c:	20000c10 	.word	0x20000c10
 8004c60:	20000c14 	.word	0x20000c14
 8004c64:	20000cc4 	.word	0x20000cc4
 8004c68:	20000c24 	.word	0x20000c24
 8004c6c:	08006d18 	.word	0x08006d18

08004c70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	3b04      	subs	r3, #4
 8004c80:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004c88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	3b04      	subs	r3, #4
 8004c8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	f023 0201 	bic.w	r2, r3, #1
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	3b04      	subs	r3, #4
 8004c9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004ca0:	4a08      	ldr	r2, [pc, #32]	; (8004cc4 <pxPortInitialiseStack+0x54>)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	3b14      	subs	r3, #20
 8004caa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	3b20      	subs	r3, #32
 8004cb6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3714      	adds	r7, #20
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bc80      	pop	{r7}
 8004cc2:	4770      	bx	lr
 8004cc4:	08004cc9 	.word	0x08004cc9

08004cc8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004cd2:	4b10      	ldr	r3, [pc, #64]	; (8004d14 <prvTaskExitError+0x4c>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cda:	d009      	beq.n	8004cf0 <prvTaskExitError+0x28>
 8004cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce0:	f383 8811 	msr	BASEPRI, r3
 8004ce4:	f3bf 8f6f 	isb	sy
 8004ce8:	f3bf 8f4f 	dsb	sy
 8004cec:	60fb      	str	r3, [r7, #12]
 8004cee:	e7fe      	b.n	8004cee <prvTaskExitError+0x26>
 8004cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf4:	f383 8811 	msr	BASEPRI, r3
 8004cf8:	f3bf 8f6f 	isb	sy
 8004cfc:	f3bf 8f4f 	dsb	sy
 8004d00:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004d02:	bf00      	nop
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d0fc      	beq.n	8004d04 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d0a:	bf00      	nop
 8004d0c:	3714      	adds	r7, #20
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bc80      	pop	{r7}
 8004d12:	4770      	bx	lr
 8004d14:	2000000c 	.word	0x2000000c
	...

08004d20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004d20:	4b07      	ldr	r3, [pc, #28]	; (8004d40 <pxCurrentTCBConst2>)
 8004d22:	6819      	ldr	r1, [r3, #0]
 8004d24:	6808      	ldr	r0, [r1, #0]
 8004d26:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004d2a:	f380 8809 	msr	PSP, r0
 8004d2e:	f3bf 8f6f 	isb	sy
 8004d32:	f04f 0000 	mov.w	r0, #0
 8004d36:	f380 8811 	msr	BASEPRI, r0
 8004d3a:	f04e 0e0d 	orr.w	lr, lr, #13
 8004d3e:	4770      	bx	lr

08004d40 <pxCurrentTCBConst2>:
 8004d40:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004d44:	bf00      	nop
 8004d46:	bf00      	nop

08004d48 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004d48:	4806      	ldr	r0, [pc, #24]	; (8004d64 <prvPortStartFirstTask+0x1c>)
 8004d4a:	6800      	ldr	r0, [r0, #0]
 8004d4c:	6800      	ldr	r0, [r0, #0]
 8004d4e:	f380 8808 	msr	MSP, r0
 8004d52:	b662      	cpsie	i
 8004d54:	b661      	cpsie	f
 8004d56:	f3bf 8f4f 	dsb	sy
 8004d5a:	f3bf 8f6f 	isb	sy
 8004d5e:	df00      	svc	0
 8004d60:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004d62:	bf00      	nop
 8004d64:	e000ed08 	.word	0xe000ed08

08004d68 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004d6e:	4b31      	ldr	r3, [pc, #196]	; (8004e34 <xPortStartScheduler+0xcc>)
 8004d70:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	22ff      	movs	r2, #255	; 0xff
 8004d7e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004d88:	78fb      	ldrb	r3, [r7, #3]
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004d90:	b2da      	uxtb	r2, r3
 8004d92:	4b29      	ldr	r3, [pc, #164]	; (8004e38 <xPortStartScheduler+0xd0>)
 8004d94:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004d96:	4b29      	ldr	r3, [pc, #164]	; (8004e3c <xPortStartScheduler+0xd4>)
 8004d98:	2207      	movs	r2, #7
 8004d9a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d9c:	e009      	b.n	8004db2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004d9e:	4b27      	ldr	r3, [pc, #156]	; (8004e3c <xPortStartScheduler+0xd4>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	3b01      	subs	r3, #1
 8004da4:	4a25      	ldr	r2, [pc, #148]	; (8004e3c <xPortStartScheduler+0xd4>)
 8004da6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004da8:	78fb      	ldrb	r3, [r7, #3]
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	005b      	lsls	r3, r3, #1
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004db2:	78fb      	ldrb	r3, [r7, #3]
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dba:	2b80      	cmp	r3, #128	; 0x80
 8004dbc:	d0ef      	beq.n	8004d9e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004dbe:	4b1f      	ldr	r3, [pc, #124]	; (8004e3c <xPortStartScheduler+0xd4>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f1c3 0307 	rsb	r3, r3, #7
 8004dc6:	2b04      	cmp	r3, #4
 8004dc8:	d009      	beq.n	8004dde <xPortStartScheduler+0x76>
 8004dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dce:	f383 8811 	msr	BASEPRI, r3
 8004dd2:	f3bf 8f6f 	isb	sy
 8004dd6:	f3bf 8f4f 	dsb	sy
 8004dda:	60bb      	str	r3, [r7, #8]
 8004ddc:	e7fe      	b.n	8004ddc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004dde:	4b17      	ldr	r3, [pc, #92]	; (8004e3c <xPortStartScheduler+0xd4>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	021b      	lsls	r3, r3, #8
 8004de4:	4a15      	ldr	r2, [pc, #84]	; (8004e3c <xPortStartScheduler+0xd4>)
 8004de6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004de8:	4b14      	ldr	r3, [pc, #80]	; (8004e3c <xPortStartScheduler+0xd4>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004df0:	4a12      	ldr	r2, [pc, #72]	; (8004e3c <xPortStartScheduler+0xd4>)
 8004df2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	b2da      	uxtb	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004dfc:	4b10      	ldr	r3, [pc, #64]	; (8004e40 <xPortStartScheduler+0xd8>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a0f      	ldr	r2, [pc, #60]	; (8004e40 <xPortStartScheduler+0xd8>)
 8004e02:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004e08:	4b0d      	ldr	r3, [pc, #52]	; (8004e40 <xPortStartScheduler+0xd8>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a0c      	ldr	r2, [pc, #48]	; (8004e40 <xPortStartScheduler+0xd8>)
 8004e0e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004e12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004e14:	f000 f8b0 	bl	8004f78 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004e18:	4b0a      	ldr	r3, [pc, #40]	; (8004e44 <xPortStartScheduler+0xdc>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004e1e:	f7ff ff93 	bl	8004d48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004e22:	f7ff f883 	bl	8003f2c <vTaskSwitchContext>
	prvTaskExitError();
 8004e26:	f7ff ff4f 	bl	8004cc8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3710      	adds	r7, #16
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	e000e400 	.word	0xe000e400
 8004e38:	20000d14 	.word	0x20000d14
 8004e3c:	20000d18 	.word	0x20000d18
 8004e40:	e000ed20 	.word	0xe000ed20
 8004e44:	2000000c 	.word	0x2000000c

08004e48 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e52:	f383 8811 	msr	BASEPRI, r3
 8004e56:	f3bf 8f6f 	isb	sy
 8004e5a:	f3bf 8f4f 	dsb	sy
 8004e5e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004e60:	4b0e      	ldr	r3, [pc, #56]	; (8004e9c <vPortEnterCritical+0x54>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	3301      	adds	r3, #1
 8004e66:	4a0d      	ldr	r2, [pc, #52]	; (8004e9c <vPortEnterCritical+0x54>)
 8004e68:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004e6a:	4b0c      	ldr	r3, [pc, #48]	; (8004e9c <vPortEnterCritical+0x54>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d10e      	bne.n	8004e90 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004e72:	4b0b      	ldr	r3, [pc, #44]	; (8004ea0 <vPortEnterCritical+0x58>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d009      	beq.n	8004e90 <vPortEnterCritical+0x48>
 8004e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e80:	f383 8811 	msr	BASEPRI, r3
 8004e84:	f3bf 8f6f 	isb	sy
 8004e88:	f3bf 8f4f 	dsb	sy
 8004e8c:	603b      	str	r3, [r7, #0]
 8004e8e:	e7fe      	b.n	8004e8e <vPortEnterCritical+0x46>
	}
}
 8004e90:	bf00      	nop
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bc80      	pop	{r7}
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	2000000c 	.word	0x2000000c
 8004ea0:	e000ed04 	.word	0xe000ed04

08004ea4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004eaa:	4b10      	ldr	r3, [pc, #64]	; (8004eec <vPortExitCritical+0x48>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d109      	bne.n	8004ec6 <vPortExitCritical+0x22>
 8004eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb6:	f383 8811 	msr	BASEPRI, r3
 8004eba:	f3bf 8f6f 	isb	sy
 8004ebe:	f3bf 8f4f 	dsb	sy
 8004ec2:	607b      	str	r3, [r7, #4]
 8004ec4:	e7fe      	b.n	8004ec4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004ec6:	4b09      	ldr	r3, [pc, #36]	; (8004eec <vPortExitCritical+0x48>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	4a07      	ldr	r2, [pc, #28]	; (8004eec <vPortExitCritical+0x48>)
 8004ece:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004ed0:	4b06      	ldr	r3, [pc, #24]	; (8004eec <vPortExitCritical+0x48>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d104      	bne.n	8004ee2 <vPortExitCritical+0x3e>
 8004ed8:	2300      	movs	r3, #0
 8004eda:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004ee2:	bf00      	nop
 8004ee4:	370c      	adds	r7, #12
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bc80      	pop	{r7}
 8004eea:	4770      	bx	lr
 8004eec:	2000000c 	.word	0x2000000c

08004ef0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004ef0:	f3ef 8009 	mrs	r0, PSP
 8004ef4:	f3bf 8f6f 	isb	sy
 8004ef8:	4b0d      	ldr	r3, [pc, #52]	; (8004f30 <pxCurrentTCBConst>)
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004f00:	6010      	str	r0, [r2, #0]
 8004f02:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004f06:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004f0a:	f380 8811 	msr	BASEPRI, r0
 8004f0e:	f7ff f80d 	bl	8003f2c <vTaskSwitchContext>
 8004f12:	f04f 0000 	mov.w	r0, #0
 8004f16:	f380 8811 	msr	BASEPRI, r0
 8004f1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004f1e:	6819      	ldr	r1, [r3, #0]
 8004f20:	6808      	ldr	r0, [r1, #0]
 8004f22:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004f26:	f380 8809 	msr	PSP, r0
 8004f2a:	f3bf 8f6f 	isb	sy
 8004f2e:	4770      	bx	lr

08004f30 <pxCurrentTCBConst>:
 8004f30:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004f34:	bf00      	nop
 8004f36:	bf00      	nop

08004f38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
	__asm volatile
 8004f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f42:	f383 8811 	msr	BASEPRI, r3
 8004f46:	f3bf 8f6f 	isb	sy
 8004f4a:	f3bf 8f4f 	dsb	sy
 8004f4e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004f50:	f7fe ff4e 	bl	8003df0 <xTaskIncrementTick>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d003      	beq.n	8004f62 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004f5a:	4b06      	ldr	r3, [pc, #24]	; (8004f74 <SysTick_Handler+0x3c>)
 8004f5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f60:	601a      	str	r2, [r3, #0]
 8004f62:	2300      	movs	r3, #0
 8004f64:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004f6c:	bf00      	nop
 8004f6e:	3708      	adds	r7, #8
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	e000ed04 	.word	0xe000ed04

08004f78 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004f78:	b480      	push	{r7}
 8004f7a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004f7c:	4b0a      	ldr	r3, [pc, #40]	; (8004fa8 <vPortSetupTimerInterrupt+0x30>)
 8004f7e:	2200      	movs	r2, #0
 8004f80:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004f82:	4b0a      	ldr	r3, [pc, #40]	; (8004fac <vPortSetupTimerInterrupt+0x34>)
 8004f84:	2200      	movs	r2, #0
 8004f86:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004f88:	4b09      	ldr	r3, [pc, #36]	; (8004fb0 <vPortSetupTimerInterrupt+0x38>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a09      	ldr	r2, [pc, #36]	; (8004fb4 <vPortSetupTimerInterrupt+0x3c>)
 8004f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f92:	099b      	lsrs	r3, r3, #6
 8004f94:	4a08      	ldr	r2, [pc, #32]	; (8004fb8 <vPortSetupTimerInterrupt+0x40>)
 8004f96:	3b01      	subs	r3, #1
 8004f98:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004f9a:	4b03      	ldr	r3, [pc, #12]	; (8004fa8 <vPortSetupTimerInterrupt+0x30>)
 8004f9c:	2207      	movs	r2, #7
 8004f9e:	601a      	str	r2, [r3, #0]
}
 8004fa0:	bf00      	nop
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bc80      	pop	{r7}
 8004fa6:	4770      	bx	lr
 8004fa8:	e000e010 	.word	0xe000e010
 8004fac:	e000e018 	.word	0xe000e018
 8004fb0:	20000000 	.word	0x20000000
 8004fb4:	10624dd3 	.word	0x10624dd3
 8004fb8:	e000e014 	.word	0xe000e014

08004fbc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004fc2:	f3ef 8305 	mrs	r3, IPSR
 8004fc6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2b0f      	cmp	r3, #15
 8004fcc:	d913      	bls.n	8004ff6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004fce:	4a15      	ldr	r2, [pc, #84]	; (8005024 <vPortValidateInterruptPriority+0x68>)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004fd8:	4b13      	ldr	r3, [pc, #76]	; (8005028 <vPortValidateInterruptPriority+0x6c>)
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	7afa      	ldrb	r2, [r7, #11]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d209      	bcs.n	8004ff6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8004fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe6:	f383 8811 	msr	BASEPRI, r3
 8004fea:	f3bf 8f6f 	isb	sy
 8004fee:	f3bf 8f4f 	dsb	sy
 8004ff2:	607b      	str	r3, [r7, #4]
 8004ff4:	e7fe      	b.n	8004ff4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004ff6:	4b0d      	ldr	r3, [pc, #52]	; (800502c <vPortValidateInterruptPriority+0x70>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004ffe:	4b0c      	ldr	r3, [pc, #48]	; (8005030 <vPortValidateInterruptPriority+0x74>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	429a      	cmp	r2, r3
 8005004:	d909      	bls.n	800501a <vPortValidateInterruptPriority+0x5e>
 8005006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500a:	f383 8811 	msr	BASEPRI, r3
 800500e:	f3bf 8f6f 	isb	sy
 8005012:	f3bf 8f4f 	dsb	sy
 8005016:	603b      	str	r3, [r7, #0]
 8005018:	e7fe      	b.n	8005018 <vPortValidateInterruptPriority+0x5c>
	}
 800501a:	bf00      	nop
 800501c:	3714      	adds	r7, #20
 800501e:	46bd      	mov	sp, r7
 8005020:	bc80      	pop	{r7}
 8005022:	4770      	bx	lr
 8005024:	e000e3f0 	.word	0xe000e3f0
 8005028:	20000d14 	.word	0x20000d14
 800502c:	e000ed0c 	.word	0xe000ed0c
 8005030:	20000d18 	.word	0x20000d18

08005034 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b08a      	sub	sp, #40	; 0x28
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800503c:	2300      	movs	r3, #0
 800503e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005040:	f7fe fe16 	bl	8003c70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005044:	4b57      	ldr	r3, [pc, #348]	; (80051a4 <pvPortMalloc+0x170>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d101      	bne.n	8005050 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800504c:	f000 f90c 	bl	8005268 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005050:	4b55      	ldr	r3, [pc, #340]	; (80051a8 <pvPortMalloc+0x174>)
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4013      	ands	r3, r2
 8005058:	2b00      	cmp	r3, #0
 800505a:	f040 808c 	bne.w	8005176 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d01c      	beq.n	800509e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005064:	2208      	movs	r2, #8
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4413      	add	r3, r2
 800506a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f003 0307 	and.w	r3, r3, #7
 8005072:	2b00      	cmp	r3, #0
 8005074:	d013      	beq.n	800509e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f023 0307 	bic.w	r3, r3, #7
 800507c:	3308      	adds	r3, #8
 800507e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f003 0307 	and.w	r3, r3, #7
 8005086:	2b00      	cmp	r3, #0
 8005088:	d009      	beq.n	800509e <pvPortMalloc+0x6a>
 800508a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508e:	f383 8811 	msr	BASEPRI, r3
 8005092:	f3bf 8f6f 	isb	sy
 8005096:	f3bf 8f4f 	dsb	sy
 800509a:	617b      	str	r3, [r7, #20]
 800509c:	e7fe      	b.n	800509c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d068      	beq.n	8005176 <pvPortMalloc+0x142>
 80050a4:	4b41      	ldr	r3, [pc, #260]	; (80051ac <pvPortMalloc+0x178>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d863      	bhi.n	8005176 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80050ae:	4b40      	ldr	r3, [pc, #256]	; (80051b0 <pvPortMalloc+0x17c>)
 80050b0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80050b2:	4b3f      	ldr	r3, [pc, #252]	; (80051b0 <pvPortMalloc+0x17c>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80050b8:	e004      	b.n	80050c4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80050ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050bc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80050be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80050c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d903      	bls.n	80050d6 <pvPortMalloc+0xa2>
 80050ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d1f1      	bne.n	80050ba <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80050d6:	4b33      	ldr	r3, [pc, #204]	; (80051a4 <pvPortMalloc+0x170>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050dc:	429a      	cmp	r2, r3
 80050de:	d04a      	beq.n	8005176 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80050e0:	6a3b      	ldr	r3, [r7, #32]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2208      	movs	r2, #8
 80050e6:	4413      	add	r3, r2
 80050e8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80050ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	6a3b      	ldr	r3, [r7, #32]
 80050f0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80050f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f4:	685a      	ldr	r2, [r3, #4]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	1ad2      	subs	r2, r2, r3
 80050fa:	2308      	movs	r3, #8
 80050fc:	005b      	lsls	r3, r3, #1
 80050fe:	429a      	cmp	r2, r3
 8005100:	d91e      	bls.n	8005140 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4413      	add	r3, r2
 8005108:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	f003 0307 	and.w	r3, r3, #7
 8005110:	2b00      	cmp	r3, #0
 8005112:	d009      	beq.n	8005128 <pvPortMalloc+0xf4>
 8005114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005118:	f383 8811 	msr	BASEPRI, r3
 800511c:	f3bf 8f6f 	isb	sy
 8005120:	f3bf 8f4f 	dsb	sy
 8005124:	613b      	str	r3, [r7, #16]
 8005126:	e7fe      	b.n	8005126 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512a:	685a      	ldr	r2, [r3, #4]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	1ad2      	subs	r2, r2, r3
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800513a:	69b8      	ldr	r0, [r7, #24]
 800513c:	f000 f8f6 	bl	800532c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005140:	4b1a      	ldr	r3, [pc, #104]	; (80051ac <pvPortMalloc+0x178>)
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	4a18      	ldr	r2, [pc, #96]	; (80051ac <pvPortMalloc+0x178>)
 800514c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800514e:	4b17      	ldr	r3, [pc, #92]	; (80051ac <pvPortMalloc+0x178>)
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	4b18      	ldr	r3, [pc, #96]	; (80051b4 <pvPortMalloc+0x180>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	429a      	cmp	r2, r3
 8005158:	d203      	bcs.n	8005162 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800515a:	4b14      	ldr	r3, [pc, #80]	; (80051ac <pvPortMalloc+0x178>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a15      	ldr	r2, [pc, #84]	; (80051b4 <pvPortMalloc+0x180>)
 8005160:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005164:	685a      	ldr	r2, [r3, #4]
 8005166:	4b10      	ldr	r3, [pc, #64]	; (80051a8 <pvPortMalloc+0x174>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	431a      	orrs	r2, r3
 800516c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005172:	2200      	movs	r2, #0
 8005174:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005176:	f7fe fd89 	bl	8003c8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	f003 0307 	and.w	r3, r3, #7
 8005180:	2b00      	cmp	r3, #0
 8005182:	d009      	beq.n	8005198 <pvPortMalloc+0x164>
 8005184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005188:	f383 8811 	msr	BASEPRI, r3
 800518c:	f3bf 8f6f 	isb	sy
 8005190:	f3bf 8f4f 	dsb	sy
 8005194:	60fb      	str	r3, [r7, #12]
 8005196:	e7fe      	b.n	8005196 <pvPortMalloc+0x162>
	return pvReturn;
 8005198:	69fb      	ldr	r3, [r7, #28]
}
 800519a:	4618      	mov	r0, r3
 800519c:	3728      	adds	r7, #40	; 0x28
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	20001924 	.word	0x20001924
 80051a8:	20001930 	.word	0x20001930
 80051ac:	20001928 	.word	0x20001928
 80051b0:	2000191c 	.word	0x2000191c
 80051b4:	2000192c 	.word	0x2000192c

080051b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b086      	sub	sp, #24
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d046      	beq.n	8005258 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80051ca:	2308      	movs	r3, #8
 80051cc:	425b      	negs	r3, r3
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	4413      	add	r3, r2
 80051d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	4b20      	ldr	r3, [pc, #128]	; (8005260 <vPortFree+0xa8>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4013      	ands	r3, r2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d109      	bne.n	80051fa <vPortFree+0x42>
 80051e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ea:	f383 8811 	msr	BASEPRI, r3
 80051ee:	f3bf 8f6f 	isb	sy
 80051f2:	f3bf 8f4f 	dsb	sy
 80051f6:	60fb      	str	r3, [r7, #12]
 80051f8:	e7fe      	b.n	80051f8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d009      	beq.n	8005216 <vPortFree+0x5e>
 8005202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005206:	f383 8811 	msr	BASEPRI, r3
 800520a:	f3bf 8f6f 	isb	sy
 800520e:	f3bf 8f4f 	dsb	sy
 8005212:	60bb      	str	r3, [r7, #8]
 8005214:	e7fe      	b.n	8005214 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	685a      	ldr	r2, [r3, #4]
 800521a:	4b11      	ldr	r3, [pc, #68]	; (8005260 <vPortFree+0xa8>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4013      	ands	r3, r2
 8005220:	2b00      	cmp	r3, #0
 8005222:	d019      	beq.n	8005258 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d115      	bne.n	8005258 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	685a      	ldr	r2, [r3, #4]
 8005230:	4b0b      	ldr	r3, [pc, #44]	; (8005260 <vPortFree+0xa8>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	43db      	mvns	r3, r3
 8005236:	401a      	ands	r2, r3
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800523c:	f7fe fd18 	bl	8003c70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	685a      	ldr	r2, [r3, #4]
 8005244:	4b07      	ldr	r3, [pc, #28]	; (8005264 <vPortFree+0xac>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4413      	add	r3, r2
 800524a:	4a06      	ldr	r2, [pc, #24]	; (8005264 <vPortFree+0xac>)
 800524c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800524e:	6938      	ldr	r0, [r7, #16]
 8005250:	f000 f86c 	bl	800532c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005254:	f7fe fd1a 	bl	8003c8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005258:	bf00      	nop
 800525a:	3718      	adds	r7, #24
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	20001930 	.word	0x20001930
 8005264:	20001928 	.word	0x20001928

08005268 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005268:	b480      	push	{r7}
 800526a:	b085      	sub	sp, #20
 800526c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800526e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005272:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005274:	4b27      	ldr	r3, [pc, #156]	; (8005314 <prvHeapInit+0xac>)
 8005276:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f003 0307 	and.w	r3, r3, #7
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00c      	beq.n	800529c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	3307      	adds	r3, #7
 8005286:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f023 0307 	bic.w	r3, r3, #7
 800528e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005290:	68ba      	ldr	r2, [r7, #8]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	4a1f      	ldr	r2, [pc, #124]	; (8005314 <prvHeapInit+0xac>)
 8005298:	4413      	add	r3, r2
 800529a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80052a0:	4a1d      	ldr	r2, [pc, #116]	; (8005318 <prvHeapInit+0xb0>)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80052a6:	4b1c      	ldr	r3, [pc, #112]	; (8005318 <prvHeapInit+0xb0>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	68ba      	ldr	r2, [r7, #8]
 80052b0:	4413      	add	r3, r2
 80052b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80052b4:	2208      	movs	r2, #8
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	1a9b      	subs	r3, r3, r2
 80052ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f023 0307 	bic.w	r3, r3, #7
 80052c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	4a15      	ldr	r2, [pc, #84]	; (800531c <prvHeapInit+0xb4>)
 80052c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80052ca:	4b14      	ldr	r3, [pc, #80]	; (800531c <prvHeapInit+0xb4>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2200      	movs	r2, #0
 80052d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80052d2:	4b12      	ldr	r3, [pc, #72]	; (800531c <prvHeapInit+0xb4>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2200      	movs	r2, #0
 80052d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	1ad2      	subs	r2, r2, r3
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80052e8:	4b0c      	ldr	r3, [pc, #48]	; (800531c <prvHeapInit+0xb4>)
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	4a0a      	ldr	r2, [pc, #40]	; (8005320 <prvHeapInit+0xb8>)
 80052f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	4a09      	ldr	r2, [pc, #36]	; (8005324 <prvHeapInit+0xbc>)
 80052fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005300:	4b09      	ldr	r3, [pc, #36]	; (8005328 <prvHeapInit+0xc0>)
 8005302:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005306:	601a      	str	r2, [r3, #0]
}
 8005308:	bf00      	nop
 800530a:	3714      	adds	r7, #20
 800530c:	46bd      	mov	sp, r7
 800530e:	bc80      	pop	{r7}
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	20000d1c 	.word	0x20000d1c
 8005318:	2000191c 	.word	0x2000191c
 800531c:	20001924 	.word	0x20001924
 8005320:	2000192c 	.word	0x2000192c
 8005324:	20001928 	.word	0x20001928
 8005328:	20001930 	.word	0x20001930

0800532c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005334:	4b27      	ldr	r3, [pc, #156]	; (80053d4 <prvInsertBlockIntoFreeList+0xa8>)
 8005336:	60fb      	str	r3, [r7, #12]
 8005338:	e002      	b.n	8005340 <prvInsertBlockIntoFreeList+0x14>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	60fb      	str	r3, [r7, #12]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	429a      	cmp	r2, r3
 8005348:	d8f7      	bhi.n	800533a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	68ba      	ldr	r2, [r7, #8]
 8005354:	4413      	add	r3, r2
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	429a      	cmp	r2, r3
 800535a:	d108      	bne.n	800536e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	685a      	ldr	r2, [r3, #4]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	441a      	add	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	441a      	add	r2, r3
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	429a      	cmp	r2, r3
 8005380:	d118      	bne.n	80053b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	4b14      	ldr	r3, [pc, #80]	; (80053d8 <prvInsertBlockIntoFreeList+0xac>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	429a      	cmp	r2, r3
 800538c:	d00d      	beq.n	80053aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685a      	ldr	r2, [r3, #4]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	441a      	add	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	601a      	str	r2, [r3, #0]
 80053a8:	e008      	b.n	80053bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80053aa:	4b0b      	ldr	r3, [pc, #44]	; (80053d8 <prvInsertBlockIntoFreeList+0xac>)
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	601a      	str	r2, [r3, #0]
 80053b2:	e003      	b.n	80053bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d002      	beq.n	80053ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053ca:	bf00      	nop
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bc80      	pop	{r7}
 80053d2:	4770      	bx	lr
 80053d4:	2000191c 	.word	0x2000191c
 80053d8:	20001924 	.word	0x20001924

080053dc <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80053dc:	b580      	push	{r7, lr}
 80053de:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80053e0:	4803      	ldr	r0, [pc, #12]	; (80053f0 <_cbSendSystemDesc+0x14>)
 80053e2:	f001 f9a5 	bl	8006730 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80053e6:	4803      	ldr	r0, [pc, #12]	; (80053f4 <_cbSendSystemDesc+0x18>)
 80053e8:	f001 f9a2 	bl	8006730 <SEGGER_SYSVIEW_SendSysDesc>
}
 80053ec:	bf00      	nop
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	08006d20 	.word	0x08006d20
 80053f4:	08006d5c 	.word	0x08006d5c

080053f8 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80053f8:	b580      	push	{r7, lr}
 80053fa:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80053fc:	4b06      	ldr	r3, [pc, #24]	; (8005418 <SEGGER_SYSVIEW_Conf+0x20>)
 80053fe:	6818      	ldr	r0, [r3, #0]
 8005400:	4b05      	ldr	r3, [pc, #20]	; (8005418 <SEGGER_SYSVIEW_Conf+0x20>)
 8005402:	6819      	ldr	r1, [r3, #0]
 8005404:	4b05      	ldr	r3, [pc, #20]	; (800541c <SEGGER_SYSVIEW_Conf+0x24>)
 8005406:	4a06      	ldr	r2, [pc, #24]	; (8005420 <SEGGER_SYSVIEW_Conf+0x28>)
 8005408:	f000 fd12 	bl	8005e30 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800540c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8005410:	f000 fd52 	bl	8005eb8 <SEGGER_SYSVIEW_SetRAMBase>
}
 8005414:	bf00      	nop
 8005416:	bd80      	pop	{r7, pc}
 8005418:	20000000 	.word	0x20000000
 800541c:	080053dd 	.word	0x080053dd
 8005420:	08006e9c 	.word	0x08006e9c

08005424 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8005424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005426:	b085      	sub	sp, #20
 8005428:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800542a:	2300      	movs	r3, #0
 800542c:	607b      	str	r3, [r7, #4]
 800542e:	e048      	b.n	80054c2 <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8005430:	4928      	ldr	r1, [pc, #160]	; (80054d4 <_cbSendTaskList+0xb0>)
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	4613      	mov	r3, r2
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	4413      	add	r3, r2
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	440b      	add	r3, r1
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4618      	mov	r0, r3
 8005442:	f7fe ffb7 	bl	80043b4 <uxTaskGetStackHighWaterMark>
 8005446:	4923      	ldr	r1, [pc, #140]	; (80054d4 <_cbSendTaskList+0xb0>)
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	4613      	mov	r3, r2
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	4413      	add	r3, r2
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	440b      	add	r3, r1
 8005454:	3310      	adds	r3, #16
 8005456:	6018      	str	r0, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8005458:	491e      	ldr	r1, [pc, #120]	; (80054d4 <_cbSendTaskList+0xb0>)
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	4613      	mov	r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	4413      	add	r3, r2
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	440b      	add	r3, r1
 8005466:	6818      	ldr	r0, [r3, #0]
 8005468:	491a      	ldr	r1, [pc, #104]	; (80054d4 <_cbSendTaskList+0xb0>)
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	4613      	mov	r3, r2
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	4413      	add	r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	440b      	add	r3, r1
 8005476:	3304      	adds	r3, #4
 8005478:	681c      	ldr	r4, [r3, #0]
 800547a:	4916      	ldr	r1, [pc, #88]	; (80054d4 <_cbSendTaskList+0xb0>)
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	4613      	mov	r3, r2
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	4413      	add	r3, r2
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	440b      	add	r3, r1
 8005488:	3308      	adds	r3, #8
 800548a:	681d      	ldr	r5, [r3, #0]
 800548c:	4911      	ldr	r1, [pc, #68]	; (80054d4 <_cbSendTaskList+0xb0>)
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	4613      	mov	r3, r2
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	4413      	add	r3, r2
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	440b      	add	r3, r1
 800549a:	330c      	adds	r3, #12
 800549c:	681e      	ldr	r6, [r3, #0]
 800549e:	490d      	ldr	r1, [pc, #52]	; (80054d4 <_cbSendTaskList+0xb0>)
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	4613      	mov	r3, r2
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	4413      	add	r3, r2
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	440b      	add	r3, r1
 80054ac:	3310      	adds	r3, #16
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	9300      	str	r3, [sp, #0]
 80054b2:	4633      	mov	r3, r6
 80054b4:	462a      	mov	r2, r5
 80054b6:	4621      	mov	r1, r4
 80054b8:	f000 f8b4 	bl	8005624 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	3301      	adds	r3, #1
 80054c0:	607b      	str	r3, [r7, #4]
 80054c2:	4b05      	ldr	r3, [pc, #20]	; (80054d8 <_cbSendTaskList+0xb4>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d3b1      	bcc.n	8005430 <_cbSendTaskList+0xc>
  }
}
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054d4:	20001934 	.word	0x20001934
 80054d8:	200019d4 	.word	0x200019d4

080054dc <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80054dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80054e2:	f7fe fc73 	bl	8003dcc <xTaskGetTickCountFromISR>
 80054e6:	4603      	mov	r3, r0
 80054e8:	f04f 0400 	mov.w	r4, #0
 80054ec:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80054f0:	e9d7 5600 	ldrd	r5, r6, [r7]
 80054f4:	462b      	mov	r3, r5
 80054f6:	4634      	mov	r4, r6
 80054f8:	f04f 0100 	mov.w	r1, #0
 80054fc:	f04f 0200 	mov.w	r2, #0
 8005500:	0162      	lsls	r2, r4, #5
 8005502:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8005506:	0159      	lsls	r1, r3, #5
 8005508:	460b      	mov	r3, r1
 800550a:	4614      	mov	r4, r2
 800550c:	1b5b      	subs	r3, r3, r5
 800550e:	eb64 0406 	sbc.w	r4, r4, r6
 8005512:	f04f 0100 	mov.w	r1, #0
 8005516:	f04f 0200 	mov.w	r2, #0
 800551a:	00a2      	lsls	r2, r4, #2
 800551c:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8005520:	0099      	lsls	r1, r3, #2
 8005522:	460b      	mov	r3, r1
 8005524:	4614      	mov	r4, r2
 8005526:	195b      	adds	r3, r3, r5
 8005528:	eb44 0406 	adc.w	r4, r4, r6
 800552c:	f04f 0100 	mov.w	r1, #0
 8005530:	f04f 0200 	mov.w	r2, #0
 8005534:	00e2      	lsls	r2, r4, #3
 8005536:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800553a:	00d9      	lsls	r1, r3, #3
 800553c:	460b      	mov	r3, r1
 800553e:	4614      	mov	r4, r2
 8005540:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 8005544:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8005548:	4618      	mov	r0, r3
 800554a:	4621      	mov	r1, r4
 800554c:	370c      	adds	r7, #12
 800554e:	46bd      	mov	sp, r7
 8005550:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005554 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005554:	b580      	push	{r7, lr}
 8005556:	b086      	sub	sp, #24
 8005558:	af02      	add	r7, sp, #8
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]
 8005560:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005562:	2205      	movs	r2, #5
 8005564:	492b      	ldr	r1, [pc, #172]	; (8005614 <SYSVIEW_AddTask+0xc0>)
 8005566:	68b8      	ldr	r0, [r7, #8]
 8005568:	f001 fb84 	bl	8006c74 <memcmp>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d04b      	beq.n	800560a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8005572:	4b29      	ldr	r3, [pc, #164]	; (8005618 <SYSVIEW_AddTask+0xc4>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2b07      	cmp	r3, #7
 8005578:	d903      	bls.n	8005582 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800557a:	4828      	ldr	r0, [pc, #160]	; (800561c <SYSVIEW_AddTask+0xc8>)
 800557c:	f001 fafa 	bl	8006b74 <SEGGER_SYSVIEW_Warn>
    return;
 8005580:	e044      	b.n	800560c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8005582:	4b25      	ldr	r3, [pc, #148]	; (8005618 <SYSVIEW_AddTask+0xc4>)
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	4926      	ldr	r1, [pc, #152]	; (8005620 <SYSVIEW_AddTask+0xcc>)
 8005588:	4613      	mov	r3, r2
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4413      	add	r3, r2
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	440b      	add	r3, r1
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8005596:	4b20      	ldr	r3, [pc, #128]	; (8005618 <SYSVIEW_AddTask+0xc4>)
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	4921      	ldr	r1, [pc, #132]	; (8005620 <SYSVIEW_AddTask+0xcc>)
 800559c:	4613      	mov	r3, r2
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	4413      	add	r3, r2
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	440b      	add	r3, r1
 80055a6:	3304      	adds	r3, #4
 80055a8:	68ba      	ldr	r2, [r7, #8]
 80055aa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80055ac:	4b1a      	ldr	r3, [pc, #104]	; (8005618 <SYSVIEW_AddTask+0xc4>)
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	491b      	ldr	r1, [pc, #108]	; (8005620 <SYSVIEW_AddTask+0xcc>)
 80055b2:	4613      	mov	r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	4413      	add	r3, r2
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	440b      	add	r3, r1
 80055bc:	3308      	adds	r3, #8
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80055c2:	4b15      	ldr	r3, [pc, #84]	; (8005618 <SYSVIEW_AddTask+0xc4>)
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	4916      	ldr	r1, [pc, #88]	; (8005620 <SYSVIEW_AddTask+0xcc>)
 80055c8:	4613      	mov	r3, r2
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	4413      	add	r3, r2
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	440b      	add	r3, r1
 80055d2:	330c      	adds	r3, #12
 80055d4:	683a      	ldr	r2, [r7, #0]
 80055d6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80055d8:	4b0f      	ldr	r3, [pc, #60]	; (8005618 <SYSVIEW_AddTask+0xc4>)
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	4910      	ldr	r1, [pc, #64]	; (8005620 <SYSVIEW_AddTask+0xcc>)
 80055de:	4613      	mov	r3, r2
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	4413      	add	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	440b      	add	r3, r1
 80055e8:	3310      	adds	r3, #16
 80055ea:	69ba      	ldr	r2, [r7, #24]
 80055ec:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80055ee:	4b0a      	ldr	r3, [pc, #40]	; (8005618 <SYSVIEW_AddTask+0xc4>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	3301      	adds	r3, #1
 80055f4:	4a08      	ldr	r2, [pc, #32]	; (8005618 <SYSVIEW_AddTask+0xc4>)
 80055f6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	9300      	str	r3, [sp, #0]
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	68b9      	ldr	r1, [r7, #8]
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	f000 f80e 	bl	8005624 <SYSVIEW_SendTaskInfo>
 8005608:	e000      	b.n	800560c <SYSVIEW_AddTask+0xb8>
    return;
 800560a:	bf00      	nop

}
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	08006d6c 	.word	0x08006d6c
 8005618:	200019d4 	.word	0x200019d4
 800561c:	08006d74 	.word	0x08006d74
 8005620:	20001934 	.word	0x20001934

08005624 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005624:	b580      	push	{r7, lr}
 8005626:	b08a      	sub	sp, #40	; 0x28
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
 8005630:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005632:	f107 0314 	add.w	r3, r7, #20
 8005636:	2214      	movs	r2, #20
 8005638:	2100      	movs	r1, #0
 800563a:	4618      	mov	r0, r3
 800563c:	f001 fb34 	bl	8006ca8 <memset>
  TaskInfo.TaskID     = TaskID;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005652:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005654:	f107 0314 	add.w	r3, r7, #20
 8005658:	4618      	mov	r0, r3
 800565a:	f000 ff71 	bl	8006540 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800565e:	bf00      	nop
 8005660:	3728      	adds	r7, #40	; 0x28
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
	...

08005668 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800566e:	4b21      	ldr	r3, [pc, #132]	; (80056f4 <_DoInit+0x8c>)
 8005670:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2203      	movs	r2, #3
 8005676:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2203      	movs	r2, #3
 800567c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a1d      	ldr	r2, [pc, #116]	; (80056f8 <_DoInit+0x90>)
 8005682:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a1d      	ldr	r2, [pc, #116]	; (80056fc <_DoInit+0x94>)
 8005688:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005690:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a14      	ldr	r2, [pc, #80]	; (80056f8 <_DoInit+0x90>)
 80056a8:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a14      	ldr	r2, [pc, #80]	; (8005700 <_DoInit+0x98>)
 80056ae:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2210      	movs	r2, #16
 80056b4:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	3307      	adds	r3, #7
 80056cc:	4a0d      	ldr	r2, [pc, #52]	; (8005704 <_DoInit+0x9c>)
 80056ce:	6810      	ldr	r0, [r2, #0]
 80056d0:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a0c      	ldr	r2, [pc, #48]	; (8005708 <_DoInit+0xa0>)
 80056d6:	6810      	ldr	r0, [r2, #0]
 80056d8:	6018      	str	r0, [r3, #0]
 80056da:	8891      	ldrh	r1, [r2, #4]
 80056dc:	7992      	ldrb	r2, [r2, #6]
 80056de:	8099      	strh	r1, [r3, #4]
 80056e0:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2220      	movs	r2, #32
 80056e6:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
 80056e8:	bf00      	nop
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bc80      	pop	{r7}
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	20002800 	.word	0x20002800
 80056f8:	08006dc4 	.word	0x08006dc4
 80056fc:	200019d8 	.word	0x200019d8
 8005700:	20001dd8 	.word	0x20001dd8
 8005704:	08006dd0 	.word	0x08006dd0
 8005708:	08006dd4 	.word	0x08006dd4

0800570c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800570c:	b580      	push	{r7, lr}
 800570e:	b08c      	sub	sp, #48	; 0x30
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005718:	4b3e      	ldr	r3, [pc, #248]	; (8005814 <SEGGER_RTT_ReadNoLock+0x108>)
 800571a:	623b      	str	r3, [r7, #32]
 800571c:	6a3b      	ldr	r3, [r7, #32]
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	b2db      	uxtb	r3, r3
 8005722:	2b00      	cmp	r3, #0
 8005724:	d101      	bne.n	800572a <SEGGER_RTT_ReadNoLock+0x1e>
 8005726:	f7ff ff9f 	bl	8005668 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	4613      	mov	r3, r2
 800572e:	005b      	lsls	r3, r3, #1
 8005730:	4413      	add	r3, r2
 8005732:	00db      	lsls	r3, r3, #3
 8005734:	3360      	adds	r3, #96	; 0x60
 8005736:	4a37      	ldr	r2, [pc, #220]	; (8005814 <SEGGER_RTT_ReadNoLock+0x108>)
 8005738:	4413      	add	r3, r2
 800573a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800574c:	2300      	movs	r3, #0
 800574e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005750:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	429a      	cmp	r2, r3
 8005756:	d92b      	bls.n	80057b0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	689a      	ldr	r2, [r3, #8]
 800575c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4293      	cmp	r3, r2
 8005768:	bf28      	it	cs
 800576a:	4613      	movcs	r3, r2
 800576c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	685a      	ldr	r2, [r3, #4]
 8005772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005774:	4413      	add	r3, r2
 8005776:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	6939      	ldr	r1, [r7, #16]
 800577c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800577e:	f001 fa88 	bl	8006c92 <memcpy>
    NumBytesRead += NumBytesRem;
 8005782:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	4413      	add	r3, r2
 8005788:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800578a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	4413      	add	r3, r2
 8005790:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800579a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	4413      	add	r3, r2
 80057a0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d101      	bne.n	80057b0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80057ac:	2300      	movs	r3, #0
 80057ae:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80057b0:	69ba      	ldr	r2, [r7, #24]
 80057b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4293      	cmp	r3, r2
 80057be:	bf28      	it	cs
 80057c0:	4613      	movcs	r3, r2
 80057c2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d019      	beq.n	80057fe <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	685a      	ldr	r2, [r3, #4]
 80057ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d0:	4413      	add	r3, r2
 80057d2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80057d4:	697a      	ldr	r2, [r7, #20]
 80057d6:	6939      	ldr	r1, [r7, #16]
 80057d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057da:	f001 fa5a 	bl	8006c92 <memcpy>
    NumBytesRead += NumBytesRem;
 80057de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	4413      	add	r3, r2
 80057e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80057e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	4413      	add	r3, r2
 80057ec:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80057f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	4413      	add	r3, r2
 80057fc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80057fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005800:	2b00      	cmp	r3, #0
 8005802:	d002      	beq.n	800580a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005808:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800580a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800580c:	4618      	mov	r0, r3
 800580e:	3730      	adds	r7, #48	; 0x30
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	20002800 	.word	0x20002800

08005818 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005818:	b580      	push	{r7, lr}
 800581a:	b088      	sub	sp, #32
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	607a      	str	r2, [r7, #4]
 8005824:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005826:	4b3c      	ldr	r3, [pc, #240]	; (8005918 <SEGGER_RTT_AllocUpBuffer+0x100>)
 8005828:	61bb      	str	r3, [r7, #24]
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	b2db      	uxtb	r3, r3
 8005830:	2b00      	cmp	r3, #0
 8005832:	d101      	bne.n	8005838 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005834:	f7ff ff18 	bl	8005668 <_DoInit>
  SEGGER_RTT_LOCK();
 8005838:	f3ef 8311 	mrs	r3, BASEPRI
 800583c:	f04f 0120 	mov.w	r1, #32
 8005840:	f381 8811 	msr	BASEPRI, r1
 8005844:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005846:	4b34      	ldr	r3, [pc, #208]	; (8005918 <SEGGER_RTT_AllocUpBuffer+0x100>)
 8005848:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800584a:	2300      	movs	r3, #0
 800584c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800584e:	6939      	ldr	r1, [r7, #16]
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	1c5a      	adds	r2, r3, #1
 8005854:	4613      	mov	r3, r2
 8005856:	005b      	lsls	r3, r3, #1
 8005858:	4413      	add	r3, r2
 800585a:	00db      	lsls	r3, r3, #3
 800585c:	440b      	add	r3, r1
 800585e:	3304      	adds	r3, #4
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d008      	beq.n	8005878 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	3301      	adds	r3, #1
 800586a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	69fa      	ldr	r2, [r7, #28]
 8005872:	429a      	cmp	r2, r3
 8005874:	dbeb      	blt.n	800584e <SEGGER_RTT_AllocUpBuffer+0x36>
 8005876:	e000      	b.n	800587a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005878:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	69fa      	ldr	r2, [r7, #28]
 8005880:	429a      	cmp	r2, r3
 8005882:	da3d      	bge.n	8005900 <SEGGER_RTT_AllocUpBuffer+0xe8>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005884:	6939      	ldr	r1, [r7, #16]
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	1c5a      	adds	r2, r3, #1
 800588a:	4613      	mov	r3, r2
 800588c:	005b      	lsls	r3, r3, #1
 800588e:	4413      	add	r3, r2
 8005890:	00db      	lsls	r3, r3, #3
 8005892:	440b      	add	r3, r1
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005898:	6939      	ldr	r1, [r7, #16]
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	1c5a      	adds	r2, r3, #1
 800589e:	4613      	mov	r3, r2
 80058a0:	005b      	lsls	r3, r3, #1
 80058a2:	4413      	add	r3, r2
 80058a4:	00db      	lsls	r3, r3, #3
 80058a6:	440b      	add	r3, r1
 80058a8:	3304      	adds	r3, #4
 80058aa:	68ba      	ldr	r2, [r7, #8]
 80058ac:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80058ae:	6939      	ldr	r1, [r7, #16]
 80058b0:	69fa      	ldr	r2, [r7, #28]
 80058b2:	4613      	mov	r3, r2
 80058b4:	005b      	lsls	r3, r3, #1
 80058b6:	4413      	add	r3, r2
 80058b8:	00db      	lsls	r3, r3, #3
 80058ba:	440b      	add	r3, r1
 80058bc:	3320      	adds	r3, #32
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80058c2:	6939      	ldr	r1, [r7, #16]
 80058c4:	69fa      	ldr	r2, [r7, #28]
 80058c6:	4613      	mov	r3, r2
 80058c8:	005b      	lsls	r3, r3, #1
 80058ca:	4413      	add	r3, r2
 80058cc:	00db      	lsls	r3, r3, #3
 80058ce:	440b      	add	r3, r1
 80058d0:	3328      	adds	r3, #40	; 0x28
 80058d2:	2200      	movs	r2, #0
 80058d4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80058d6:	6939      	ldr	r1, [r7, #16]
 80058d8:	69fa      	ldr	r2, [r7, #28]
 80058da:	4613      	mov	r3, r2
 80058dc:	005b      	lsls	r3, r3, #1
 80058de:	4413      	add	r3, r2
 80058e0:	00db      	lsls	r3, r3, #3
 80058e2:	440b      	add	r3, r1
 80058e4:	3324      	adds	r3, #36	; 0x24
 80058e6:	2200      	movs	r2, #0
 80058e8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80058ea:	6939      	ldr	r1, [r7, #16]
 80058ec:	69fa      	ldr	r2, [r7, #28]
 80058ee:	4613      	mov	r3, r2
 80058f0:	005b      	lsls	r3, r3, #1
 80058f2:	4413      	add	r3, r2
 80058f4:	00db      	lsls	r3, r3, #3
 80058f6:	440b      	add	r3, r1
 80058f8:	332c      	adds	r3, #44	; 0x2c
 80058fa:	683a      	ldr	r2, [r7, #0]
 80058fc:	601a      	str	r2, [r3, #0]
 80058fe:	e002      	b.n	8005906 <SEGGER_RTT_AllocUpBuffer+0xee>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
  } else {
    BufferIndex = -1;
 8005900:	f04f 33ff 	mov.w	r3, #4294967295
 8005904:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800590c:	69fb      	ldr	r3, [r7, #28]
}
 800590e:	4618      	mov	r0, r3
 8005910:	3720      	adds	r7, #32
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	20002800 	.word	0x20002800

0800591c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800591c:	b580      	push	{r7, lr}
 800591e:	b088      	sub	sp, #32
 8005920:	af00      	add	r7, sp, #0
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	607a      	str	r2, [r7, #4]
 8005928:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800592a:	4b32      	ldr	r3, [pc, #200]	; (80059f4 <SEGGER_RTT_ConfigDownBuffer+0xd8>)
 800592c:	61bb      	str	r3, [r7, #24]
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	b2db      	uxtb	r3, r3
 8005934:	2b00      	cmp	r3, #0
 8005936:	d101      	bne.n	800593c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005938:	f7ff fe96 	bl	8005668 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800593c:	4b2d      	ldr	r3, [pc, #180]	; (80059f4 <SEGGER_RTT_ConfigDownBuffer+0xd8>)
 800593e:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	695b      	ldr	r3, [r3, #20]
 8005944:	461a      	mov	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	4293      	cmp	r3, r2
 800594a:	d24b      	bcs.n	80059e4 <SEGGER_RTT_ConfigDownBuffer+0xc8>
    SEGGER_RTT_LOCK();
 800594c:	f3ef 8311 	mrs	r3, BASEPRI
 8005950:	f04f 0120 	mov.w	r1, #32
 8005954:	f381 8811 	msr	BASEPRI, r1
 8005958:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d031      	beq.n	80059c4 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005960:	6979      	ldr	r1, [r7, #20]
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	4613      	mov	r3, r2
 8005966:	005b      	lsls	r3, r3, #1
 8005968:	4413      	add	r3, r2
 800596a:	00db      	lsls	r3, r3, #3
 800596c:	440b      	add	r3, r1
 800596e:	3360      	adds	r3, #96	; 0x60
 8005970:	68ba      	ldr	r2, [r7, #8]
 8005972:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005974:	6979      	ldr	r1, [r7, #20]
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	4613      	mov	r3, r2
 800597a:	005b      	lsls	r3, r3, #1
 800597c:	4413      	add	r3, r2
 800597e:	00db      	lsls	r3, r3, #3
 8005980:	440b      	add	r3, r1
 8005982:	3364      	adds	r3, #100	; 0x64
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8005988:	6979      	ldr	r1, [r7, #20]
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	4613      	mov	r3, r2
 800598e:	005b      	lsls	r3, r3, #1
 8005990:	4413      	add	r3, r2
 8005992:	00db      	lsls	r3, r3, #3
 8005994:	440b      	add	r3, r1
 8005996:	3368      	adds	r3, #104	; 0x68
 8005998:	683a      	ldr	r2, [r7, #0]
 800599a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 800599c:	6979      	ldr	r1, [r7, #20]
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	4613      	mov	r3, r2
 80059a2:	005b      	lsls	r3, r3, #1
 80059a4:	4413      	add	r3, r2
 80059a6:	00db      	lsls	r3, r3, #3
 80059a8:	440b      	add	r3, r1
 80059aa:	3370      	adds	r3, #112	; 0x70
 80059ac:	2200      	movs	r2, #0
 80059ae:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 80059b0:	6979      	ldr	r1, [r7, #20]
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	4613      	mov	r3, r2
 80059b6:	005b      	lsls	r3, r3, #1
 80059b8:	4413      	add	r3, r2
 80059ba:	00db      	lsls	r3, r3, #3
 80059bc:	440b      	add	r3, r1
 80059be:	336c      	adds	r3, #108	; 0x6c
 80059c0:	2200      	movs	r2, #0
 80059c2:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 80059c4:	6979      	ldr	r1, [r7, #20]
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	4613      	mov	r3, r2
 80059ca:	005b      	lsls	r3, r3, #1
 80059cc:	4413      	add	r3, r2
 80059ce:	00db      	lsls	r3, r3, #3
 80059d0:	440b      	add	r3, r1
 80059d2:	3374      	adds	r3, #116	; 0x74
 80059d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059d6:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    SEGGER_RTT_UNLOCK();
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80059de:	2300      	movs	r3, #0
 80059e0:	61fb      	str	r3, [r7, #28]
 80059e2:	e002      	b.n	80059ea <SEGGER_RTT_ConfigDownBuffer+0xce>
  } else {
    r = -1;
 80059e4:	f04f 33ff 	mov.w	r3, #4294967295
 80059e8:	61fb      	str	r3, [r7, #28]
  }
  return r;
 80059ea:	69fb      	ldr	r3, [r7, #28]
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3720      	adds	r7, #32
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}
 80059f4:	20002800 	.word	0x20002800

080059f8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80059f8:	b480      	push	{r7}
 80059fa:	b087      	sub	sp, #28
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005a04:	2300      	movs	r3, #0
 8005a06:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005a08:	e002      	b.n	8005a10 <_EncodeStr+0x18>
    Len++;
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005a10:	68ba      	ldr	r2, [r7, #8]
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	4413      	add	r3, r2
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d1f6      	bne.n	8005a0a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005a1c:	693a      	ldr	r2, [r7, #16]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d901      	bls.n	8005a28 <_EncodeStr+0x30>
    Len = Limit;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	2bfe      	cmp	r3, #254	; 0xfe
 8005a2c:	d806      	bhi.n	8005a3c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	1c5a      	adds	r2, r3, #1
 8005a32:	60fa      	str	r2, [r7, #12]
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	b2d2      	uxtb	r2, r2
 8005a38:	701a      	strb	r2, [r3, #0]
 8005a3a:	e011      	b.n	8005a60 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	1c5a      	adds	r2, r3, #1
 8005a40:	60fa      	str	r2, [r7, #12]
 8005a42:	22ff      	movs	r2, #255	; 0xff
 8005a44:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	1c5a      	adds	r2, r3, #1
 8005a4a:	60fa      	str	r2, [r7, #12]
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	b2d2      	uxtb	r2, r2
 8005a50:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	0a19      	lsrs	r1, r3, #8
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	1c5a      	adds	r2, r3, #1
 8005a5a:	60fa      	str	r2, [r7, #12]
 8005a5c:	b2ca      	uxtb	r2, r1
 8005a5e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005a60:	2300      	movs	r3, #0
 8005a62:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005a64:	e00a      	b.n	8005a7c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8005a66:	68ba      	ldr	r2, [r7, #8]
 8005a68:	1c53      	adds	r3, r2, #1
 8005a6a:	60bb      	str	r3, [r7, #8]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	1c59      	adds	r1, r3, #1
 8005a70:	60f9      	str	r1, [r7, #12]
 8005a72:	7812      	ldrb	r2, [r2, #0]
 8005a74:	701a      	strb	r2, [r3, #0]
    n++;
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005a7c:	697a      	ldr	r2, [r7, #20]
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d3f0      	bcc.n	8005a66 <_EncodeStr+0x6e>
  }
  return pPayload;
 8005a84:	68fb      	ldr	r3, [r7, #12]
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	371c      	adds	r7, #28
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bc80      	pop	{r7}
 8005a8e:	4770      	bx	lr

08005a90 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	3304      	adds	r3, #4
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bc80      	pop	{r7}
 8005aa4:	4770      	bx	lr
	...

08005aa8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005aae:	4b33      	ldr	r3, [pc, #204]	; (8005b7c <_HandleIncomingPacket+0xd4>)
 8005ab0:	7e1b      	ldrb	r3, [r3, #24]
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	1cfb      	adds	r3, r7, #3
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	4619      	mov	r1, r3
 8005aba:	f7ff fe27 	bl	800570c <SEGGER_RTT_ReadNoLock>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	dd4d      	ble.n	8005b64 <_HandleIncomingPacket+0xbc>
    switch (Cmd) {
 8005ac8:	78fb      	ldrb	r3, [r7, #3]
 8005aca:	2b05      	cmp	r3, #5
 8005acc:	d022      	beq.n	8005b14 <_HandleIncomingPacket+0x6c>
 8005ace:	2b05      	cmp	r3, #5
 8005ad0:	dc0b      	bgt.n	8005aea <_HandleIncomingPacket+0x42>
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d015      	beq.n	8005b02 <_HandleIncomingPacket+0x5a>
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	dc02      	bgt.n	8005ae0 <_HandleIncomingPacket+0x38>
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d00e      	beq.n	8005afc <_HandleIncomingPacket+0x54>
 8005ade:	e034      	b.n	8005b4a <_HandleIncomingPacket+0xa2>
 8005ae0:	2b03      	cmp	r3, #3
 8005ae2:	d011      	beq.n	8005b08 <_HandleIncomingPacket+0x60>
 8005ae4:	2b04      	cmp	r3, #4
 8005ae6:	d012      	beq.n	8005b0e <_HandleIncomingPacket+0x66>
 8005ae8:	e02f      	b.n	8005b4a <_HandleIncomingPacket+0xa2>
 8005aea:	2b07      	cmp	r3, #7
 8005aec:	d018      	beq.n	8005b20 <_HandleIncomingPacket+0x78>
 8005aee:	2b07      	cmp	r3, #7
 8005af0:	db13      	blt.n	8005b1a <_HandleIncomingPacket+0x72>
 8005af2:	2b7f      	cmp	r3, #127	; 0x7f
 8005af4:	d038      	beq.n	8005b68 <_HandleIncomingPacket+0xc0>
 8005af6:	2b80      	cmp	r3, #128	; 0x80
 8005af8:	d015      	beq.n	8005b26 <_HandleIncomingPacket+0x7e>
 8005afa:	e026      	b.n	8005b4a <_HandleIncomingPacket+0xa2>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005afc:	f000 fba6 	bl	800624c <SEGGER_SYSVIEW_Start>
      break;
 8005b00:	e037      	b.n	8005b72 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005b02:	f000 fc5d 	bl	80063c0 <SEGGER_SYSVIEW_Stop>
      break;
 8005b06:	e034      	b.n	8005b72 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005b08:	f000 fe36 	bl	8006778 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005b0c:	e031      	b.n	8005b72 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005b0e:	f000 fdfb 	bl	8006708 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005b12:	e02e      	b.n	8005b72 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005b14:	f000 fc7a 	bl	800640c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005b18:	e02b      	b.n	8005b72 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005b1a:	f000 ffed 	bl	8006af8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005b1e:	e028      	b.n	8005b72 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005b20:	f000 ffcc 	bl	8006abc <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005b24:	e025      	b.n	8005b72 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005b26:	4b15      	ldr	r3, [pc, #84]	; (8005b7c <_HandleIncomingPacket+0xd4>)
 8005b28:	7e1b      	ldrb	r3, [r3, #24]
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	1cfb      	adds	r3, r7, #3
 8005b2e:	2201      	movs	r2, #1
 8005b30:	4619      	mov	r1, r3
 8005b32:	f7ff fdeb 	bl	800570c <SEGGER_RTT_ReadNoLock>
 8005b36:	4603      	mov	r3, r0
 8005b38:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	dd15      	ble.n	8005b6c <_HandleIncomingPacket+0xc4>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005b40:	78fb      	ldrb	r3, [r7, #3]
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 ff3a 	bl	80069bc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005b48:	e010      	b.n	8005b6c <_HandleIncomingPacket+0xc4>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005b4a:	78fb      	ldrb	r3, [r7, #3]
 8005b4c:	b25b      	sxtb	r3, r3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	da0e      	bge.n	8005b70 <_HandleIncomingPacket+0xc8>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005b52:	4b0a      	ldr	r3, [pc, #40]	; (8005b7c <_HandleIncomingPacket+0xd4>)
 8005b54:	7e1b      	ldrb	r3, [r3, #24]
 8005b56:	4618      	mov	r0, r3
 8005b58:	1cfb      	adds	r3, r7, #3
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	f7ff fdd5 	bl	800570c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005b62:	e005      	b.n	8005b70 <_HandleIncomingPacket+0xc8>
    }
  }
 8005b64:	bf00      	nop
 8005b66:	e004      	b.n	8005b72 <_HandleIncomingPacket+0xca>
      break;
 8005b68:	bf00      	nop
 8005b6a:	e002      	b.n	8005b72 <_HandleIncomingPacket+0xca>
      break;
 8005b6c:	bf00      	nop
 8005b6e:	e000      	b.n	8005b72 <_HandleIncomingPacket+0xca>
      break;
 8005b70:	bf00      	nop
}
 8005b72:	bf00      	nop
 8005b74:	3708      	adds	r7, #8
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	200025f0 	.word	0x200025f0

08005b80 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b08c      	sub	sp, #48	; 0x30
 8005b84:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005b86:	2301      	movs	r3, #1
 8005b88:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005b8a:	1d3b      	adds	r3, r7, #4
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b94:	4b31      	ldr	r3, [pc, #196]	; (8005c5c <_TrySendOverflowPacket+0xdc>)
 8005b96:	695b      	ldr	r3, [r3, #20]
 8005b98:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b9a:	e00b      	b.n	8005bb4 <_TrySendOverflowPacket+0x34>
 8005b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9e:	b2da      	uxtb	r2, r3
 8005ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba2:	1c59      	adds	r1, r3, #1
 8005ba4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005ba6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005baa:	b2d2      	uxtb	r2, r2
 8005bac:	701a      	strb	r2, [r3, #0]
 8005bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb0:	09db      	lsrs	r3, r3, #7
 8005bb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb6:	2b7f      	cmp	r3, #127	; 0x7f
 8005bb8:	d8f0      	bhi.n	8005b9c <_TrySendOverflowPacket+0x1c>
 8005bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bbc:	1c5a      	adds	r2, r3, #1
 8005bbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005bc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bc2:	b2d2      	uxtb	r2, r2
 8005bc4:	701a      	strb	r2, [r3, #0]
 8005bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005bca:	4b25      	ldr	r3, [pc, #148]	; (8005c60 <_TrySendOverflowPacket+0xe0>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005bd0:	4b22      	ldr	r3, [pc, #136]	; (8005c5c <_TrySendOverflowPacket+0xdc>)
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	69ba      	ldr	r2, [r7, #24]
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	623b      	str	r3, [r7, #32]
 8005be2:	e00b      	b.n	8005bfc <_TrySendOverflowPacket+0x7c>
 8005be4:	6a3b      	ldr	r3, [r7, #32]
 8005be6:	b2da      	uxtb	r2, r3
 8005be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bea:	1c59      	adds	r1, r3, #1
 8005bec:	6279      	str	r1, [r7, #36]	; 0x24
 8005bee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bf2:	b2d2      	uxtb	r2, r2
 8005bf4:	701a      	strb	r2, [r3, #0]
 8005bf6:	6a3b      	ldr	r3, [r7, #32]
 8005bf8:	09db      	lsrs	r3, r3, #7
 8005bfa:	623b      	str	r3, [r7, #32]
 8005bfc:	6a3b      	ldr	r3, [r7, #32]
 8005bfe:	2b7f      	cmp	r3, #127	; 0x7f
 8005c00:	d8f0      	bhi.n	8005be4 <_TrySendOverflowPacket+0x64>
 8005c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c04:	1c5a      	adds	r2, r3, #1
 8005c06:	627a      	str	r2, [r7, #36]	; 0x24
 8005c08:	6a3a      	ldr	r2, [r7, #32]
 8005c0a:	b2d2      	uxtb	r2, r2
 8005c0c:	701a      	strb	r2, [r3, #0]
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c10:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005c12:	4b12      	ldr	r3, [pc, #72]	; (8005c5c <_TrySendOverflowPacket+0xdc>)
 8005c14:	785b      	ldrb	r3, [r3, #1]
 8005c16:	4618      	mov	r0, r3
 8005c18:	69fa      	ldr	r2, [r7, #28]
 8005c1a:	1d3b      	adds	r3, r7, #4
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	461a      	mov	r2, r3
 8005c20:	1d3b      	adds	r3, r7, #4
 8005c22:	4619      	mov	r1, r3
 8005c24:	f7fa faac 	bl	8000180 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d009      	beq.n	8005c46 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005c32:	4a0a      	ldr	r2, [pc, #40]	; (8005c5c <_TrySendOverflowPacket+0xdc>)
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005c38:	4b08      	ldr	r3, [pc, #32]	; (8005c5c <_TrySendOverflowPacket+0xdc>)
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	3b01      	subs	r3, #1
 8005c3e:	b2da      	uxtb	r2, r3
 8005c40:	4b06      	ldr	r3, [pc, #24]	; (8005c5c <_TrySendOverflowPacket+0xdc>)
 8005c42:	701a      	strb	r2, [r3, #0]
 8005c44:	e004      	b.n	8005c50 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005c46:	4b05      	ldr	r3, [pc, #20]	; (8005c5c <_TrySendOverflowPacket+0xdc>)
 8005c48:	695b      	ldr	r3, [r3, #20]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	4a03      	ldr	r2, [pc, #12]	; (8005c5c <_TrySendOverflowPacket+0xdc>)
 8005c4e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005c50:	693b      	ldr	r3, [r7, #16]
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3730      	adds	r7, #48	; 0x30
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	200025f0 	.word	0x200025f0
 8005c60:	e0001004 	.word	0xe0001004

08005c64 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b08a      	sub	sp, #40	; 0x28
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005c70:	4b6c      	ldr	r3, [pc, #432]	; (8005e24 <_SendPacket+0x1c0>)
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d010      	beq.n	8005c9a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005c78:	4b6a      	ldr	r3, [pc, #424]	; (8005e24 <_SendPacket+0x1c0>)
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	f000 80a3 	beq.w	8005dc8 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005c82:	4b68      	ldr	r3, [pc, #416]	; (8005e24 <_SendPacket+0x1c0>)
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d109      	bne.n	8005c9e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005c8a:	f7ff ff79 	bl	8005b80 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005c8e:	4b65      	ldr	r3, [pc, #404]	; (8005e24 <_SendPacket+0x1c0>)
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	f040 809a 	bne.w	8005dcc <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8005c98:	e001      	b.n	8005c9e <_SendPacket+0x3a>
    goto Send;
 8005c9a:	bf00      	nop
 8005c9c:	e000      	b.n	8005ca0 <_SendPacket+0x3c>
Send:
 8005c9e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2b1f      	cmp	r3, #31
 8005ca4:	d809      	bhi.n	8005cba <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005ca6:	4b5f      	ldr	r3, [pc, #380]	; (8005e24 <_SendPacket+0x1c0>)
 8005ca8:	69da      	ldr	r2, [r3, #28]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	fa22 f303 	lsr.w	r3, r2, r3
 8005cb0:	f003 0301 	and.w	r3, r3, #1
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f040 808b 	bne.w	8005dd0 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2b17      	cmp	r3, #23
 8005cbe:	d807      	bhi.n	8005cd0 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	60fb      	str	r3, [r7, #12]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	b2da      	uxtb	r2, r3
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	701a      	strb	r2, [r3, #0]
 8005cce:	e03d      	b.n	8005d4c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005cd0:	68ba      	ldr	r2, [r7, #8]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	2b7f      	cmp	r3, #127	; 0x7f
 8005cdc:	d912      	bls.n	8005d04 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	09da      	lsrs	r2, r3, #7
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	3b01      	subs	r3, #1
 8005ce6:	60fb      	str	r3, [r7, #12]
 8005ce8:	b2d2      	uxtb	r2, r2
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	3a01      	subs	r2, #1
 8005cf6:	60fa      	str	r2, [r7, #12]
 8005cf8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005cfc:	b2da      	uxtb	r2, r3
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	701a      	strb	r2, [r3, #0]
 8005d02:	e006      	b.n	8005d12 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	3b01      	subs	r3, #1
 8005d08:	60fb      	str	r3, [r7, #12]
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	b2da      	uxtb	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2b7f      	cmp	r3, #127	; 0x7f
 8005d16:	d912      	bls.n	8005d3e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	09da      	lsrs	r2, r3, #7
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	3b01      	subs	r3, #1
 8005d20:	60fb      	str	r3, [r7, #12]
 8005d22:	b2d2      	uxtb	r2, r2
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	3a01      	subs	r2, #1
 8005d30:	60fa      	str	r2, [r7, #12]
 8005d32:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d36:	b2da      	uxtb	r2, r3
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	701a      	strb	r2, [r3, #0]
 8005d3c:	e006      	b.n	8005d4c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	3b01      	subs	r3, #1
 8005d42:	60fb      	str	r3, [r7, #12]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	b2da      	uxtb	r2, r3
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005d4c:	4b36      	ldr	r3, [pc, #216]	; (8005e28 <_SendPacket+0x1c4>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005d52:	4b34      	ldr	r3, [pc, #208]	; (8005e24 <_SendPacket+0x1c0>)
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	69ba      	ldr	r2, [r7, #24]
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	623b      	str	r3, [r7, #32]
 8005d64:	e00b      	b.n	8005d7e <_SendPacket+0x11a>
 8005d66:	6a3b      	ldr	r3, [r7, #32]
 8005d68:	b2da      	uxtb	r2, r3
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6c:	1c59      	adds	r1, r3, #1
 8005d6e:	6279      	str	r1, [r7, #36]	; 0x24
 8005d70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d74:	b2d2      	uxtb	r2, r2
 8005d76:	701a      	strb	r2, [r3, #0]
 8005d78:	6a3b      	ldr	r3, [r7, #32]
 8005d7a:	09db      	lsrs	r3, r3, #7
 8005d7c:	623b      	str	r3, [r7, #32]
 8005d7e:	6a3b      	ldr	r3, [r7, #32]
 8005d80:	2b7f      	cmp	r3, #127	; 0x7f
 8005d82:	d8f0      	bhi.n	8005d66 <_SendPacket+0x102>
 8005d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d86:	1c5a      	adds	r2, r3, #1
 8005d88:	627a      	str	r2, [r7, #36]	; 0x24
 8005d8a:	6a3a      	ldr	r2, [r7, #32]
 8005d8c:	b2d2      	uxtb	r2, r2
 8005d8e:	701a      	strb	r2, [r3, #0]
 8005d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d92:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005d94:	4b23      	ldr	r3, [pc, #140]	; (8005e24 <_SendPacket+0x1c0>)
 8005d96:	785b      	ldrb	r3, [r3, #1]
 8005d98:	4618      	mov	r0, r3
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	461a      	mov	r2, r3
 8005da2:	68f9      	ldr	r1, [r7, #12]
 8005da4:	f7fa f9ec 	bl	8000180 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005da8:	4603      	mov	r3, r0
 8005daa:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d003      	beq.n	8005dba <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005db2:	4a1c      	ldr	r2, [pc, #112]	; (8005e24 <_SendPacket+0x1c0>)
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	60d3      	str	r3, [r2, #12]
 8005db8:	e00b      	b.n	8005dd2 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005dba:	4b1a      	ldr	r3, [pc, #104]	; (8005e24 <_SendPacket+0x1c0>)
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	b2da      	uxtb	r2, r3
 8005dc2:	4b18      	ldr	r3, [pc, #96]	; (8005e24 <_SendPacket+0x1c0>)
 8005dc4:	701a      	strb	r2, [r3, #0]
 8005dc6:	e004      	b.n	8005dd2 <_SendPacket+0x16e>
    goto SendDone;
 8005dc8:	bf00      	nop
 8005dca:	e002      	b.n	8005dd2 <_SendPacket+0x16e>
      goto SendDone;
 8005dcc:	bf00      	nop
 8005dce:	e000      	b.n	8005dd2 <_SendPacket+0x16e>
      goto SendDone;
 8005dd0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005dd2:	4b14      	ldr	r3, [pc, #80]	; (8005e24 <_SendPacket+0x1c0>)
 8005dd4:	7e1b      	ldrb	r3, [r3, #24]
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	4a14      	ldr	r2, [pc, #80]	; (8005e2c <_SendPacket+0x1c8>)
 8005dda:	460b      	mov	r3, r1
 8005ddc:	005b      	lsls	r3, r3, #1
 8005dde:	440b      	add	r3, r1
 8005de0:	00db      	lsls	r3, r3, #3
 8005de2:	4413      	add	r3, r2
 8005de4:	336c      	adds	r3, #108	; 0x6c
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	4b0e      	ldr	r3, [pc, #56]	; (8005e24 <_SendPacket+0x1c0>)
 8005dea:	7e1b      	ldrb	r3, [r3, #24]
 8005dec:	4618      	mov	r0, r3
 8005dee:	490f      	ldr	r1, [pc, #60]	; (8005e2c <_SendPacket+0x1c8>)
 8005df0:	4603      	mov	r3, r0
 8005df2:	005b      	lsls	r3, r3, #1
 8005df4:	4403      	add	r3, r0
 8005df6:	00db      	lsls	r3, r3, #3
 8005df8:	440b      	add	r3, r1
 8005dfa:	3370      	adds	r3, #112	; 0x70
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d00b      	beq.n	8005e1a <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005e02:	4b08      	ldr	r3, [pc, #32]	; (8005e24 <_SendPacket+0x1c0>)
 8005e04:	789b      	ldrb	r3, [r3, #2]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d107      	bne.n	8005e1a <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005e0a:	4b06      	ldr	r3, [pc, #24]	; (8005e24 <_SendPacket+0x1c0>)
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005e10:	f7ff fe4a 	bl	8005aa8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005e14:	4b03      	ldr	r3, [pc, #12]	; (8005e24 <_SendPacket+0x1c0>)
 8005e16:	2200      	movs	r2, #0
 8005e18:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005e1a:	bf00      	nop
 8005e1c:	3728      	adds	r7, #40	; 0x28
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	200025f0 	.word	0x200025f0
 8005e28:	e0001004 	.word	0xe0001004
 8005e2c:	20002800 	.word	0x20002800

08005e30 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b086      	sub	sp, #24
 8005e34:	af02      	add	r7, sp, #8
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]
 8005e3c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005e3e:	2300      	movs	r3, #0
 8005e40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e44:	4917      	ldr	r1, [pc, #92]	; (8005ea4 <SEGGER_SYSVIEW_Init+0x74>)
 8005e46:	4818      	ldr	r0, [pc, #96]	; (8005ea8 <SEGGER_SYSVIEW_Init+0x78>)
 8005e48:	f7ff fce6 	bl	8005818 <SEGGER_RTT_AllocUpBuffer>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	b2da      	uxtb	r2, r3
 8005e50:	4b16      	ldr	r3, [pc, #88]	; (8005eac <SEGGER_SYSVIEW_Init+0x7c>)
 8005e52:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005e54:	4b15      	ldr	r3, [pc, #84]	; (8005eac <SEGGER_SYSVIEW_Init+0x7c>)
 8005e56:	785a      	ldrb	r2, [r3, #1]
 8005e58:	4b14      	ldr	r3, [pc, #80]	; (8005eac <SEGGER_SYSVIEW_Init+0x7c>)
 8005e5a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005e5c:	4b13      	ldr	r3, [pc, #76]	; (8005eac <SEGGER_SYSVIEW_Init+0x7c>)
 8005e5e:	7e1b      	ldrb	r3, [r3, #24]
 8005e60:	4618      	mov	r0, r3
 8005e62:	2300      	movs	r3, #0
 8005e64:	9300      	str	r3, [sp, #0]
 8005e66:	2308      	movs	r3, #8
 8005e68:	4a11      	ldr	r2, [pc, #68]	; (8005eb0 <SEGGER_SYSVIEW_Init+0x80>)
 8005e6a:	490f      	ldr	r1, [pc, #60]	; (8005ea8 <SEGGER_SYSVIEW_Init+0x78>)
 8005e6c:	f7ff fd56 	bl	800591c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005e70:	4b0e      	ldr	r3, [pc, #56]	; (8005eac <SEGGER_SYSVIEW_Init+0x7c>)
 8005e72:	2200      	movs	r2, #0
 8005e74:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005e76:	4b0f      	ldr	r3, [pc, #60]	; (8005eb4 <SEGGER_SYSVIEW_Init+0x84>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a0c      	ldr	r2, [pc, #48]	; (8005eac <SEGGER_SYSVIEW_Init+0x7c>)
 8005e7c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005e7e:	4a0b      	ldr	r2, [pc, #44]	; (8005eac <SEGGER_SYSVIEW_Init+0x7c>)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005e84:	4a09      	ldr	r2, [pc, #36]	; (8005eac <SEGGER_SYSVIEW_Init+0x7c>)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005e8a:	4a08      	ldr	r2, [pc, #32]	; (8005eac <SEGGER_SYSVIEW_Init+0x7c>)
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005e90:	4a06      	ldr	r2, [pc, #24]	; (8005eac <SEGGER_SYSVIEW_Init+0x7c>)
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005e96:	4b05      	ldr	r3, [pc, #20]	; (8005eac <SEGGER_SYSVIEW_Init+0x7c>)
 8005e98:	2200      	movs	r2, #0
 8005e9a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005e9c:	bf00      	nop
 8005e9e:	3710      	adds	r7, #16
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	20001de8 	.word	0x20001de8
 8005ea8:	08006ddc 	.word	0x08006ddc
 8005eac:	200025f0 	.word	0x200025f0
 8005eb0:	200025e8 	.word	0x200025e8
 8005eb4:	e0001004 	.word	0xe0001004

08005eb8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005ec0:	4a03      	ldr	r2, [pc, #12]	; (8005ed0 <SEGGER_SYSVIEW_SetRAMBase+0x18>)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6113      	str	r3, [r2, #16]
}
 8005ec6:	bf00      	nop
 8005ec8:	370c      	adds	r7, #12
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bc80      	pop	{r7}
 8005ece:	4770      	bx	lr
 8005ed0:	200025f0 	.word	0x200025f0

08005ed4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005edc:	f3ef 8311 	mrs	r3, BASEPRI
 8005ee0:	f04f 0120 	mov.w	r1, #32
 8005ee4:	f381 8811 	msr	BASEPRI, r1
 8005ee8:	60fb      	str	r3, [r7, #12]
 8005eea:	4808      	ldr	r0, [pc, #32]	; (8005f0c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005eec:	f7ff fdd0 	bl	8005a90 <_PreparePacket>
 8005ef0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	68b9      	ldr	r1, [r7, #8]
 8005ef6:	68b8      	ldr	r0, [r7, #8]
 8005ef8:	f7ff feb4 	bl	8005c64 <_SendPacket>
  RECORD_END();
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f383 8811 	msr	BASEPRI, r3
}
 8005f02:	bf00      	nop
 8005f04:	3710      	adds	r7, #16
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	20002620 	.word	0x20002620

08005f10 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b088      	sub	sp, #32
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005f1a:	f3ef 8311 	mrs	r3, BASEPRI
 8005f1e:	f04f 0120 	mov.w	r1, #32
 8005f22:	f381 8811 	msr	BASEPRI, r1
 8005f26:	617b      	str	r3, [r7, #20]
 8005f28:	4816      	ldr	r0, [pc, #88]	; (8005f84 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005f2a:	f7ff fdb1 	bl	8005a90 <_PreparePacket>
 8005f2e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	61fb      	str	r3, [r7, #28]
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	61bb      	str	r3, [r7, #24]
 8005f3c:	e00b      	b.n	8005f56 <SEGGER_SYSVIEW_RecordU32+0x46>
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	b2da      	uxtb	r2, r3
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	1c59      	adds	r1, r3, #1
 8005f46:	61f9      	str	r1, [r7, #28]
 8005f48:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f4c:	b2d2      	uxtb	r2, r2
 8005f4e:	701a      	strb	r2, [r3, #0]
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	09db      	lsrs	r3, r3, #7
 8005f54:	61bb      	str	r3, [r7, #24]
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	2b7f      	cmp	r3, #127	; 0x7f
 8005f5a:	d8f0      	bhi.n	8005f3e <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	1c5a      	adds	r2, r3, #1
 8005f60:	61fa      	str	r2, [r7, #28]
 8005f62:	69ba      	ldr	r2, [r7, #24]
 8005f64:	b2d2      	uxtb	r2, r2
 8005f66:	701a      	strb	r2, [r3, #0]
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	68f9      	ldr	r1, [r7, #12]
 8005f70:	6938      	ldr	r0, [r7, #16]
 8005f72:	f7ff fe77 	bl	8005c64 <_SendPacket>
  RECORD_END();
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	f383 8811 	msr	BASEPRI, r3
}
 8005f7c:	bf00      	nop
 8005f7e:	3720      	adds	r7, #32
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	20002620 	.word	0x20002620

08005f88 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b08c      	sub	sp, #48	; 0x30
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005f94:	f3ef 8311 	mrs	r3, BASEPRI
 8005f98:	f04f 0120 	mov.w	r1, #32
 8005f9c:	f381 8811 	msr	BASEPRI, r1
 8005fa0:	61fb      	str	r3, [r7, #28]
 8005fa2:	4825      	ldr	r0, [pc, #148]	; (8006038 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005fa4:	f7ff fd74 	bl	8005a90 <_PreparePacket>
 8005fa8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fb6:	e00b      	b.n	8005fd0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fba:	b2da      	uxtb	r2, r3
 8005fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fbe:	1c59      	adds	r1, r3, #1
 8005fc0:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005fc2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fc6:	b2d2      	uxtb	r2, r2
 8005fc8:	701a      	strb	r2, [r3, #0]
 8005fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fcc:	09db      	lsrs	r3, r3, #7
 8005fce:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd2:	2b7f      	cmp	r3, #127	; 0x7f
 8005fd4:	d8f0      	bhi.n	8005fb8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd8:	1c5a      	adds	r2, r3, #1
 8005fda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fde:	b2d2      	uxtb	r2, r2
 8005fe0:	701a      	strb	r2, [r3, #0]
 8005fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	623b      	str	r3, [r7, #32]
 8005fee:	e00b      	b.n	8006008 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005ff0:	6a3b      	ldr	r3, [r7, #32]
 8005ff2:	b2da      	uxtb	r2, r3
 8005ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff6:	1c59      	adds	r1, r3, #1
 8005ff8:	6279      	str	r1, [r7, #36]	; 0x24
 8005ffa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ffe:	b2d2      	uxtb	r2, r2
 8006000:	701a      	strb	r2, [r3, #0]
 8006002:	6a3b      	ldr	r3, [r7, #32]
 8006004:	09db      	lsrs	r3, r3, #7
 8006006:	623b      	str	r3, [r7, #32]
 8006008:	6a3b      	ldr	r3, [r7, #32]
 800600a:	2b7f      	cmp	r3, #127	; 0x7f
 800600c:	d8f0      	bhi.n	8005ff0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800600e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006010:	1c5a      	adds	r2, r3, #1
 8006012:	627a      	str	r2, [r7, #36]	; 0x24
 8006014:	6a3a      	ldr	r2, [r7, #32]
 8006016:	b2d2      	uxtb	r2, r2
 8006018:	701a      	strb	r2, [r3, #0]
 800601a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	6979      	ldr	r1, [r7, #20]
 8006022:	69b8      	ldr	r0, [r7, #24]
 8006024:	f7ff fe1e 	bl	8005c64 <_SendPacket>
  RECORD_END();
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	f383 8811 	msr	BASEPRI, r3
}
 800602e:	bf00      	nop
 8006030:	3730      	adds	r7, #48	; 0x30
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	20002620 	.word	0x20002620

0800603c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800603c:	b580      	push	{r7, lr}
 800603e:	b08e      	sub	sp, #56	; 0x38
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
 8006048:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800604a:	f3ef 8311 	mrs	r3, BASEPRI
 800604e:	f04f 0120 	mov.w	r1, #32
 8006052:	f381 8811 	msr	BASEPRI, r1
 8006056:	61fb      	str	r3, [r7, #28]
 8006058:	4832      	ldr	r0, [pc, #200]	; (8006124 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800605a:	f7ff fd19 	bl	8005a90 <_PreparePacket>
 800605e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	637b      	str	r3, [r7, #52]	; 0x34
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	633b      	str	r3, [r7, #48]	; 0x30
 800606c:	e00b      	b.n	8006086 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800606e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006070:	b2da      	uxtb	r2, r3
 8006072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006074:	1c59      	adds	r1, r3, #1
 8006076:	6379      	str	r1, [r7, #52]	; 0x34
 8006078:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800607c:	b2d2      	uxtb	r2, r2
 800607e:	701a      	strb	r2, [r3, #0]
 8006080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006082:	09db      	lsrs	r3, r3, #7
 8006084:	633b      	str	r3, [r7, #48]	; 0x30
 8006086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006088:	2b7f      	cmp	r3, #127	; 0x7f
 800608a:	d8f0      	bhi.n	800606e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800608c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800608e:	1c5a      	adds	r2, r3, #1
 8006090:	637a      	str	r2, [r7, #52]	; 0x34
 8006092:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006094:	b2d2      	uxtb	r2, r2
 8006096:	701a      	strb	r2, [r3, #0]
 8006098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800609a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80060a4:	e00b      	b.n	80060be <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80060a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a8:	b2da      	uxtb	r2, r3
 80060aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ac:	1c59      	adds	r1, r3, #1
 80060ae:	62f9      	str	r1, [r7, #44]	; 0x2c
 80060b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060b4:	b2d2      	uxtb	r2, r2
 80060b6:	701a      	strb	r2, [r3, #0]
 80060b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ba:	09db      	lsrs	r3, r3, #7
 80060bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80060be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c0:	2b7f      	cmp	r3, #127	; 0x7f
 80060c2:	d8f0      	bhi.n	80060a6 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80060c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c6:	1c5a      	adds	r2, r3, #1
 80060c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060cc:	b2d2      	uxtb	r2, r2
 80060ce:	701a      	strb	r2, [r3, #0]
 80060d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	627b      	str	r3, [r7, #36]	; 0x24
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	623b      	str	r3, [r7, #32]
 80060dc:	e00b      	b.n	80060f6 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80060de:	6a3b      	ldr	r3, [r7, #32]
 80060e0:	b2da      	uxtb	r2, r3
 80060e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e4:	1c59      	adds	r1, r3, #1
 80060e6:	6279      	str	r1, [r7, #36]	; 0x24
 80060e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060ec:	b2d2      	uxtb	r2, r2
 80060ee:	701a      	strb	r2, [r3, #0]
 80060f0:	6a3b      	ldr	r3, [r7, #32]
 80060f2:	09db      	lsrs	r3, r3, #7
 80060f4:	623b      	str	r3, [r7, #32]
 80060f6:	6a3b      	ldr	r3, [r7, #32]
 80060f8:	2b7f      	cmp	r3, #127	; 0x7f
 80060fa:	d8f0      	bhi.n	80060de <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80060fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fe:	1c5a      	adds	r2, r3, #1
 8006100:	627a      	str	r2, [r7, #36]	; 0x24
 8006102:	6a3a      	ldr	r2, [r7, #32]
 8006104:	b2d2      	uxtb	r2, r2
 8006106:	701a      	strb	r2, [r3, #0]
 8006108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	6979      	ldr	r1, [r7, #20]
 8006110:	69b8      	ldr	r0, [r7, #24]
 8006112:	f7ff fda7 	bl	8005c64 <_SendPacket>
  RECORD_END();
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	f383 8811 	msr	BASEPRI, r3
}
 800611c:	bf00      	nop
 800611e:	3738      	adds	r7, #56	; 0x38
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}
 8006124:	20002620 	.word	0x20002620

08006128 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006128:	b580      	push	{r7, lr}
 800612a:	b090      	sub	sp, #64	; 0x40
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	607a      	str	r2, [r7, #4]
 8006134:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006136:	f3ef 8311 	mrs	r3, BASEPRI
 800613a:	f04f 0120 	mov.w	r1, #32
 800613e:	f381 8811 	msr	BASEPRI, r1
 8006142:	61fb      	str	r3, [r7, #28]
 8006144:	4840      	ldr	r0, [pc, #256]	; (8006248 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006146:	f7ff fca3 	bl	8005a90 <_PreparePacket>
 800614a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	63bb      	str	r3, [r7, #56]	; 0x38
 8006158:	e00b      	b.n	8006172 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800615a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800615c:	b2da      	uxtb	r2, r3
 800615e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006160:	1c59      	adds	r1, r3, #1
 8006162:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006164:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006168:	b2d2      	uxtb	r2, r2
 800616a:	701a      	strb	r2, [r3, #0]
 800616c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800616e:	09db      	lsrs	r3, r3, #7
 8006170:	63bb      	str	r3, [r7, #56]	; 0x38
 8006172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006174:	2b7f      	cmp	r3, #127	; 0x7f
 8006176:	d8f0      	bhi.n	800615a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800617a:	1c5a      	adds	r2, r3, #1
 800617c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800617e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006180:	b2d2      	uxtb	r2, r2
 8006182:	701a      	strb	r2, [r3, #0]
 8006184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006186:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	637b      	str	r3, [r7, #52]	; 0x34
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	633b      	str	r3, [r7, #48]	; 0x30
 8006190:	e00b      	b.n	80061aa <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006194:	b2da      	uxtb	r2, r3
 8006196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006198:	1c59      	adds	r1, r3, #1
 800619a:	6379      	str	r1, [r7, #52]	; 0x34
 800619c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061a0:	b2d2      	uxtb	r2, r2
 80061a2:	701a      	strb	r2, [r3, #0]
 80061a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a6:	09db      	lsrs	r3, r3, #7
 80061a8:	633b      	str	r3, [r7, #48]	; 0x30
 80061aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ac:	2b7f      	cmp	r3, #127	; 0x7f
 80061ae:	d8f0      	bhi.n	8006192 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80061b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061b2:	1c5a      	adds	r2, r3, #1
 80061b4:	637a      	str	r2, [r7, #52]	; 0x34
 80061b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061b8:	b2d2      	uxtb	r2, r2
 80061ba:	701a      	strb	r2, [r3, #0]
 80061bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061be:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80061c8:	e00b      	b.n	80061e2 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80061ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061cc:	b2da      	uxtb	r2, r3
 80061ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d0:	1c59      	adds	r1, r3, #1
 80061d2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80061d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061d8:	b2d2      	uxtb	r2, r2
 80061da:	701a      	strb	r2, [r3, #0]
 80061dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061de:	09db      	lsrs	r3, r3, #7
 80061e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80061e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e4:	2b7f      	cmp	r3, #127	; 0x7f
 80061e6:	d8f0      	bhi.n	80061ca <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80061e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ea:	1c5a      	adds	r2, r3, #1
 80061ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061f0:	b2d2      	uxtb	r2, r2
 80061f2:	701a      	strb	r2, [r3, #0]
 80061f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	627b      	str	r3, [r7, #36]	; 0x24
 80061fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061fe:	623b      	str	r3, [r7, #32]
 8006200:	e00b      	b.n	800621a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006202:	6a3b      	ldr	r3, [r7, #32]
 8006204:	b2da      	uxtb	r2, r3
 8006206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006208:	1c59      	adds	r1, r3, #1
 800620a:	6279      	str	r1, [r7, #36]	; 0x24
 800620c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006210:	b2d2      	uxtb	r2, r2
 8006212:	701a      	strb	r2, [r3, #0]
 8006214:	6a3b      	ldr	r3, [r7, #32]
 8006216:	09db      	lsrs	r3, r3, #7
 8006218:	623b      	str	r3, [r7, #32]
 800621a:	6a3b      	ldr	r3, [r7, #32]
 800621c:	2b7f      	cmp	r3, #127	; 0x7f
 800621e:	d8f0      	bhi.n	8006202 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006222:	1c5a      	adds	r2, r3, #1
 8006224:	627a      	str	r2, [r7, #36]	; 0x24
 8006226:	6a3a      	ldr	r2, [r7, #32]
 8006228:	b2d2      	uxtb	r2, r2
 800622a:	701a      	strb	r2, [r3, #0]
 800622c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	6979      	ldr	r1, [r7, #20]
 8006234:	69b8      	ldr	r0, [r7, #24]
 8006236:	f7ff fd15 	bl	8005c64 <_SendPacket>
  RECORD_END();
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	f383 8811 	msr	BASEPRI, r3
}
 8006240:	bf00      	nop
 8006242:	3740      	adds	r7, #64	; 0x40
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	20002620 	.word	0x20002620

0800624c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800624c:	b580      	push	{r7, lr}
 800624e:	b08c      	sub	sp, #48	; 0x30
 8006250:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006252:	4b58      	ldr	r3, [pc, #352]	; (80063b4 <SEGGER_SYSVIEW_Start+0x168>)
 8006254:	2201      	movs	r2, #1
 8006256:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006258:	f3ef 8311 	mrs	r3, BASEPRI
 800625c:	f04f 0120 	mov.w	r1, #32
 8006260:	f381 8811 	msr	BASEPRI, r1
 8006264:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006266:	4b53      	ldr	r3, [pc, #332]	; (80063b4 <SEGGER_SYSVIEW_Start+0x168>)
 8006268:	785b      	ldrb	r3, [r3, #1]
 800626a:	220a      	movs	r2, #10
 800626c:	4952      	ldr	r1, [pc, #328]	; (80063b8 <SEGGER_SYSVIEW_Start+0x16c>)
 800626e:	4618      	mov	r0, r3
 8006270:	f7f9 ff86 	bl	8000180 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800627a:	200a      	movs	r0, #10
 800627c:	f7ff fe2a 	bl	8005ed4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006280:	f3ef 8311 	mrs	r3, BASEPRI
 8006284:	f04f 0120 	mov.w	r1, #32
 8006288:	f381 8811 	msr	BASEPRI, r1
 800628c:	60bb      	str	r3, [r7, #8]
 800628e:	484b      	ldr	r0, [pc, #300]	; (80063bc <SEGGER_SYSVIEW_Start+0x170>)
 8006290:	f7ff fbfe 	bl	8005a90 <_PreparePacket>
 8006294:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800629e:	4b45      	ldr	r3, [pc, #276]	; (80063b4 <SEGGER_SYSVIEW_Start+0x168>)
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80062a4:	e00b      	b.n	80062be <SEGGER_SYSVIEW_Start+0x72>
 80062a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a8:	b2da      	uxtb	r2, r3
 80062aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ac:	1c59      	adds	r1, r3, #1
 80062ae:	62f9      	str	r1, [r7, #44]	; 0x2c
 80062b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062b4:	b2d2      	uxtb	r2, r2
 80062b6:	701a      	strb	r2, [r3, #0]
 80062b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ba:	09db      	lsrs	r3, r3, #7
 80062bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80062be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c0:	2b7f      	cmp	r3, #127	; 0x7f
 80062c2:	d8f0      	bhi.n	80062a6 <SEGGER_SYSVIEW_Start+0x5a>
 80062c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c6:	1c5a      	adds	r2, r3, #1
 80062c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062cc:	b2d2      	uxtb	r2, r2
 80062ce:	701a      	strb	r2, [r3, #0]
 80062d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	627b      	str	r3, [r7, #36]	; 0x24
 80062d8:	4b36      	ldr	r3, [pc, #216]	; (80063b4 <SEGGER_SYSVIEW_Start+0x168>)
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	623b      	str	r3, [r7, #32]
 80062de:	e00b      	b.n	80062f8 <SEGGER_SYSVIEW_Start+0xac>
 80062e0:	6a3b      	ldr	r3, [r7, #32]
 80062e2:	b2da      	uxtb	r2, r3
 80062e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e6:	1c59      	adds	r1, r3, #1
 80062e8:	6279      	str	r1, [r7, #36]	; 0x24
 80062ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062ee:	b2d2      	uxtb	r2, r2
 80062f0:	701a      	strb	r2, [r3, #0]
 80062f2:	6a3b      	ldr	r3, [r7, #32]
 80062f4:	09db      	lsrs	r3, r3, #7
 80062f6:	623b      	str	r3, [r7, #32]
 80062f8:	6a3b      	ldr	r3, [r7, #32]
 80062fa:	2b7f      	cmp	r3, #127	; 0x7f
 80062fc:	d8f0      	bhi.n	80062e0 <SEGGER_SYSVIEW_Start+0x94>
 80062fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006300:	1c5a      	adds	r2, r3, #1
 8006302:	627a      	str	r2, [r7, #36]	; 0x24
 8006304:	6a3a      	ldr	r2, [r7, #32]
 8006306:	b2d2      	uxtb	r2, r2
 8006308:	701a      	strb	r2, [r3, #0]
 800630a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	61fb      	str	r3, [r7, #28]
 8006312:	4b28      	ldr	r3, [pc, #160]	; (80063b4 <SEGGER_SYSVIEW_Start+0x168>)
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	61bb      	str	r3, [r7, #24]
 8006318:	e00b      	b.n	8006332 <SEGGER_SYSVIEW_Start+0xe6>
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	b2da      	uxtb	r2, r3
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	1c59      	adds	r1, r3, #1
 8006322:	61f9      	str	r1, [r7, #28]
 8006324:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006328:	b2d2      	uxtb	r2, r2
 800632a:	701a      	strb	r2, [r3, #0]
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	09db      	lsrs	r3, r3, #7
 8006330:	61bb      	str	r3, [r7, #24]
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	2b7f      	cmp	r3, #127	; 0x7f
 8006336:	d8f0      	bhi.n	800631a <SEGGER_SYSVIEW_Start+0xce>
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	1c5a      	adds	r2, r3, #1
 800633c:	61fa      	str	r2, [r7, #28]
 800633e:	69ba      	ldr	r2, [r7, #24]
 8006340:	b2d2      	uxtb	r2, r2
 8006342:	701a      	strb	r2, [r3, #0]
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	617b      	str	r3, [r7, #20]
 800634c:	2300      	movs	r3, #0
 800634e:	613b      	str	r3, [r7, #16]
 8006350:	e00b      	b.n	800636a <SEGGER_SYSVIEW_Start+0x11e>
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	b2da      	uxtb	r2, r3
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	1c59      	adds	r1, r3, #1
 800635a:	6179      	str	r1, [r7, #20]
 800635c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006360:	b2d2      	uxtb	r2, r2
 8006362:	701a      	strb	r2, [r3, #0]
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	09db      	lsrs	r3, r3, #7
 8006368:	613b      	str	r3, [r7, #16]
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	2b7f      	cmp	r3, #127	; 0x7f
 800636e:	d8f0      	bhi.n	8006352 <SEGGER_SYSVIEW_Start+0x106>
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	1c5a      	adds	r2, r3, #1
 8006374:	617a      	str	r2, [r7, #20]
 8006376:	693a      	ldr	r2, [r7, #16]
 8006378:	b2d2      	uxtb	r2, r2
 800637a:	701a      	strb	r2, [r3, #0]
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006380:	2218      	movs	r2, #24
 8006382:	6839      	ldr	r1, [r7, #0]
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f7ff fc6d 	bl	8005c64 <_SendPacket>
      RECORD_END();
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006390:	4b08      	ldr	r3, [pc, #32]	; (80063b4 <SEGGER_SYSVIEW_Start+0x168>)
 8006392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006394:	2b00      	cmp	r3, #0
 8006396:	d002      	beq.n	800639e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006398:	4b06      	ldr	r3, [pc, #24]	; (80063b4 <SEGGER_SYSVIEW_Start+0x168>)
 800639a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800639e:	f000 f9eb 	bl	8006778 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80063a2:	f000 f9b1 	bl	8006708 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80063a6:	f000 fba7 	bl	8006af8 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80063aa:	bf00      	nop
 80063ac:	3730      	adds	r7, #48	; 0x30
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	200025f0 	.word	0x200025f0
 80063b8:	08006ea4 	.word	0x08006ea4
 80063bc:	20002620 	.word	0x20002620

080063c0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b082      	sub	sp, #8
 80063c4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80063c6:	f3ef 8311 	mrs	r3, BASEPRI
 80063ca:	f04f 0120 	mov.w	r1, #32
 80063ce:	f381 8811 	msr	BASEPRI, r1
 80063d2:	607b      	str	r3, [r7, #4]
 80063d4:	480b      	ldr	r0, [pc, #44]	; (8006404 <SEGGER_SYSVIEW_Stop+0x44>)
 80063d6:	f7ff fb5b 	bl	8005a90 <_PreparePacket>
 80063da:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80063dc:	4b0a      	ldr	r3, [pc, #40]	; (8006408 <SEGGER_SYSVIEW_Stop+0x48>)
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d007      	beq.n	80063f4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80063e4:	220b      	movs	r2, #11
 80063e6:	6839      	ldr	r1, [r7, #0]
 80063e8:	6838      	ldr	r0, [r7, #0]
 80063ea:	f7ff fc3b 	bl	8005c64 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80063ee:	4b06      	ldr	r3, [pc, #24]	; (8006408 <SEGGER_SYSVIEW_Stop+0x48>)
 80063f0:	2200      	movs	r2, #0
 80063f2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f383 8811 	msr	BASEPRI, r3
}
 80063fa:	bf00      	nop
 80063fc:	3708      	adds	r7, #8
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	20002620 	.word	0x20002620
 8006408:	200025f0 	.word	0x200025f0

0800640c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800640c:	b580      	push	{r7, lr}
 800640e:	b08c      	sub	sp, #48	; 0x30
 8006410:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006412:	f3ef 8311 	mrs	r3, BASEPRI
 8006416:	f04f 0120 	mov.w	r1, #32
 800641a:	f381 8811 	msr	BASEPRI, r1
 800641e:	60fb      	str	r3, [r7, #12]
 8006420:	4845      	ldr	r0, [pc, #276]	; (8006538 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006422:	f7ff fb35 	bl	8005a90 <_PreparePacket>
 8006426:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006430:	4b42      	ldr	r3, [pc, #264]	; (800653c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	62bb      	str	r3, [r7, #40]	; 0x28
 8006436:	e00b      	b.n	8006450 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643a:	b2da      	uxtb	r2, r3
 800643c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643e:	1c59      	adds	r1, r3, #1
 8006440:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006442:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006446:	b2d2      	uxtb	r2, r2
 8006448:	701a      	strb	r2, [r3, #0]
 800644a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644c:	09db      	lsrs	r3, r3, #7
 800644e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006452:	2b7f      	cmp	r3, #127	; 0x7f
 8006454:	d8f0      	bhi.n	8006438 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006458:	1c5a      	adds	r2, r3, #1
 800645a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800645c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800645e:	b2d2      	uxtb	r2, r2
 8006460:	701a      	strb	r2, [r3, #0]
 8006462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006464:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	627b      	str	r3, [r7, #36]	; 0x24
 800646a:	4b34      	ldr	r3, [pc, #208]	; (800653c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	623b      	str	r3, [r7, #32]
 8006470:	e00b      	b.n	800648a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006472:	6a3b      	ldr	r3, [r7, #32]
 8006474:	b2da      	uxtb	r2, r3
 8006476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006478:	1c59      	adds	r1, r3, #1
 800647a:	6279      	str	r1, [r7, #36]	; 0x24
 800647c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006480:	b2d2      	uxtb	r2, r2
 8006482:	701a      	strb	r2, [r3, #0]
 8006484:	6a3b      	ldr	r3, [r7, #32]
 8006486:	09db      	lsrs	r3, r3, #7
 8006488:	623b      	str	r3, [r7, #32]
 800648a:	6a3b      	ldr	r3, [r7, #32]
 800648c:	2b7f      	cmp	r3, #127	; 0x7f
 800648e:	d8f0      	bhi.n	8006472 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006492:	1c5a      	adds	r2, r3, #1
 8006494:	627a      	str	r2, [r7, #36]	; 0x24
 8006496:	6a3a      	ldr	r2, [r7, #32]
 8006498:	b2d2      	uxtb	r2, r2
 800649a:	701a      	strb	r2, [r3, #0]
 800649c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	61fb      	str	r3, [r7, #28]
 80064a4:	4b25      	ldr	r3, [pc, #148]	; (800653c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	61bb      	str	r3, [r7, #24]
 80064aa:	e00b      	b.n	80064c4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	b2da      	uxtb	r2, r3
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	1c59      	adds	r1, r3, #1
 80064b4:	61f9      	str	r1, [r7, #28]
 80064b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064ba:	b2d2      	uxtb	r2, r2
 80064bc:	701a      	strb	r2, [r3, #0]
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	09db      	lsrs	r3, r3, #7
 80064c2:	61bb      	str	r3, [r7, #24]
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	2b7f      	cmp	r3, #127	; 0x7f
 80064c8:	d8f0      	bhi.n	80064ac <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	1c5a      	adds	r2, r3, #1
 80064ce:	61fa      	str	r2, [r7, #28]
 80064d0:	69ba      	ldr	r2, [r7, #24]
 80064d2:	b2d2      	uxtb	r2, r2
 80064d4:	701a      	strb	r2, [r3, #0]
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	617b      	str	r3, [r7, #20]
 80064de:	2300      	movs	r3, #0
 80064e0:	613b      	str	r3, [r7, #16]
 80064e2:	e00b      	b.n	80064fc <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	b2da      	uxtb	r2, r3
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	1c59      	adds	r1, r3, #1
 80064ec:	6179      	str	r1, [r7, #20]
 80064ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064f2:	b2d2      	uxtb	r2, r2
 80064f4:	701a      	strb	r2, [r3, #0]
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	09db      	lsrs	r3, r3, #7
 80064fa:	613b      	str	r3, [r7, #16]
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	2b7f      	cmp	r3, #127	; 0x7f
 8006500:	d8f0      	bhi.n	80064e4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	1c5a      	adds	r2, r3, #1
 8006506:	617a      	str	r2, [r7, #20]
 8006508:	693a      	ldr	r2, [r7, #16]
 800650a:	b2d2      	uxtb	r2, r2
 800650c:	701a      	strb	r2, [r3, #0]
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006512:	2218      	movs	r2, #24
 8006514:	6879      	ldr	r1, [r7, #4]
 8006516:	68b8      	ldr	r0, [r7, #8]
 8006518:	f7ff fba4 	bl	8005c64 <_SendPacket>
  RECORD_END();
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006522:	4b06      	ldr	r3, [pc, #24]	; (800653c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006526:	2b00      	cmp	r3, #0
 8006528:	d002      	beq.n	8006530 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800652a:	4b04      	ldr	r3, [pc, #16]	; (800653c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800652c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652e:	4798      	blx	r3
  }
}
 8006530:	bf00      	nop
 8006532:	3730      	adds	r7, #48	; 0x30
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}
 8006538:	20002620 	.word	0x20002620
 800653c:	200025f0 	.word	0x200025f0

08006540 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006540:	b580      	push	{r7, lr}
 8006542:	b092      	sub	sp, #72	; 0x48
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006548:	f3ef 8311 	mrs	r3, BASEPRI
 800654c:	f04f 0120 	mov.w	r1, #32
 8006550:	f381 8811 	msr	BASEPRI, r1
 8006554:	617b      	str	r3, [r7, #20]
 8006556:	486a      	ldr	r0, [pc, #424]	; (8006700 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006558:	f7ff fa9a 	bl	8005a90 <_PreparePacket>
 800655c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	647b      	str	r3, [r7, #68]	; 0x44
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	4b66      	ldr	r3, [pc, #408]	; (8006704 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	1ad3      	subs	r3, r2, r3
 8006570:	643b      	str	r3, [r7, #64]	; 0x40
 8006572:	e00b      	b.n	800658c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006574:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006576:	b2da      	uxtb	r2, r3
 8006578:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800657a:	1c59      	adds	r1, r3, #1
 800657c:	6479      	str	r1, [r7, #68]	; 0x44
 800657e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006582:	b2d2      	uxtb	r2, r2
 8006584:	701a      	strb	r2, [r3, #0]
 8006586:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006588:	09db      	lsrs	r3, r3, #7
 800658a:	643b      	str	r3, [r7, #64]	; 0x40
 800658c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800658e:	2b7f      	cmp	r3, #127	; 0x7f
 8006590:	d8f0      	bhi.n	8006574 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006592:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006594:	1c5a      	adds	r2, r3, #1
 8006596:	647a      	str	r2, [r7, #68]	; 0x44
 8006598:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800659a:	b2d2      	uxtb	r2, r2
 800659c:	701a      	strb	r2, [r3, #0]
 800659e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065a0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80065ac:	e00b      	b.n	80065c6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80065ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b0:	b2da      	uxtb	r2, r3
 80065b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065b4:	1c59      	adds	r1, r3, #1
 80065b6:	63f9      	str	r1, [r7, #60]	; 0x3c
 80065b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065bc:	b2d2      	uxtb	r2, r2
 80065be:	701a      	strb	r2, [r3, #0]
 80065c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c2:	09db      	lsrs	r3, r3, #7
 80065c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80065c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c8:	2b7f      	cmp	r3, #127	; 0x7f
 80065ca:	d8f0      	bhi.n	80065ae <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80065cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ce:	1c5a      	adds	r2, r3, #1
 80065d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80065d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065d4:	b2d2      	uxtb	r2, r2
 80065d6:	701a      	strb	r2, [r3, #0]
 80065d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065da:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	2220      	movs	r2, #32
 80065e2:	4619      	mov	r1, r3
 80065e4:	68f8      	ldr	r0, [r7, #12]
 80065e6:	f7ff fa07 	bl	80059f8 <_EncodeStr>
 80065ea:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80065ec:	2209      	movs	r2, #9
 80065ee:	68f9      	ldr	r1, [r7, #12]
 80065f0:	6938      	ldr	r0, [r7, #16]
 80065f2:	f7ff fb37 	bl	8005c64 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	637b      	str	r3, [r7, #52]	; 0x34
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	4b40      	ldr	r3, [pc, #256]	; (8006704 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	633b      	str	r3, [r7, #48]	; 0x30
 800660a:	e00b      	b.n	8006624 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800660c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660e:	b2da      	uxtb	r2, r3
 8006610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006612:	1c59      	adds	r1, r3, #1
 8006614:	6379      	str	r1, [r7, #52]	; 0x34
 8006616:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800661a:	b2d2      	uxtb	r2, r2
 800661c:	701a      	strb	r2, [r3, #0]
 800661e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006620:	09db      	lsrs	r3, r3, #7
 8006622:	633b      	str	r3, [r7, #48]	; 0x30
 8006624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006626:	2b7f      	cmp	r3, #127	; 0x7f
 8006628:	d8f0      	bhi.n	800660c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800662a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800662c:	1c5a      	adds	r2, r3, #1
 800662e:	637a      	str	r2, [r7, #52]	; 0x34
 8006630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006632:	b2d2      	uxtb	r2, r2
 8006634:	701a      	strb	r2, [r3, #0]
 8006636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006638:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	62bb      	str	r3, [r7, #40]	; 0x28
 8006644:	e00b      	b.n	800665e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006648:	b2da      	uxtb	r2, r3
 800664a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800664c:	1c59      	adds	r1, r3, #1
 800664e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006650:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006654:	b2d2      	uxtb	r2, r2
 8006656:	701a      	strb	r2, [r3, #0]
 8006658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665a:	09db      	lsrs	r3, r3, #7
 800665c:	62bb      	str	r3, [r7, #40]	; 0x28
 800665e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006660:	2b7f      	cmp	r3, #127	; 0x7f
 8006662:	d8f0      	bhi.n	8006646 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006666:	1c5a      	adds	r2, r3, #1
 8006668:	62fa      	str	r2, [r7, #44]	; 0x2c
 800666a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800666c:	b2d2      	uxtb	r2, r2
 800666e:	701a      	strb	r2, [r3, #0]
 8006670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006672:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	627b      	str	r3, [r7, #36]	; 0x24
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	691b      	ldr	r3, [r3, #16]
 800667c:	623b      	str	r3, [r7, #32]
 800667e:	e00b      	b.n	8006698 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006680:	6a3b      	ldr	r3, [r7, #32]
 8006682:	b2da      	uxtb	r2, r3
 8006684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006686:	1c59      	adds	r1, r3, #1
 8006688:	6279      	str	r1, [r7, #36]	; 0x24
 800668a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800668e:	b2d2      	uxtb	r2, r2
 8006690:	701a      	strb	r2, [r3, #0]
 8006692:	6a3b      	ldr	r3, [r7, #32]
 8006694:	09db      	lsrs	r3, r3, #7
 8006696:	623b      	str	r3, [r7, #32]
 8006698:	6a3b      	ldr	r3, [r7, #32]
 800669a:	2b7f      	cmp	r3, #127	; 0x7f
 800669c:	d8f0      	bhi.n	8006680 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800669e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a0:	1c5a      	adds	r2, r3, #1
 80066a2:	627a      	str	r2, [r7, #36]	; 0x24
 80066a4:	6a3a      	ldr	r2, [r7, #32]
 80066a6:	b2d2      	uxtb	r2, r2
 80066a8:	701a      	strb	r2, [r3, #0]
 80066aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	61fb      	str	r3, [r7, #28]
 80066b2:	2300      	movs	r3, #0
 80066b4:	61bb      	str	r3, [r7, #24]
 80066b6:	e00b      	b.n	80066d0 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	b2da      	uxtb	r2, r3
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	1c59      	adds	r1, r3, #1
 80066c0:	61f9      	str	r1, [r7, #28]
 80066c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066c6:	b2d2      	uxtb	r2, r2
 80066c8:	701a      	strb	r2, [r3, #0]
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	09db      	lsrs	r3, r3, #7
 80066ce:	61bb      	str	r3, [r7, #24]
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	2b7f      	cmp	r3, #127	; 0x7f
 80066d4:	d8f0      	bhi.n	80066b8 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	1c5a      	adds	r2, r3, #1
 80066da:	61fa      	str	r2, [r7, #28]
 80066dc:	69ba      	ldr	r2, [r7, #24]
 80066de:	b2d2      	uxtb	r2, r2
 80066e0:	701a      	strb	r2, [r3, #0]
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80066e6:	2215      	movs	r2, #21
 80066e8:	68f9      	ldr	r1, [r7, #12]
 80066ea:	6938      	ldr	r0, [r7, #16]
 80066ec:	f7ff faba 	bl	8005c64 <_SendPacket>
  RECORD_END();
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	f383 8811 	msr	BASEPRI, r3
}
 80066f6:	bf00      	nop
 80066f8:	3748      	adds	r7, #72	; 0x48
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	20002620 	.word	0x20002620
 8006704:	200025f0 	.word	0x200025f0

08006708 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006708:	b580      	push	{r7, lr}
 800670a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800670c:	4b07      	ldr	r3, [pc, #28]	; (800672c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800670e:	6a1b      	ldr	r3, [r3, #32]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d008      	beq.n	8006726 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006714:	4b05      	ldr	r3, [pc, #20]	; (800672c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006716:	6a1b      	ldr	r3, [r3, #32]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d003      	beq.n	8006726 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800671e:	4b03      	ldr	r3, [pc, #12]	; (800672c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006720:	6a1b      	ldr	r3, [r3, #32]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	4798      	blx	r3
  }
}
 8006726:	bf00      	nop
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	200025f0 	.word	0x200025f0

08006730 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006730:	b580      	push	{r7, lr}
 8006732:	b086      	sub	sp, #24
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006738:	f3ef 8311 	mrs	r3, BASEPRI
 800673c:	f04f 0120 	mov.w	r1, #32
 8006740:	f381 8811 	msr	BASEPRI, r1
 8006744:	617b      	str	r3, [r7, #20]
 8006746:	480b      	ldr	r0, [pc, #44]	; (8006774 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006748:	f7ff f9a2 	bl	8005a90 <_PreparePacket>
 800674c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800674e:	2280      	movs	r2, #128	; 0x80
 8006750:	6879      	ldr	r1, [r7, #4]
 8006752:	6938      	ldr	r0, [r7, #16]
 8006754:	f7ff f950 	bl	80059f8 <_EncodeStr>
 8006758:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800675a:	220e      	movs	r2, #14
 800675c:	68f9      	ldr	r1, [r7, #12]
 800675e:	6938      	ldr	r0, [r7, #16]
 8006760:	f7ff fa80 	bl	8005c64 <_SendPacket>
  RECORD_END();
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	f383 8811 	msr	BASEPRI, r3
}
 800676a:	bf00      	nop
 800676c:	3718      	adds	r7, #24
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	20002620 	.word	0x20002620

08006778 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006778:	b590      	push	{r4, r7, lr}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800677e:	4b14      	ldr	r3, [pc, #80]	; (80067d0 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8006780:	6a1b      	ldr	r3, [r3, #32]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d019      	beq.n	80067ba <SEGGER_SYSVIEW_RecordSystime+0x42>
 8006786:	4b12      	ldr	r3, [pc, #72]	; (80067d0 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8006788:	6a1b      	ldr	r3, [r3, #32]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d014      	beq.n	80067ba <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006790:	4b0f      	ldr	r3, [pc, #60]	; (80067d0 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8006792:	6a1b      	ldr	r3, [r3, #32]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4798      	blx	r3
 8006798:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800679c:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800679e:	e9d7 1200 	ldrd	r1, r2, [r7]
 80067a2:	f04f 0300 	mov.w	r3, #0
 80067a6:	f04f 0400 	mov.w	r4, #0
 80067aa:	0013      	movs	r3, r2
 80067ac:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80067ae:	461a      	mov	r2, r3
 80067b0:	4601      	mov	r1, r0
 80067b2:	200d      	movs	r0, #13
 80067b4:	f7ff fbe8 	bl	8005f88 <SEGGER_SYSVIEW_RecordU32x2>
 80067b8:	e005      	b.n	80067c6 <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80067ba:	4b06      	ldr	r3, [pc, #24]	; (80067d4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4619      	mov	r1, r3
 80067c0:	200c      	movs	r0, #12
 80067c2:	f7ff fba5 	bl	8005f10 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80067c6:	bf00      	nop
 80067c8:	370c      	adds	r7, #12
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd90      	pop	{r4, r7, pc}
 80067ce:	bf00      	nop
 80067d0:	200025f0 	.word	0x200025f0
 80067d4:	e0001004 	.word	0xe0001004

080067d8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80067de:	f3ef 8311 	mrs	r3, BASEPRI
 80067e2:	f04f 0120 	mov.w	r1, #32
 80067e6:	f381 8811 	msr	BASEPRI, r1
 80067ea:	607b      	str	r3, [r7, #4]
 80067ec:	4807      	ldr	r0, [pc, #28]	; (800680c <SEGGER_SYSVIEW_OnIdle+0x34>)
 80067ee:	f7ff f94f 	bl	8005a90 <_PreparePacket>
 80067f2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80067f4:	2211      	movs	r2, #17
 80067f6:	6839      	ldr	r1, [r7, #0]
 80067f8:	6838      	ldr	r0, [r7, #0]
 80067fa:	f7ff fa33 	bl	8005c64 <_SendPacket>
  RECORD_END();
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f383 8811 	msr	BASEPRI, r3
}
 8006804:	bf00      	nop
 8006806:	3708      	adds	r7, #8
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}
 800680c:	20002620 	.word	0x20002620

08006810 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006810:	b580      	push	{r7, lr}
 8006812:	b088      	sub	sp, #32
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006818:	f3ef 8311 	mrs	r3, BASEPRI
 800681c:	f04f 0120 	mov.w	r1, #32
 8006820:	f381 8811 	msr	BASEPRI, r1
 8006824:	617b      	str	r3, [r7, #20]
 8006826:	4819      	ldr	r0, [pc, #100]	; (800688c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006828:	f7ff f932 	bl	8005a90 <_PreparePacket>
 800682c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006832:	4b17      	ldr	r3, [pc, #92]	; (8006890 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	1ad3      	subs	r3, r2, r3
 800683a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	61fb      	str	r3, [r7, #28]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	61bb      	str	r3, [r7, #24]
 8006844:	e00b      	b.n	800685e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	b2da      	uxtb	r2, r3
 800684a:	69fb      	ldr	r3, [r7, #28]
 800684c:	1c59      	adds	r1, r3, #1
 800684e:	61f9      	str	r1, [r7, #28]
 8006850:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006854:	b2d2      	uxtb	r2, r2
 8006856:	701a      	strb	r2, [r3, #0]
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	09db      	lsrs	r3, r3, #7
 800685c:	61bb      	str	r3, [r7, #24]
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	2b7f      	cmp	r3, #127	; 0x7f
 8006862:	d8f0      	bhi.n	8006846 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	1c5a      	adds	r2, r3, #1
 8006868:	61fa      	str	r2, [r7, #28]
 800686a:	69ba      	ldr	r2, [r7, #24]
 800686c:	b2d2      	uxtb	r2, r2
 800686e:	701a      	strb	r2, [r3, #0]
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006874:	2208      	movs	r2, #8
 8006876:	68f9      	ldr	r1, [r7, #12]
 8006878:	6938      	ldr	r0, [r7, #16]
 800687a:	f7ff f9f3 	bl	8005c64 <_SendPacket>
  RECORD_END();
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	f383 8811 	msr	BASEPRI, r3
}
 8006884:	bf00      	nop
 8006886:	3720      	adds	r7, #32
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	20002620 	.word	0x20002620
 8006890:	200025f0 	.word	0x200025f0

08006894 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006894:	b580      	push	{r7, lr}
 8006896:	b088      	sub	sp, #32
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800689c:	f3ef 8311 	mrs	r3, BASEPRI
 80068a0:	f04f 0120 	mov.w	r1, #32
 80068a4:	f381 8811 	msr	BASEPRI, r1
 80068a8:	617b      	str	r3, [r7, #20]
 80068aa:	4819      	ldr	r0, [pc, #100]	; (8006910 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80068ac:	f7ff f8f0 	bl	8005a90 <_PreparePacket>
 80068b0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80068b6:	4b17      	ldr	r3, [pc, #92]	; (8006914 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	61fb      	str	r3, [r7, #28]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	61bb      	str	r3, [r7, #24]
 80068c8:	e00b      	b.n	80068e2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80068ca:	69bb      	ldr	r3, [r7, #24]
 80068cc:	b2da      	uxtb	r2, r3
 80068ce:	69fb      	ldr	r3, [r7, #28]
 80068d0:	1c59      	adds	r1, r3, #1
 80068d2:	61f9      	str	r1, [r7, #28]
 80068d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068d8:	b2d2      	uxtb	r2, r2
 80068da:	701a      	strb	r2, [r3, #0]
 80068dc:	69bb      	ldr	r3, [r7, #24]
 80068de:	09db      	lsrs	r3, r3, #7
 80068e0:	61bb      	str	r3, [r7, #24]
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	2b7f      	cmp	r3, #127	; 0x7f
 80068e6:	d8f0      	bhi.n	80068ca <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	1c5a      	adds	r2, r3, #1
 80068ec:	61fa      	str	r2, [r7, #28]
 80068ee:	69ba      	ldr	r2, [r7, #24]
 80068f0:	b2d2      	uxtb	r2, r2
 80068f2:	701a      	strb	r2, [r3, #0]
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80068f8:	2204      	movs	r2, #4
 80068fa:	68f9      	ldr	r1, [r7, #12]
 80068fc:	6938      	ldr	r0, [r7, #16]
 80068fe:	f7ff f9b1 	bl	8005c64 <_SendPacket>
  RECORD_END();
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	f383 8811 	msr	BASEPRI, r3
}
 8006908:	bf00      	nop
 800690a:	3720      	adds	r7, #32
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}
 8006910:	20002620 	.word	0x20002620
 8006914:	200025f0 	.word	0x200025f0

08006918 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006918:	b580      	push	{r7, lr}
 800691a:	b088      	sub	sp, #32
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006920:	f3ef 8311 	mrs	r3, BASEPRI
 8006924:	f04f 0120 	mov.w	r1, #32
 8006928:	f381 8811 	msr	BASEPRI, r1
 800692c:	617b      	str	r3, [r7, #20]
 800692e:	4819      	ldr	r0, [pc, #100]	; (8006994 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006930:	f7ff f8ae 	bl	8005a90 <_PreparePacket>
 8006934:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800693a:	4b17      	ldr	r3, [pc, #92]	; (8006998 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	61fb      	str	r3, [r7, #28]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	61bb      	str	r3, [r7, #24]
 800694c:	e00b      	b.n	8006966 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	b2da      	uxtb	r2, r3
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	1c59      	adds	r1, r3, #1
 8006956:	61f9      	str	r1, [r7, #28]
 8006958:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800695c:	b2d2      	uxtb	r2, r2
 800695e:	701a      	strb	r2, [r3, #0]
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	09db      	lsrs	r3, r3, #7
 8006964:	61bb      	str	r3, [r7, #24]
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	2b7f      	cmp	r3, #127	; 0x7f
 800696a:	d8f0      	bhi.n	800694e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800696c:	69fb      	ldr	r3, [r7, #28]
 800696e:	1c5a      	adds	r2, r3, #1
 8006970:	61fa      	str	r2, [r7, #28]
 8006972:	69ba      	ldr	r2, [r7, #24]
 8006974:	b2d2      	uxtb	r2, r2
 8006976:	701a      	strb	r2, [r3, #0]
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800697c:	2206      	movs	r2, #6
 800697e:	68f9      	ldr	r1, [r7, #12]
 8006980:	6938      	ldr	r0, [r7, #16]
 8006982:	f7ff f96f 	bl	8005c64 <_SendPacket>
  RECORD_END();
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	f383 8811 	msr	BASEPRI, r3
}
 800698c:	bf00      	nop
 800698e:	3720      	adds	r7, #32
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}
 8006994:	20002620 	.word	0x20002620
 8006998:	200025f0 	.word	0x200025f0

0800699c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80069a4:	4b04      	ldr	r3, [pc, #16]	; (80069b8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80069a6:	691b      	ldr	r3, [r3, #16]
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	1ad3      	subs	r3, r2, r3
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	370c      	adds	r7, #12
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bc80      	pop	{r7}
 80069b4:	4770      	bx	lr
 80069b6:	bf00      	nop
 80069b8:	200025f0 	.word	0x200025f0

080069bc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80069bc:	b580      	push	{r7, lr}
 80069be:	b08c      	sub	sp, #48	; 0x30
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	4603      	mov	r3, r0
 80069c4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80069c6:	4b3b      	ldr	r3, [pc, #236]	; (8006ab4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d06d      	beq.n	8006aaa <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80069ce:	4b39      	ldr	r3, [pc, #228]	; (8006ab4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80069d4:	2300      	movs	r3, #0
 80069d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80069d8:	e008      	b.n	80069ec <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80069da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80069e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d007      	beq.n	80069f6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80069e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e8:	3301      	adds	r3, #1
 80069ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80069ec:	79fb      	ldrb	r3, [r7, #7]
 80069ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d3f2      	bcc.n	80069da <SEGGER_SYSVIEW_SendModule+0x1e>
 80069f4:	e000      	b.n	80069f8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80069f6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80069f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d055      	beq.n	8006aaa <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80069fe:	f3ef 8311 	mrs	r3, BASEPRI
 8006a02:	f04f 0120 	mov.w	r1, #32
 8006a06:	f381 8811 	msr	BASEPRI, r1
 8006a0a:	617b      	str	r3, [r7, #20]
 8006a0c:	482a      	ldr	r0, [pc, #168]	; (8006ab8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006a0e:	f7ff f83f 	bl	8005a90 <_PreparePacket>
 8006a12:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8006a1c:	79fb      	ldrb	r3, [r7, #7]
 8006a1e:	623b      	str	r3, [r7, #32]
 8006a20:	e00b      	b.n	8006a3a <SEGGER_SYSVIEW_SendModule+0x7e>
 8006a22:	6a3b      	ldr	r3, [r7, #32]
 8006a24:	b2da      	uxtb	r2, r3
 8006a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a28:	1c59      	adds	r1, r3, #1
 8006a2a:	6279      	str	r1, [r7, #36]	; 0x24
 8006a2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a30:	b2d2      	uxtb	r2, r2
 8006a32:	701a      	strb	r2, [r3, #0]
 8006a34:	6a3b      	ldr	r3, [r7, #32]
 8006a36:	09db      	lsrs	r3, r3, #7
 8006a38:	623b      	str	r3, [r7, #32]
 8006a3a:	6a3b      	ldr	r3, [r7, #32]
 8006a3c:	2b7f      	cmp	r3, #127	; 0x7f
 8006a3e:	d8f0      	bhi.n	8006a22 <SEGGER_SYSVIEW_SendModule+0x66>
 8006a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a42:	1c5a      	adds	r2, r3, #1
 8006a44:	627a      	str	r2, [r7, #36]	; 0x24
 8006a46:	6a3a      	ldr	r2, [r7, #32]
 8006a48:	b2d2      	uxtb	r2, r2
 8006a4a:	701a      	strb	r2, [r3, #0]
 8006a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	61fb      	str	r3, [r7, #28]
 8006a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	61bb      	str	r3, [r7, #24]
 8006a5a:	e00b      	b.n	8006a74 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	b2da      	uxtb	r2, r3
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	1c59      	adds	r1, r3, #1
 8006a64:	61f9      	str	r1, [r7, #28]
 8006a66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a6a:	b2d2      	uxtb	r2, r2
 8006a6c:	701a      	strb	r2, [r3, #0]
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	09db      	lsrs	r3, r3, #7
 8006a72:	61bb      	str	r3, [r7, #24]
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	2b7f      	cmp	r3, #127	; 0x7f
 8006a78:	d8f0      	bhi.n	8006a5c <SEGGER_SYSVIEW_SendModule+0xa0>
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	1c5a      	adds	r2, r3, #1
 8006a7e:	61fa      	str	r2, [r7, #28]
 8006a80:	69ba      	ldr	r2, [r7, #24]
 8006a82:	b2d2      	uxtb	r2, r2
 8006a84:	701a      	strb	r2, [r3, #0]
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2280      	movs	r2, #128	; 0x80
 8006a90:	4619      	mov	r1, r3
 8006a92:	68f8      	ldr	r0, [r7, #12]
 8006a94:	f7fe ffb0 	bl	80059f8 <_EncodeStr>
 8006a98:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006a9a:	2216      	movs	r2, #22
 8006a9c:	68f9      	ldr	r1, [r7, #12]
 8006a9e:	6938      	ldr	r0, [r7, #16]
 8006aa0:	f7ff f8e0 	bl	8005c64 <_SendPacket>
      RECORD_END();
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006aaa:	bf00      	nop
 8006aac:	3730      	adds	r7, #48	; 0x30
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	20002618 	.word	0x20002618
 8006ab8:	20002620 	.word	0x20002620

08006abc <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b082      	sub	sp, #8
 8006ac0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006ac2:	4b0c      	ldr	r3, [pc, #48]	; (8006af4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00f      	beq.n	8006aea <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006aca:	4b0a      	ldr	r3, [pc, #40]	; (8006af4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d002      	beq.n	8006ade <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d1f2      	bne.n	8006ad0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006aea:	bf00      	nop
 8006aec:	3708      	adds	r7, #8
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	20002618 	.word	0x20002618

08006af8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b086      	sub	sp, #24
 8006afc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006afe:	f3ef 8311 	mrs	r3, BASEPRI
 8006b02:	f04f 0120 	mov.w	r1, #32
 8006b06:	f381 8811 	msr	BASEPRI, r1
 8006b0a:	60fb      	str	r3, [r7, #12]
 8006b0c:	4817      	ldr	r0, [pc, #92]	; (8006b6c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006b0e:	f7fe ffbf 	bl	8005a90 <_PreparePacket>
 8006b12:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	617b      	str	r3, [r7, #20]
 8006b1c:	4b14      	ldr	r3, [pc, #80]	; (8006b70 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	613b      	str	r3, [r7, #16]
 8006b22:	e00b      	b.n	8006b3c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	b2da      	uxtb	r2, r3
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	1c59      	adds	r1, r3, #1
 8006b2c:	6179      	str	r1, [r7, #20]
 8006b2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b32:	b2d2      	uxtb	r2, r2
 8006b34:	701a      	strb	r2, [r3, #0]
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	09db      	lsrs	r3, r3, #7
 8006b3a:	613b      	str	r3, [r7, #16]
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	2b7f      	cmp	r3, #127	; 0x7f
 8006b40:	d8f0      	bhi.n	8006b24 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	1c5a      	adds	r2, r3, #1
 8006b46:	617a      	str	r2, [r7, #20]
 8006b48:	693a      	ldr	r2, [r7, #16]
 8006b4a:	b2d2      	uxtb	r2, r2
 8006b4c:	701a      	strb	r2, [r3, #0]
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006b52:	221b      	movs	r2, #27
 8006b54:	6879      	ldr	r1, [r7, #4]
 8006b56:	68b8      	ldr	r0, [r7, #8]
 8006b58:	f7ff f884 	bl	8005c64 <_SendPacket>
  RECORD_END();
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f383 8811 	msr	BASEPRI, r3
}
 8006b62:	bf00      	nop
 8006b64:	3718      	adds	r7, #24
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	20002620 	.word	0x20002620
 8006b70:	2000261c 	.word	0x2000261c

08006b74 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b08a      	sub	sp, #40	; 0x28
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006b7c:	f3ef 8311 	mrs	r3, BASEPRI
 8006b80:	f04f 0120 	mov.w	r1, #32
 8006b84:	f381 8811 	msr	BASEPRI, r1
 8006b88:	617b      	str	r3, [r7, #20]
 8006b8a:	4827      	ldr	r0, [pc, #156]	; (8006c28 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006b8c:	f7fe ff80 	bl	8005a90 <_PreparePacket>
 8006b90:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006b92:	2280      	movs	r2, #128	; 0x80
 8006b94:	6879      	ldr	r1, [r7, #4]
 8006b96:	6938      	ldr	r0, [r7, #16]
 8006b98:	f7fe ff2e 	bl	80059f8 <_EncodeStr>
 8006b9c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	623b      	str	r3, [r7, #32]
 8006ba6:	e00b      	b.n	8006bc0 <SEGGER_SYSVIEW_Warn+0x4c>
 8006ba8:	6a3b      	ldr	r3, [r7, #32]
 8006baa:	b2da      	uxtb	r2, r3
 8006bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bae:	1c59      	adds	r1, r3, #1
 8006bb0:	6279      	str	r1, [r7, #36]	; 0x24
 8006bb2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bb6:	b2d2      	uxtb	r2, r2
 8006bb8:	701a      	strb	r2, [r3, #0]
 8006bba:	6a3b      	ldr	r3, [r7, #32]
 8006bbc:	09db      	lsrs	r3, r3, #7
 8006bbe:	623b      	str	r3, [r7, #32]
 8006bc0:	6a3b      	ldr	r3, [r7, #32]
 8006bc2:	2b7f      	cmp	r3, #127	; 0x7f
 8006bc4:	d8f0      	bhi.n	8006ba8 <SEGGER_SYSVIEW_Warn+0x34>
 8006bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc8:	1c5a      	adds	r2, r3, #1
 8006bca:	627a      	str	r2, [r7, #36]	; 0x24
 8006bcc:	6a3a      	ldr	r2, [r7, #32]
 8006bce:	b2d2      	uxtb	r2, r2
 8006bd0:	701a      	strb	r2, [r3, #0]
 8006bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	61fb      	str	r3, [r7, #28]
 8006bda:	2300      	movs	r3, #0
 8006bdc:	61bb      	str	r3, [r7, #24]
 8006bde:	e00b      	b.n	8006bf8 <SEGGER_SYSVIEW_Warn+0x84>
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	b2da      	uxtb	r2, r3
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	1c59      	adds	r1, r3, #1
 8006be8:	61f9      	str	r1, [r7, #28]
 8006bea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bee:	b2d2      	uxtb	r2, r2
 8006bf0:	701a      	strb	r2, [r3, #0]
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	09db      	lsrs	r3, r3, #7
 8006bf6:	61bb      	str	r3, [r7, #24]
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	2b7f      	cmp	r3, #127	; 0x7f
 8006bfc:	d8f0      	bhi.n	8006be0 <SEGGER_SYSVIEW_Warn+0x6c>
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	1c5a      	adds	r2, r3, #1
 8006c02:	61fa      	str	r2, [r7, #28]
 8006c04:	69ba      	ldr	r2, [r7, #24]
 8006c06:	b2d2      	uxtb	r2, r2
 8006c08:	701a      	strb	r2, [r3, #0]
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006c0e:	221a      	movs	r2, #26
 8006c10:	68f9      	ldr	r1, [r7, #12]
 8006c12:	6938      	ldr	r0, [r7, #16]
 8006c14:	f7ff f826 	bl	8005c64 <_SendPacket>
  RECORD_END();
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	f383 8811 	msr	BASEPRI, r3
}
 8006c1e:	bf00      	nop
 8006c20:	3728      	adds	r7, #40	; 0x28
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	20002620 	.word	0x20002620

08006c2c <__libc_init_array>:
 8006c2c:	b570      	push	{r4, r5, r6, lr}
 8006c2e:	2500      	movs	r5, #0
 8006c30:	4e0c      	ldr	r6, [pc, #48]	; (8006c64 <__libc_init_array+0x38>)
 8006c32:	4c0d      	ldr	r4, [pc, #52]	; (8006c68 <__libc_init_array+0x3c>)
 8006c34:	1ba4      	subs	r4, r4, r6
 8006c36:	10a4      	asrs	r4, r4, #2
 8006c38:	42a5      	cmp	r5, r4
 8006c3a:	d109      	bne.n	8006c50 <__libc_init_array+0x24>
 8006c3c:	f000 f83c 	bl	8006cb8 <_init>
 8006c40:	2500      	movs	r5, #0
 8006c42:	4e0a      	ldr	r6, [pc, #40]	; (8006c6c <__libc_init_array+0x40>)
 8006c44:	4c0a      	ldr	r4, [pc, #40]	; (8006c70 <__libc_init_array+0x44>)
 8006c46:	1ba4      	subs	r4, r4, r6
 8006c48:	10a4      	asrs	r4, r4, #2
 8006c4a:	42a5      	cmp	r5, r4
 8006c4c:	d105      	bne.n	8006c5a <__libc_init_array+0x2e>
 8006c4e:	bd70      	pop	{r4, r5, r6, pc}
 8006c50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006c54:	4798      	blx	r3
 8006c56:	3501      	adds	r5, #1
 8006c58:	e7ee      	b.n	8006c38 <__libc_init_array+0xc>
 8006c5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006c5e:	4798      	blx	r3
 8006c60:	3501      	adds	r5, #1
 8006c62:	e7f2      	b.n	8006c4a <__libc_init_array+0x1e>
 8006c64:	08006eb8 	.word	0x08006eb8
 8006c68:	08006eb8 	.word	0x08006eb8
 8006c6c:	08006eb8 	.word	0x08006eb8
 8006c70:	08006ebc 	.word	0x08006ebc

08006c74 <memcmp>:
 8006c74:	b530      	push	{r4, r5, lr}
 8006c76:	2400      	movs	r4, #0
 8006c78:	42a2      	cmp	r2, r4
 8006c7a:	d101      	bne.n	8006c80 <memcmp+0xc>
 8006c7c:	2000      	movs	r0, #0
 8006c7e:	e007      	b.n	8006c90 <memcmp+0x1c>
 8006c80:	5d03      	ldrb	r3, [r0, r4]
 8006c82:	3401      	adds	r4, #1
 8006c84:	190d      	adds	r5, r1, r4
 8006c86:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8006c8a:	42ab      	cmp	r3, r5
 8006c8c:	d0f4      	beq.n	8006c78 <memcmp+0x4>
 8006c8e:	1b58      	subs	r0, r3, r5
 8006c90:	bd30      	pop	{r4, r5, pc}

08006c92 <memcpy>:
 8006c92:	b510      	push	{r4, lr}
 8006c94:	1e43      	subs	r3, r0, #1
 8006c96:	440a      	add	r2, r1
 8006c98:	4291      	cmp	r1, r2
 8006c9a:	d100      	bne.n	8006c9e <memcpy+0xc>
 8006c9c:	bd10      	pop	{r4, pc}
 8006c9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ca2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ca6:	e7f7      	b.n	8006c98 <memcpy+0x6>

08006ca8 <memset>:
 8006ca8:	4603      	mov	r3, r0
 8006caa:	4402      	add	r2, r0
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d100      	bne.n	8006cb2 <memset+0xa>
 8006cb0:	4770      	bx	lr
 8006cb2:	f803 1b01 	strb.w	r1, [r3], #1
 8006cb6:	e7f9      	b.n	8006cac <memset+0x4>

08006cb8 <_init>:
 8006cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cba:	bf00      	nop
 8006cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cbe:	bc08      	pop	{r3}
 8006cc0:	469e      	mov	lr, r3
 8006cc2:	4770      	bx	lr

08006cc4 <_fini>:
 8006cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cc6:	bf00      	nop
 8006cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cca:	bc08      	pop	{r3}
 8006ccc:	469e      	mov	lr, r3
 8006cce:	4770      	bx	lr
