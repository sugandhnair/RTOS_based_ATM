
RTOS_BASED_ATM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012dc  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08001418  08001418  00011418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001434  08001434  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001434  08001434  00011434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800143c  0800143c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800143c  0800143c  0001143c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001440  08001440  00011440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001444  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001450  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001450  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002a7d  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000b70  00000000  00000000  00022ab2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000388  00000000  00000000  00023628  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000310  00000000  00000000  000239b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013df3  00000000  00000000  00023cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000371f  00000000  00000000  00037ab3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007d2f9  00000000  00000000  0003b1d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b84cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c9c  00000000  00000000  000b8548  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	08001400 	.word	0x08001400

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	08001400 	.word	0x08001400

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b974 	b.w	800047c <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	468c      	mov	ip, r1
 80001b2:	4604      	mov	r4, r0
 80001b4:	9e08      	ldr	r6, [sp, #32]
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d14b      	bne.n	8000252 <__udivmoddi4+0xa6>
 80001ba:	428a      	cmp	r2, r1
 80001bc:	4615      	mov	r5, r2
 80001be:	d967      	bls.n	8000290 <__udivmoddi4+0xe4>
 80001c0:	fab2 f282 	clz	r2, r2
 80001c4:	b14a      	cbz	r2, 80001da <__udivmoddi4+0x2e>
 80001c6:	f1c2 0720 	rsb	r7, r2, #32
 80001ca:	fa01 f302 	lsl.w	r3, r1, r2
 80001ce:	fa20 f707 	lsr.w	r7, r0, r7
 80001d2:	4095      	lsls	r5, r2
 80001d4:	ea47 0c03 	orr.w	ip, r7, r3
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001de:	fbbc f7fe 	udiv	r7, ip, lr
 80001e2:	fa1f f885 	uxth.w	r8, r5
 80001e6:	fb0e c317 	mls	r3, lr, r7, ip
 80001ea:	fb07 f908 	mul.w	r9, r7, r8
 80001ee:	0c21      	lsrs	r1, r4, #16
 80001f0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f4:	4599      	cmp	r9, r3
 80001f6:	d909      	bls.n	800020c <__udivmoddi4+0x60>
 80001f8:	18eb      	adds	r3, r5, r3
 80001fa:	f107 31ff 	add.w	r1, r7, #4294967295
 80001fe:	f080 811c 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000202:	4599      	cmp	r9, r3
 8000204:	f240 8119 	bls.w	800043a <__udivmoddi4+0x28e>
 8000208:	3f02      	subs	r7, #2
 800020a:	442b      	add	r3, r5
 800020c:	eba3 0309 	sub.w	r3, r3, r9
 8000210:	fbb3 f0fe 	udiv	r0, r3, lr
 8000214:	fb0e 3310 	mls	r3, lr, r0, r3
 8000218:	fb00 f108 	mul.w	r1, r0, r8
 800021c:	b2a4      	uxth	r4, r4
 800021e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000222:	42a1      	cmp	r1, r4
 8000224:	d909      	bls.n	800023a <__udivmoddi4+0x8e>
 8000226:	192c      	adds	r4, r5, r4
 8000228:	f100 33ff 	add.w	r3, r0, #4294967295
 800022c:	f080 8107 	bcs.w	800043e <__udivmoddi4+0x292>
 8000230:	42a1      	cmp	r1, r4
 8000232:	f240 8104 	bls.w	800043e <__udivmoddi4+0x292>
 8000236:	3802      	subs	r0, #2
 8000238:	442c      	add	r4, r5
 800023a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800023e:	2700      	movs	r7, #0
 8000240:	1a64      	subs	r4, r4, r1
 8000242:	b11e      	cbz	r6, 800024c <__udivmoddi4+0xa0>
 8000244:	2300      	movs	r3, #0
 8000246:	40d4      	lsrs	r4, r2
 8000248:	e9c6 4300 	strd	r4, r3, [r6]
 800024c:	4639      	mov	r1, r7
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	428b      	cmp	r3, r1
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0xbe>
 8000256:	2e00      	cmp	r6, #0
 8000258:	f000 80ec 	beq.w	8000434 <__udivmoddi4+0x288>
 800025c:	2700      	movs	r7, #0
 800025e:	e9c6 0100 	strd	r0, r1, [r6]
 8000262:	4638      	mov	r0, r7
 8000264:	4639      	mov	r1, r7
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	fab3 f783 	clz	r7, r3
 800026e:	2f00      	cmp	r7, #0
 8000270:	d148      	bne.n	8000304 <__udivmoddi4+0x158>
 8000272:	428b      	cmp	r3, r1
 8000274:	d302      	bcc.n	800027c <__udivmoddi4+0xd0>
 8000276:	4282      	cmp	r2, r0
 8000278:	f200 80fb 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 800027c:	1a84      	subs	r4, r0, r2
 800027e:	eb61 0303 	sbc.w	r3, r1, r3
 8000282:	2001      	movs	r0, #1
 8000284:	469c      	mov	ip, r3
 8000286:	2e00      	cmp	r6, #0
 8000288:	d0e0      	beq.n	800024c <__udivmoddi4+0xa0>
 800028a:	e9c6 4c00 	strd	r4, ip, [r6]
 800028e:	e7dd      	b.n	800024c <__udivmoddi4+0xa0>
 8000290:	b902      	cbnz	r2, 8000294 <__udivmoddi4+0xe8>
 8000292:	deff      	udf	#255	; 0xff
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	2a00      	cmp	r2, #0
 800029a:	f040 808f 	bne.w	80003bc <__udivmoddi4+0x210>
 800029e:	2701      	movs	r7, #1
 80002a0:	1b49      	subs	r1, r1, r5
 80002a2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80002a6:	fa1f f985 	uxth.w	r9, r5
 80002aa:	fbb1 fef8 	udiv	lr, r1, r8
 80002ae:	fb08 111e 	mls	r1, r8, lr, r1
 80002b2:	fb09 f00e 	mul.w	r0, r9, lr
 80002b6:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80002ba:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 80002be:	4298      	cmp	r0, r3
 80002c0:	d907      	bls.n	80002d2 <__udivmoddi4+0x126>
 80002c2:	18eb      	adds	r3, r5, r3
 80002c4:	f10e 31ff 	add.w	r1, lr, #4294967295
 80002c8:	d202      	bcs.n	80002d0 <__udivmoddi4+0x124>
 80002ca:	4298      	cmp	r0, r3
 80002cc:	f200 80cd 	bhi.w	800046a <__udivmoddi4+0x2be>
 80002d0:	468e      	mov	lr, r1
 80002d2:	1a1b      	subs	r3, r3, r0
 80002d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d8:	fb08 3310 	mls	r3, r8, r0, r3
 80002dc:	fb09 f900 	mul.w	r9, r9, r0
 80002e0:	b2a4      	uxth	r4, r4
 80002e2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e6:	45a1      	cmp	r9, r4
 80002e8:	d907      	bls.n	80002fa <__udivmoddi4+0x14e>
 80002ea:	192c      	adds	r4, r5, r4
 80002ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f0:	d202      	bcs.n	80002f8 <__udivmoddi4+0x14c>
 80002f2:	45a1      	cmp	r9, r4
 80002f4:	f200 80b6 	bhi.w	8000464 <__udivmoddi4+0x2b8>
 80002f8:	4618      	mov	r0, r3
 80002fa:	eba4 0409 	sub.w	r4, r4, r9
 80002fe:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000302:	e79e      	b.n	8000242 <__udivmoddi4+0x96>
 8000304:	f1c7 0520 	rsb	r5, r7, #32
 8000308:	40bb      	lsls	r3, r7
 800030a:	fa22 fc05 	lsr.w	ip, r2, r5
 800030e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000312:	fa21 f405 	lsr.w	r4, r1, r5
 8000316:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800031a:	fbb4 f9fe 	udiv	r9, r4, lr
 800031e:	fa1f f88c 	uxth.w	r8, ip
 8000322:	fb0e 4419 	mls	r4, lr, r9, r4
 8000326:	fa20 f305 	lsr.w	r3, r0, r5
 800032a:	40b9      	lsls	r1, r7
 800032c:	fb09 fa08 	mul.w	sl, r9, r8
 8000330:	4319      	orrs	r1, r3
 8000332:	0c0b      	lsrs	r3, r1, #16
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	45a2      	cmp	sl, r4
 800033a:	fa02 f207 	lsl.w	r2, r2, r7
 800033e:	fa00 f307 	lsl.w	r3, r0, r7
 8000342:	d90b      	bls.n	800035c <__udivmoddi4+0x1b0>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f109 30ff 	add.w	r0, r9, #4294967295
 800034c:	f080 8088 	bcs.w	8000460 <__udivmoddi4+0x2b4>
 8000350:	45a2      	cmp	sl, r4
 8000352:	f240 8085 	bls.w	8000460 <__udivmoddi4+0x2b4>
 8000356:	f1a9 0902 	sub.w	r9, r9, #2
 800035a:	4464      	add	r4, ip
 800035c:	eba4 040a 	sub.w	r4, r4, sl
 8000360:	fbb4 f0fe 	udiv	r0, r4, lr
 8000364:	fb0e 4410 	mls	r4, lr, r0, r4
 8000368:	fb00 fa08 	mul.w	sl, r0, r8
 800036c:	b289      	uxth	r1, r1
 800036e:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000372:	45a2      	cmp	sl, r4
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x1dc>
 8000376:	eb1c 0404 	adds.w	r4, ip, r4
 800037a:	f100 31ff 	add.w	r1, r0, #4294967295
 800037e:	d26b      	bcs.n	8000458 <__udivmoddi4+0x2ac>
 8000380:	45a2      	cmp	sl, r4
 8000382:	d969      	bls.n	8000458 <__udivmoddi4+0x2ac>
 8000384:	3802      	subs	r0, #2
 8000386:	4464      	add	r4, ip
 8000388:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800038c:	fba0 8902 	umull	r8, r9, r0, r2
 8000390:	eba4 040a 	sub.w	r4, r4, sl
 8000394:	454c      	cmp	r4, r9
 8000396:	4641      	mov	r1, r8
 8000398:	46ce      	mov	lr, r9
 800039a:	d354      	bcc.n	8000446 <__udivmoddi4+0x29a>
 800039c:	d051      	beq.n	8000442 <__udivmoddi4+0x296>
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d069      	beq.n	8000476 <__udivmoddi4+0x2ca>
 80003a2:	1a5a      	subs	r2, r3, r1
 80003a4:	eb64 040e 	sbc.w	r4, r4, lr
 80003a8:	fa04 f505 	lsl.w	r5, r4, r5
 80003ac:	fa22 f307 	lsr.w	r3, r2, r7
 80003b0:	40fc      	lsrs	r4, r7
 80003b2:	431d      	orrs	r5, r3
 80003b4:	e9c6 5400 	strd	r5, r4, [r6]
 80003b8:	2700      	movs	r7, #0
 80003ba:	e747      	b.n	800024c <__udivmoddi4+0xa0>
 80003bc:	4095      	lsls	r5, r2
 80003be:	f1c2 0320 	rsb	r3, r2, #32
 80003c2:	fa21 f003 	lsr.w	r0, r1, r3
 80003c6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80003ca:	fbb0 f7f8 	udiv	r7, r0, r8
 80003ce:	fa1f f985 	uxth.w	r9, r5
 80003d2:	fb08 0017 	mls	r0, r8, r7, r0
 80003d6:	fa24 f303 	lsr.w	r3, r4, r3
 80003da:	4091      	lsls	r1, r2
 80003dc:	fb07 fc09 	mul.w	ip, r7, r9
 80003e0:	430b      	orrs	r3, r1
 80003e2:	0c19      	lsrs	r1, r3, #16
 80003e4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80003e8:	458c      	cmp	ip, r1
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d907      	bls.n	8000400 <__udivmoddi4+0x254>
 80003f0:	1869      	adds	r1, r5, r1
 80003f2:	f107 30ff 	add.w	r0, r7, #4294967295
 80003f6:	d231      	bcs.n	800045c <__udivmoddi4+0x2b0>
 80003f8:	458c      	cmp	ip, r1
 80003fa:	d92f      	bls.n	800045c <__udivmoddi4+0x2b0>
 80003fc:	3f02      	subs	r7, #2
 80003fe:	4429      	add	r1, r5
 8000400:	eba1 010c 	sub.w	r1, r1, ip
 8000404:	fbb1 f0f8 	udiv	r0, r1, r8
 8000408:	fb08 1c10 	mls	ip, r8, r0, r1
 800040c:	fb00 fe09 	mul.w	lr, r0, r9
 8000410:	b299      	uxth	r1, r3
 8000412:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000416:	458e      	cmp	lr, r1
 8000418:	d907      	bls.n	800042a <__udivmoddi4+0x27e>
 800041a:	1869      	adds	r1, r5, r1
 800041c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000420:	d218      	bcs.n	8000454 <__udivmoddi4+0x2a8>
 8000422:	458e      	cmp	lr, r1
 8000424:	d916      	bls.n	8000454 <__udivmoddi4+0x2a8>
 8000426:	3802      	subs	r0, #2
 8000428:	4429      	add	r1, r5
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000432:	e73a      	b.n	80002aa <__udivmoddi4+0xfe>
 8000434:	4637      	mov	r7, r6
 8000436:	4630      	mov	r0, r6
 8000438:	e708      	b.n	800024c <__udivmoddi4+0xa0>
 800043a:	460f      	mov	r7, r1
 800043c:	e6e6      	b.n	800020c <__udivmoddi4+0x60>
 800043e:	4618      	mov	r0, r3
 8000440:	e6fb      	b.n	800023a <__udivmoddi4+0x8e>
 8000442:	4543      	cmp	r3, r8
 8000444:	d2ab      	bcs.n	800039e <__udivmoddi4+0x1f2>
 8000446:	ebb8 0102 	subs.w	r1, r8, r2
 800044a:	eb69 020c 	sbc.w	r2, r9, ip
 800044e:	3801      	subs	r0, #1
 8000450:	4696      	mov	lr, r2
 8000452:	e7a4      	b.n	800039e <__udivmoddi4+0x1f2>
 8000454:	4618      	mov	r0, r3
 8000456:	e7e8      	b.n	800042a <__udivmoddi4+0x27e>
 8000458:	4608      	mov	r0, r1
 800045a:	e795      	b.n	8000388 <__udivmoddi4+0x1dc>
 800045c:	4607      	mov	r7, r0
 800045e:	e7cf      	b.n	8000400 <__udivmoddi4+0x254>
 8000460:	4681      	mov	r9, r0
 8000462:	e77b      	b.n	800035c <__udivmoddi4+0x1b0>
 8000464:	3802      	subs	r0, #2
 8000466:	442c      	add	r4, r5
 8000468:	e747      	b.n	80002fa <__udivmoddi4+0x14e>
 800046a:	f1ae 0e02 	sub.w	lr, lr, #2
 800046e:	442b      	add	r3, r5
 8000470:	e72f      	b.n	80002d2 <__udivmoddi4+0x126>
 8000472:	4638      	mov	r0, r7
 8000474:	e707      	b.n	8000286 <__udivmoddi4+0xda>
 8000476:	4637      	mov	r7, r6
 8000478:	e6e8      	b.n	800024c <__udivmoddi4+0xa0>
 800047a:	bf00      	nop

0800047c <__aeabi_idiv0>:
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop

08000480 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000484:	f000 f8d7 	bl	8000636 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000488:	f000 f802 	bl	8000490 <SystemClock_Config>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800048c:	e7fe      	b.n	800048c <main+0xc>
	...

08000490 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b092      	sub	sp, #72	; 0x48
 8000494:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000496:	f107 0314 	add.w	r3, r7, #20
 800049a:	2234      	movs	r2, #52	; 0x34
 800049c:	2100      	movs	r1, #0
 800049e:	4618      	mov	r0, r3
 80004a0:	f000 ffa6 	bl	80013f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004a4:	463b      	mov	r3, r7
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]
 80004aa:	605a      	str	r2, [r3, #4]
 80004ac:	609a      	str	r2, [r3, #8]
 80004ae:	60da      	str	r2, [r3, #12]
 80004b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004b2:	4b1a      	ldr	r3, [pc, #104]	; (800051c <SystemClock_Config+0x8c>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80004ba:	4a18      	ldr	r2, [pc, #96]	; (800051c <SystemClock_Config+0x8c>)
 80004bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80004c0:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80004c2:	2310      	movs	r3, #16
 80004c4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80004c6:	2301      	movs	r3, #1
 80004c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80004ca:	2300      	movs	r3, #0
 80004cc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80004ce:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80004d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004d4:	2300      	movs	r3, #0
 80004d6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004d8:	f107 0314 	add.w	r3, r7, #20
 80004dc:	4618      	mov	r0, r3
 80004de:	f000 f9fd 	bl	80008dc <HAL_RCC_OscConfig>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80004e8:	f000 f81a 	bl	8000520 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ec:	230f      	movs	r3, #15
 80004ee:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80004f0:	2300      	movs	r3, #0
 80004f2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004f4:	2300      	movs	r3, #0
 80004f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004f8:	2300      	movs	r3, #0
 80004fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004fc:	2300      	movs	r3, #0
 80004fe:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000500:	463b      	mov	r3, r7
 8000502:	2100      	movs	r1, #0
 8000504:	4618      	mov	r0, r3
 8000506:	f000 fd19 	bl	8000f3c <HAL_RCC_ClockConfig>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000510:	f000 f806 	bl	8000520 <Error_Handler>
  }
}
 8000514:	bf00      	nop
 8000516:	3748      	adds	r7, #72	; 0x48
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	40007000 	.word	0x40007000

08000520 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000524:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000526:	e7fe      	b.n	8000526 <Error_Handler+0x6>

08000528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800052e:	4b14      	ldr	r3, [pc, #80]	; (8000580 <HAL_MspInit+0x58>)
 8000530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000532:	4a13      	ldr	r2, [pc, #76]	; (8000580 <HAL_MspInit+0x58>)
 8000534:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000538:	6253      	str	r3, [r2, #36]	; 0x24
 800053a:	4b11      	ldr	r3, [pc, #68]	; (8000580 <HAL_MspInit+0x58>)
 800053c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800053e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000546:	4b0e      	ldr	r3, [pc, #56]	; (8000580 <HAL_MspInit+0x58>)
 8000548:	6a1b      	ldr	r3, [r3, #32]
 800054a:	4a0d      	ldr	r2, [pc, #52]	; (8000580 <HAL_MspInit+0x58>)
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	6213      	str	r3, [r2, #32]
 8000552:	4b0b      	ldr	r3, [pc, #44]	; (8000580 <HAL_MspInit+0x58>)
 8000554:	6a1b      	ldr	r3, [r3, #32]
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800055e:	4b08      	ldr	r3, [pc, #32]	; (8000580 <HAL_MspInit+0x58>)
 8000560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000562:	4a07      	ldr	r2, [pc, #28]	; (8000580 <HAL_MspInit+0x58>)
 8000564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000568:	6253      	str	r3, [r2, #36]	; 0x24
 800056a:	4b05      	ldr	r3, [pc, #20]	; (8000580 <HAL_MspInit+0x58>)
 800056c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800056e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000576:	bf00      	nop
 8000578:	3714      	adds	r7, #20
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr
 8000580:	40023800 	.word	0x40023800

08000584 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000588:	e7fe      	b.n	8000588 <NMI_Handler+0x4>

0800058a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800058a:	b480      	push	{r7}
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800058e:	e7fe      	b.n	800058e <HardFault_Handler+0x4>

08000590 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000594:	e7fe      	b.n	8000594 <MemManage_Handler+0x4>

08000596 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000596:	b480      	push	{r7}
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800059a:	e7fe      	b.n	800059a <BusFault_Handler+0x4>

0800059c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005a0:	e7fe      	b.n	80005a0 <UsageFault_Handler+0x4>

080005a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005a2:	b480      	push	{r7}
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80005a6:	bf00      	nop
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bc80      	pop	{r7}
 80005ac:	4770      	bx	lr

080005ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005ae:	b480      	push	{r7}
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005b2:	bf00      	nop
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bc80      	pop	{r7}
 80005b8:	4770      	bx	lr

080005ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ba:	b480      	push	{r7}
 80005bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005be:	bf00      	nop
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bc80      	pop	{r7}
 80005c4:	4770      	bx	lr

080005c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005c6:	b580      	push	{r7, lr}
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005ca:	f000 f887 	bl	80006dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
	...

080005d4 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80005d8:	4b03      	ldr	r3, [pc, #12]	; (80005e8 <SystemInit+0x14>)
 80005da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005de:	609a      	str	r2, [r3, #8]
#endif
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr
 80005e8:	e000ed00 	.word	0xe000ed00

080005ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80005ec:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80005ee:	e003      	b.n	80005f8 <LoopCopyDataInit>

080005f0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80005f0:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80005f2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80005f4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80005f6:	3104      	adds	r1, #4

080005f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80005f8:	480a      	ldr	r0, [pc, #40]	; (8000624 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80005fa:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80005fc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80005fe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000600:	d3f6      	bcc.n	80005f0 <CopyDataInit>
  ldr r2, =_sbss
 8000602:	4a0a      	ldr	r2, [pc, #40]	; (800062c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000604:	e002      	b.n	800060c <LoopFillZerobss>

08000606 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000606:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000608:	f842 3b04 	str.w	r3, [r2], #4

0800060c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800060c:	4b08      	ldr	r3, [pc, #32]	; (8000630 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800060e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000610:	d3f9      	bcc.n	8000606 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000612:	f7ff ffdf 	bl	80005d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000616:	f000 fec7 	bl	80013a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800061a:	f7ff ff31 	bl	8000480 <main>
  bx lr
 800061e:	4770      	bx	lr
  ldr r3, =_sidata
 8000620:	08001444 	.word	0x08001444
  ldr r0, =_sdata
 8000624:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000628:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 800062c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000630:	2000002c 	.word	0x2000002c

08000634 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000634:	e7fe      	b.n	8000634 <ADC1_IRQHandler>

08000636 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000636:	b580      	push	{r7, lr}
 8000638:	b082      	sub	sp, #8
 800063a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800063c:	2300      	movs	r3, #0
 800063e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000640:	2003      	movs	r0, #3
 8000642:	f000 f917 	bl	8000874 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000646:	2000      	movs	r0, #0
 8000648:	f000 f80e 	bl	8000668 <HAL_InitTick>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d002      	beq.n	8000658 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000652:	2301      	movs	r3, #1
 8000654:	71fb      	strb	r3, [r7, #7]
 8000656:	e001      	b.n	800065c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000658:	f7ff ff66 	bl	8000528 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800065c:	79fb      	ldrb	r3, [r7, #7]
}
 800065e:	4618      	mov	r0, r3
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
	...

08000668 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000670:	2300      	movs	r3, #0
 8000672:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000674:	4b16      	ldr	r3, [pc, #88]	; (80006d0 <HAL_InitTick+0x68>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d022      	beq.n	80006c2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800067c:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <HAL_InitTick+0x6c>)
 800067e:	681a      	ldr	r2, [r3, #0]
 8000680:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <HAL_InitTick+0x68>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000688:	fbb1 f3f3 	udiv	r3, r1, r3
 800068c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000690:	4618      	mov	r0, r3
 8000692:	f000 f916 	bl	80008c2 <HAL_SYSTICK_Config>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d10f      	bne.n	80006bc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	2b0f      	cmp	r3, #15
 80006a0:	d809      	bhi.n	80006b6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006a2:	2200      	movs	r2, #0
 80006a4:	6879      	ldr	r1, [r7, #4]
 80006a6:	f04f 30ff 	mov.w	r0, #4294967295
 80006aa:	f000 f8ee 	bl	800088a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006ae:	4a0a      	ldr	r2, [pc, #40]	; (80006d8 <HAL_InitTick+0x70>)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	6013      	str	r3, [r2, #0]
 80006b4:	e007      	b.n	80006c6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80006b6:	2301      	movs	r3, #1
 80006b8:	73fb      	strb	r3, [r7, #15]
 80006ba:	e004      	b.n	80006c6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006bc:	2301      	movs	r3, #1
 80006be:	73fb      	strb	r3, [r7, #15]
 80006c0:	e001      	b.n	80006c6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006c2:	2301      	movs	r3, #1
 80006c4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3710      	adds	r7, #16
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000008 	.word	0x20000008
 80006d4:	20000000 	.word	0x20000000
 80006d8:	20000004 	.word	0x20000004

080006dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006e0:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <HAL_IncTick+0x1c>)
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	4b05      	ldr	r3, [pc, #20]	; (80006fc <HAL_IncTick+0x20>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4413      	add	r3, r2
 80006ea:	4a03      	ldr	r2, [pc, #12]	; (80006f8 <HAL_IncTick+0x1c>)
 80006ec:	6013      	str	r3, [r2, #0]
}
 80006ee:	bf00      	nop
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bc80      	pop	{r7}
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	20000028 	.word	0x20000028
 80006fc:	20000008 	.word	0x20000008

08000700 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  return uwTick;
 8000704:	4b02      	ldr	r3, [pc, #8]	; (8000710 <HAL_GetTick+0x10>)
 8000706:	681b      	ldr	r3, [r3, #0]
}
 8000708:	4618      	mov	r0, r3
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr
 8000710:	20000028 	.word	0x20000028

08000714 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000714:	b480      	push	{r7}
 8000716:	b085      	sub	sp, #20
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	f003 0307 	and.w	r3, r3, #7
 8000722:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <__NVIC_SetPriorityGrouping+0x44>)
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800072a:	68ba      	ldr	r2, [r7, #8]
 800072c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000730:	4013      	ands	r3, r2
 8000732:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800073c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000746:	4a04      	ldr	r2, [pc, #16]	; (8000758 <__NVIC_SetPriorityGrouping+0x44>)
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	60d3      	str	r3, [r2, #12]
}
 800074c:	bf00      	nop
 800074e:	3714      	adds	r7, #20
 8000750:	46bd      	mov	sp, r7
 8000752:	bc80      	pop	{r7}
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	e000ed00 	.word	0xe000ed00

0800075c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000760:	4b04      	ldr	r3, [pc, #16]	; (8000774 <__NVIC_GetPriorityGrouping+0x18>)
 8000762:	68db      	ldr	r3, [r3, #12]
 8000764:	0a1b      	lsrs	r3, r3, #8
 8000766:	f003 0307 	and.w	r3, r3, #7
}
 800076a:	4618      	mov	r0, r3
 800076c:	46bd      	mov	sp, r7
 800076e:	bc80      	pop	{r7}
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	e000ed00 	.word	0xe000ed00

08000778 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	6039      	str	r1, [r7, #0]
 8000782:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000788:	2b00      	cmp	r3, #0
 800078a:	db0a      	blt.n	80007a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	b2da      	uxtb	r2, r3
 8000790:	490c      	ldr	r1, [pc, #48]	; (80007c4 <__NVIC_SetPriority+0x4c>)
 8000792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000796:	0112      	lsls	r2, r2, #4
 8000798:	b2d2      	uxtb	r2, r2
 800079a:	440b      	add	r3, r1
 800079c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007a0:	e00a      	b.n	80007b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	b2da      	uxtb	r2, r3
 80007a6:	4908      	ldr	r1, [pc, #32]	; (80007c8 <__NVIC_SetPriority+0x50>)
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	f003 030f 	and.w	r3, r3, #15
 80007ae:	3b04      	subs	r3, #4
 80007b0:	0112      	lsls	r2, r2, #4
 80007b2:	b2d2      	uxtb	r2, r2
 80007b4:	440b      	add	r3, r1
 80007b6:	761a      	strb	r2, [r3, #24]
}
 80007b8:	bf00      	nop
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	e000e100 	.word	0xe000e100
 80007c8:	e000ed00 	.word	0xe000ed00

080007cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b089      	sub	sp, #36	; 0x24
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	60f8      	str	r0, [r7, #12]
 80007d4:	60b9      	str	r1, [r7, #8]
 80007d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	f003 0307 	and.w	r3, r3, #7
 80007de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007e0:	69fb      	ldr	r3, [r7, #28]
 80007e2:	f1c3 0307 	rsb	r3, r3, #7
 80007e6:	2b04      	cmp	r3, #4
 80007e8:	bf28      	it	cs
 80007ea:	2304      	movcs	r3, #4
 80007ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ee:	69fb      	ldr	r3, [r7, #28]
 80007f0:	3304      	adds	r3, #4
 80007f2:	2b06      	cmp	r3, #6
 80007f4:	d902      	bls.n	80007fc <NVIC_EncodePriority+0x30>
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	3b03      	subs	r3, #3
 80007fa:	e000      	b.n	80007fe <NVIC_EncodePriority+0x32>
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000800:	f04f 32ff 	mov.w	r2, #4294967295
 8000804:	69bb      	ldr	r3, [r7, #24]
 8000806:	fa02 f303 	lsl.w	r3, r2, r3
 800080a:	43da      	mvns	r2, r3
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	401a      	ands	r2, r3
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000814:	f04f 31ff 	mov.w	r1, #4294967295
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	fa01 f303 	lsl.w	r3, r1, r3
 800081e:	43d9      	mvns	r1, r3
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000824:	4313      	orrs	r3, r2
         );
}
 8000826:	4618      	mov	r0, r3
 8000828:	3724      	adds	r7, #36	; 0x24
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr

08000830 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	3b01      	subs	r3, #1
 800083c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000840:	d301      	bcc.n	8000846 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000842:	2301      	movs	r3, #1
 8000844:	e00f      	b.n	8000866 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000846:	4a0a      	ldr	r2, [pc, #40]	; (8000870 <SysTick_Config+0x40>)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	3b01      	subs	r3, #1
 800084c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800084e:	210f      	movs	r1, #15
 8000850:	f04f 30ff 	mov.w	r0, #4294967295
 8000854:	f7ff ff90 	bl	8000778 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000858:	4b05      	ldr	r3, [pc, #20]	; (8000870 <SysTick_Config+0x40>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800085e:	4b04      	ldr	r3, [pc, #16]	; (8000870 <SysTick_Config+0x40>)
 8000860:	2207      	movs	r2, #7
 8000862:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000864:	2300      	movs	r3, #0
}
 8000866:	4618      	mov	r0, r3
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	e000e010 	.word	0xe000e010

08000874 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800087c:	6878      	ldr	r0, [r7, #4]
 800087e:	f7ff ff49 	bl	8000714 <__NVIC_SetPriorityGrouping>
}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	b086      	sub	sp, #24
 800088e:	af00      	add	r7, sp, #0
 8000890:	4603      	mov	r3, r0
 8000892:	60b9      	str	r1, [r7, #8]
 8000894:	607a      	str	r2, [r7, #4]
 8000896:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000898:	2300      	movs	r3, #0
 800089a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800089c:	f7ff ff5e 	bl	800075c <__NVIC_GetPriorityGrouping>
 80008a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	68b9      	ldr	r1, [r7, #8]
 80008a6:	6978      	ldr	r0, [r7, #20]
 80008a8:	f7ff ff90 	bl	80007cc <NVIC_EncodePriority>
 80008ac:	4602      	mov	r2, r0
 80008ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008b2:	4611      	mov	r1, r2
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff ff5f 	bl	8000778 <__NVIC_SetPriority>
}
 80008ba:	bf00      	nop
 80008bc:	3718      	adds	r7, #24
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b082      	sub	sp, #8
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ca:	6878      	ldr	r0, [r7, #4]
 80008cc:	f7ff ffb0 	bl	8000830 <SysTick_Config>
 80008d0:	4603      	mov	r3, r0
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b088      	sub	sp, #32
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d101      	bne.n	80008ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80008ea:	2301      	movs	r3, #1
 80008ec:	e31d      	b.n	8000f2a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80008ee:	4b94      	ldr	r3, [pc, #592]	; (8000b40 <HAL_RCC_OscConfig+0x264>)
 80008f0:	689b      	ldr	r3, [r3, #8]
 80008f2:	f003 030c 	and.w	r3, r3, #12
 80008f6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80008f8:	4b91      	ldr	r3, [pc, #580]	; (8000b40 <HAL_RCC_OscConfig+0x264>)
 80008fa:	689b      	ldr	r3, [r3, #8]
 80008fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000900:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	2b00      	cmp	r3, #0
 800090c:	d07b      	beq.n	8000a06 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800090e:	69bb      	ldr	r3, [r7, #24]
 8000910:	2b08      	cmp	r3, #8
 8000912:	d006      	beq.n	8000922 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000914:	69bb      	ldr	r3, [r7, #24]
 8000916:	2b0c      	cmp	r3, #12
 8000918:	d10f      	bne.n	800093a <HAL_RCC_OscConfig+0x5e>
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000920:	d10b      	bne.n	800093a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000922:	4b87      	ldr	r3, [pc, #540]	; (8000b40 <HAL_RCC_OscConfig+0x264>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800092a:	2b00      	cmp	r3, #0
 800092c:	d06a      	beq.n	8000a04 <HAL_RCC_OscConfig+0x128>
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d166      	bne.n	8000a04 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8000936:	2301      	movs	r3, #1
 8000938:	e2f7      	b.n	8000f2a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	2b01      	cmp	r3, #1
 8000940:	d106      	bne.n	8000950 <HAL_RCC_OscConfig+0x74>
 8000942:	4b7f      	ldr	r3, [pc, #508]	; (8000b40 <HAL_RCC_OscConfig+0x264>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a7e      	ldr	r2, [pc, #504]	; (8000b40 <HAL_RCC_OscConfig+0x264>)
 8000948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800094c:	6013      	str	r3, [r2, #0]
 800094e:	e02d      	b.n	80009ac <HAL_RCC_OscConfig+0xd0>
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d10c      	bne.n	8000972 <HAL_RCC_OscConfig+0x96>
 8000958:	4b79      	ldr	r3, [pc, #484]	; (8000b40 <HAL_RCC_OscConfig+0x264>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a78      	ldr	r2, [pc, #480]	; (8000b40 <HAL_RCC_OscConfig+0x264>)
 800095e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000962:	6013      	str	r3, [r2, #0]
 8000964:	4b76      	ldr	r3, [pc, #472]	; (8000b40 <HAL_RCC_OscConfig+0x264>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a75      	ldr	r2, [pc, #468]	; (8000b40 <HAL_RCC_OscConfig+0x264>)
 800096a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800096e:	6013      	str	r3, [r2, #0]
 8000970:	e01c      	b.n	80009ac <HAL_RCC_OscConfig+0xd0>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	2b05      	cmp	r3, #5
 8000978:	d10c      	bne.n	8000994 <HAL_RCC_OscConfig+0xb8>
 800097a:	4b71      	ldr	r3, [pc, #452]	; (8000b40 <HAL_RCC_OscConfig+0x264>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4a70      	ldr	r2, [pc, #448]	; (8000b40 <HAL_RCC_OscConfig+0x264>)
 8000980:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000984:	6013      	str	r3, [r2, #0]
 8000986:	4b6e      	ldr	r3, [pc, #440]	; (8000b40 <HAL_RCC_OscConfig+0x264>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a6d      	ldr	r2, [pc, #436]	; (8000b40 <HAL_RCC_OscConfig+0x264>)
 800098c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000990:	6013      	str	r3, [r2, #0]
 8000992:	e00b      	b.n	80009ac <HAL_RCC_OscConfig+0xd0>
 8000994:	4b6a      	ldr	r3, [pc, #424]	; (8000b40 <HAL_RCC_OscConfig+0x264>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a69      	ldr	r2, [pc, #420]	; (8000b40 <HAL_RCC_OscConfig+0x264>)
 800099a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800099e:	6013      	str	r3, [r2, #0]
 80009a0:	4b67      	ldr	r3, [pc, #412]	; (8000b40 <HAL_RCC_OscConfig+0x264>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a66      	ldr	r2, [pc, #408]	; (8000b40 <HAL_RCC_OscConfig+0x264>)
 80009a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d013      	beq.n	80009dc <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009b4:	f7ff fea4 	bl	8000700 <HAL_GetTick>
 80009b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80009ba:	e008      	b.n	80009ce <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009bc:	f7ff fea0 	bl	8000700 <HAL_GetTick>
 80009c0:	4602      	mov	r2, r0
 80009c2:	693b      	ldr	r3, [r7, #16]
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	2b64      	cmp	r3, #100	; 0x64
 80009c8:	d901      	bls.n	80009ce <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80009ca:	2303      	movs	r3, #3
 80009cc:	e2ad      	b.n	8000f2a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80009ce:	4b5c      	ldr	r3, [pc, #368]	; (8000b40 <HAL_RCC_OscConfig+0x264>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d0f0      	beq.n	80009bc <HAL_RCC_OscConfig+0xe0>
 80009da:	e014      	b.n	8000a06 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009dc:	f7ff fe90 	bl	8000700 <HAL_GetTick>
 80009e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80009e2:	e008      	b.n	80009f6 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009e4:	f7ff fe8c 	bl	8000700 <HAL_GetTick>
 80009e8:	4602      	mov	r2, r0
 80009ea:	693b      	ldr	r3, [r7, #16]
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	2b64      	cmp	r3, #100	; 0x64
 80009f0:	d901      	bls.n	80009f6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80009f2:	2303      	movs	r3, #3
 80009f4:	e299      	b.n	8000f2a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80009f6:	4b52      	ldr	r3, [pc, #328]	; (8000b40 <HAL_RCC_OscConfig+0x264>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d1f0      	bne.n	80009e4 <HAL_RCC_OscConfig+0x108>
 8000a02:	e000      	b.n	8000a06 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f003 0302 	and.w	r3, r3, #2
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d05a      	beq.n	8000ac8 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000a12:	69bb      	ldr	r3, [r7, #24]
 8000a14:	2b04      	cmp	r3, #4
 8000a16:	d005      	beq.n	8000a24 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000a18:	69bb      	ldr	r3, [r7, #24]
 8000a1a:	2b0c      	cmp	r3, #12
 8000a1c:	d119      	bne.n	8000a52 <HAL_RCC_OscConfig+0x176>
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d116      	bne.n	8000a52 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a24:	4b46      	ldr	r3, [pc, #280]	; (8000b40 <HAL_RCC_OscConfig+0x264>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f003 0302 	and.w	r3, r3, #2
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d005      	beq.n	8000a3c <HAL_RCC_OscConfig+0x160>
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	68db      	ldr	r3, [r3, #12]
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d001      	beq.n	8000a3c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	e276      	b.n	8000f2a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a3c:	4b40      	ldr	r3, [pc, #256]	; (8000b40 <HAL_RCC_OscConfig+0x264>)
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	691b      	ldr	r3, [r3, #16]
 8000a48:	021b      	lsls	r3, r3, #8
 8000a4a:	493d      	ldr	r1, [pc, #244]	; (8000b40 <HAL_RCC_OscConfig+0x264>)
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a50:	e03a      	b.n	8000ac8 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	68db      	ldr	r3, [r3, #12]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d020      	beq.n	8000a9c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000a5a:	4b3a      	ldr	r3, [pc, #232]	; (8000b44 <HAL_RCC_OscConfig+0x268>)
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a60:	f7ff fe4e 	bl	8000700 <HAL_GetTick>
 8000a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000a66:	e008      	b.n	8000a7a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a68:	f7ff fe4a 	bl	8000700 <HAL_GetTick>
 8000a6c:	4602      	mov	r2, r0
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	2b02      	cmp	r3, #2
 8000a74:	d901      	bls.n	8000a7a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8000a76:	2303      	movs	r3, #3
 8000a78:	e257      	b.n	8000f2a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000a7a:	4b31      	ldr	r3, [pc, #196]	; (8000b40 <HAL_RCC_OscConfig+0x264>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f003 0302 	and.w	r3, r3, #2
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d0f0      	beq.n	8000a68 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a86:	4b2e      	ldr	r3, [pc, #184]	; (8000b40 <HAL_RCC_OscConfig+0x264>)
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	691b      	ldr	r3, [r3, #16]
 8000a92:	021b      	lsls	r3, r3, #8
 8000a94:	492a      	ldr	r1, [pc, #168]	; (8000b40 <HAL_RCC_OscConfig+0x264>)
 8000a96:	4313      	orrs	r3, r2
 8000a98:	604b      	str	r3, [r1, #4]
 8000a9a:	e015      	b.n	8000ac8 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000a9c:	4b29      	ldr	r3, [pc, #164]	; (8000b44 <HAL_RCC_OscConfig+0x268>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000aa2:	f7ff fe2d 	bl	8000700 <HAL_GetTick>
 8000aa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000aa8:	e008      	b.n	8000abc <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000aaa:	f7ff fe29 	bl	8000700 <HAL_GetTick>
 8000aae:	4602      	mov	r2, r0
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	1ad3      	subs	r3, r2, r3
 8000ab4:	2b02      	cmp	r3, #2
 8000ab6:	d901      	bls.n	8000abc <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	e236      	b.n	8000f2a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000abc:	4b20      	ldr	r3, [pc, #128]	; (8000b40 <HAL_RCC_OscConfig+0x264>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f003 0302 	and.w	r3, r3, #2
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d1f0      	bne.n	8000aaa <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f003 0310 	and.w	r3, r3, #16
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	f000 80b8 	beq.w	8000c46 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000ad6:	69bb      	ldr	r3, [r7, #24]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d170      	bne.n	8000bbe <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000adc:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <HAL_RCC_OscConfig+0x264>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d005      	beq.n	8000af4 <HAL_RCC_OscConfig+0x218>
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d101      	bne.n	8000af4 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8000af0:	2301      	movs	r3, #1
 8000af2:	e21a      	b.n	8000f2a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	6a1a      	ldr	r2, [r3, #32]
 8000af8:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <HAL_RCC_OscConfig+0x264>)
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d921      	bls.n	8000b48 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6a1b      	ldr	r3, [r3, #32]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f000 fbed 	bl	80012e8 <RCC_SetFlashLatencyFromMSIRange>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8000b14:	2301      	movs	r3, #1
 8000b16:	e208      	b.n	8000f2a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000b18:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <HAL_RCC_OscConfig+0x264>)
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6a1b      	ldr	r3, [r3, #32]
 8000b24:	4906      	ldr	r1, [pc, #24]	; (8000b40 <HAL_RCC_OscConfig+0x264>)
 8000b26:	4313      	orrs	r3, r2
 8000b28:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000b2a:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <HAL_RCC_OscConfig+0x264>)
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	69db      	ldr	r3, [r3, #28]
 8000b36:	061b      	lsls	r3, r3, #24
 8000b38:	4901      	ldr	r1, [pc, #4]	; (8000b40 <HAL_RCC_OscConfig+0x264>)
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	604b      	str	r3, [r1, #4]
 8000b3e:	e020      	b.n	8000b82 <HAL_RCC_OscConfig+0x2a6>
 8000b40:	40023800 	.word	0x40023800
 8000b44:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000b48:	4ba4      	ldr	r3, [pc, #656]	; (8000ddc <HAL_RCC_OscConfig+0x500>)
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6a1b      	ldr	r3, [r3, #32]
 8000b54:	49a1      	ldr	r1, [pc, #644]	; (8000ddc <HAL_RCC_OscConfig+0x500>)
 8000b56:	4313      	orrs	r3, r2
 8000b58:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000b5a:	4ba0      	ldr	r3, [pc, #640]	; (8000ddc <HAL_RCC_OscConfig+0x500>)
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	69db      	ldr	r3, [r3, #28]
 8000b66:	061b      	lsls	r3, r3, #24
 8000b68:	499c      	ldr	r1, [pc, #624]	; (8000ddc <HAL_RCC_OscConfig+0x500>)
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6a1b      	ldr	r3, [r3, #32]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f000 fbb8 	bl	80012e8 <RCC_SetFlashLatencyFromMSIRange>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e1d3      	b.n	8000f2a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6a1b      	ldr	r3, [r3, #32]
 8000b86:	0b5b      	lsrs	r3, r3, #13
 8000b88:	3301      	adds	r3, #1
 8000b8a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000b92:	4a92      	ldr	r2, [pc, #584]	; (8000ddc <HAL_RCC_OscConfig+0x500>)
 8000b94:	6892      	ldr	r2, [r2, #8]
 8000b96:	0912      	lsrs	r2, r2, #4
 8000b98:	f002 020f 	and.w	r2, r2, #15
 8000b9c:	4990      	ldr	r1, [pc, #576]	; (8000de0 <HAL_RCC_OscConfig+0x504>)
 8000b9e:	5c8a      	ldrb	r2, [r1, r2]
 8000ba0:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000ba2:	4a90      	ldr	r2, [pc, #576]	; (8000de4 <HAL_RCC_OscConfig+0x508>)
 8000ba4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000ba6:	4b90      	ldr	r3, [pc, #576]	; (8000de8 <HAL_RCC_OscConfig+0x50c>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff fd5c 	bl	8000668 <HAL_InitTick>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000bb4:	7bfb      	ldrb	r3, [r7, #15]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d045      	beq.n	8000c46 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8000bba:	7bfb      	ldrb	r3, [r7, #15]
 8000bbc:	e1b5      	b.n	8000f2a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	699b      	ldr	r3, [r3, #24]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d029      	beq.n	8000c1a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000bc6:	4b89      	ldr	r3, [pc, #548]	; (8000dec <HAL_RCC_OscConfig+0x510>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bcc:	f7ff fd98 	bl	8000700 <HAL_GetTick>
 8000bd0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000bd2:	e008      	b.n	8000be6 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000bd4:	f7ff fd94 	bl	8000700 <HAL_GetTick>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	2b02      	cmp	r3, #2
 8000be0:	d901      	bls.n	8000be6 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8000be2:	2303      	movs	r3, #3
 8000be4:	e1a1      	b.n	8000f2a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000be6:	4b7d      	ldr	r3, [pc, #500]	; (8000ddc <HAL_RCC_OscConfig+0x500>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d0f0      	beq.n	8000bd4 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000bf2:	4b7a      	ldr	r3, [pc, #488]	; (8000ddc <HAL_RCC_OscConfig+0x500>)
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6a1b      	ldr	r3, [r3, #32]
 8000bfe:	4977      	ldr	r1, [pc, #476]	; (8000ddc <HAL_RCC_OscConfig+0x500>)
 8000c00:	4313      	orrs	r3, r2
 8000c02:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c04:	4b75      	ldr	r3, [pc, #468]	; (8000ddc <HAL_RCC_OscConfig+0x500>)
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	69db      	ldr	r3, [r3, #28]
 8000c10:	061b      	lsls	r3, r3, #24
 8000c12:	4972      	ldr	r1, [pc, #456]	; (8000ddc <HAL_RCC_OscConfig+0x500>)
 8000c14:	4313      	orrs	r3, r2
 8000c16:	604b      	str	r3, [r1, #4]
 8000c18:	e015      	b.n	8000c46 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000c1a:	4b74      	ldr	r3, [pc, #464]	; (8000dec <HAL_RCC_OscConfig+0x510>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c20:	f7ff fd6e 	bl	8000700 <HAL_GetTick>
 8000c24:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000c26:	e008      	b.n	8000c3a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000c28:	f7ff fd6a 	bl	8000700 <HAL_GetTick>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	693b      	ldr	r3, [r7, #16]
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	2b02      	cmp	r3, #2
 8000c34:	d901      	bls.n	8000c3a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8000c36:	2303      	movs	r3, #3
 8000c38:	e177      	b.n	8000f2a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000c3a:	4b68      	ldr	r3, [pc, #416]	; (8000ddc <HAL_RCC_OscConfig+0x500>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d1f0      	bne.n	8000c28 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f003 0308 	and.w	r3, r3, #8
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d030      	beq.n	8000cb4 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	695b      	ldr	r3, [r3, #20]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d016      	beq.n	8000c88 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c5a:	4b65      	ldr	r3, [pc, #404]	; (8000df0 <HAL_RCC_OscConfig+0x514>)
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c60:	f7ff fd4e 	bl	8000700 <HAL_GetTick>
 8000c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000c66:	e008      	b.n	8000c7a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c68:	f7ff fd4a 	bl	8000700 <HAL_GetTick>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	2b02      	cmp	r3, #2
 8000c74:	d901      	bls.n	8000c7a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8000c76:	2303      	movs	r3, #3
 8000c78:	e157      	b.n	8000f2a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000c7a:	4b58      	ldr	r3, [pc, #352]	; (8000ddc <HAL_RCC_OscConfig+0x500>)
 8000c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c7e:	f003 0302 	and.w	r3, r3, #2
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d0f0      	beq.n	8000c68 <HAL_RCC_OscConfig+0x38c>
 8000c86:	e015      	b.n	8000cb4 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000c88:	4b59      	ldr	r3, [pc, #356]	; (8000df0 <HAL_RCC_OscConfig+0x514>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c8e:	f7ff fd37 	bl	8000700 <HAL_GetTick>
 8000c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000c94:	e008      	b.n	8000ca8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c96:	f7ff fd33 	bl	8000700 <HAL_GetTick>
 8000c9a:	4602      	mov	r2, r0
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	1ad3      	subs	r3, r2, r3
 8000ca0:	2b02      	cmp	r3, #2
 8000ca2:	d901      	bls.n	8000ca8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	e140      	b.n	8000f2a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000ca8:	4b4c      	ldr	r3, [pc, #304]	; (8000ddc <HAL_RCC_OscConfig+0x500>)
 8000caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cac:	f003 0302 	and.w	r3, r3, #2
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d1f0      	bne.n	8000c96 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f003 0304 	and.w	r3, r3, #4
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	f000 80b5 	beq.w	8000e2c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cc6:	4b45      	ldr	r3, [pc, #276]	; (8000ddc <HAL_RCC_OscConfig+0x500>)
 8000cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d10d      	bne.n	8000cee <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000cd2:	4b42      	ldr	r3, [pc, #264]	; (8000ddc <HAL_RCC_OscConfig+0x500>)
 8000cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd6:	4a41      	ldr	r2, [pc, #260]	; (8000ddc <HAL_RCC_OscConfig+0x500>)
 8000cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cdc:	6253      	str	r3, [r2, #36]	; 0x24
 8000cde:	4b3f      	ldr	r3, [pc, #252]	; (8000ddc <HAL_RCC_OscConfig+0x500>)
 8000ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000cea:	2301      	movs	r3, #1
 8000cec:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cee:	4b41      	ldr	r3, [pc, #260]	; (8000df4 <HAL_RCC_OscConfig+0x518>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d118      	bne.n	8000d2c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000cfa:	4b3e      	ldr	r3, [pc, #248]	; (8000df4 <HAL_RCC_OscConfig+0x518>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a3d      	ldr	r2, [pc, #244]	; (8000df4 <HAL_RCC_OscConfig+0x518>)
 8000d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d06:	f7ff fcfb 	bl	8000700 <HAL_GetTick>
 8000d0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d0c:	e008      	b.n	8000d20 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d0e:	f7ff fcf7 	bl	8000700 <HAL_GetTick>
 8000d12:	4602      	mov	r2, r0
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	1ad3      	subs	r3, r2, r3
 8000d18:	2b64      	cmp	r3, #100	; 0x64
 8000d1a:	d901      	bls.n	8000d20 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	e104      	b.n	8000f2a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d20:	4b34      	ldr	r3, [pc, #208]	; (8000df4 <HAL_RCC_OscConfig+0x518>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d0f0      	beq.n	8000d0e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	689b      	ldr	r3, [r3, #8]
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d106      	bne.n	8000d42 <HAL_RCC_OscConfig+0x466>
 8000d34:	4b29      	ldr	r3, [pc, #164]	; (8000ddc <HAL_RCC_OscConfig+0x500>)
 8000d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d38:	4a28      	ldr	r2, [pc, #160]	; (8000ddc <HAL_RCC_OscConfig+0x500>)
 8000d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d3e:	6353      	str	r3, [r2, #52]	; 0x34
 8000d40:	e02d      	b.n	8000d9e <HAL_RCC_OscConfig+0x4c2>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	689b      	ldr	r3, [r3, #8]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d10c      	bne.n	8000d64 <HAL_RCC_OscConfig+0x488>
 8000d4a:	4b24      	ldr	r3, [pc, #144]	; (8000ddc <HAL_RCC_OscConfig+0x500>)
 8000d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d4e:	4a23      	ldr	r2, [pc, #140]	; (8000ddc <HAL_RCC_OscConfig+0x500>)
 8000d50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d54:	6353      	str	r3, [r2, #52]	; 0x34
 8000d56:	4b21      	ldr	r3, [pc, #132]	; (8000ddc <HAL_RCC_OscConfig+0x500>)
 8000d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d5a:	4a20      	ldr	r2, [pc, #128]	; (8000ddc <HAL_RCC_OscConfig+0x500>)
 8000d5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000d60:	6353      	str	r3, [r2, #52]	; 0x34
 8000d62:	e01c      	b.n	8000d9e <HAL_RCC_OscConfig+0x4c2>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	2b05      	cmp	r3, #5
 8000d6a:	d10c      	bne.n	8000d86 <HAL_RCC_OscConfig+0x4aa>
 8000d6c:	4b1b      	ldr	r3, [pc, #108]	; (8000ddc <HAL_RCC_OscConfig+0x500>)
 8000d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d70:	4a1a      	ldr	r2, [pc, #104]	; (8000ddc <HAL_RCC_OscConfig+0x500>)
 8000d72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d76:	6353      	str	r3, [r2, #52]	; 0x34
 8000d78:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <HAL_RCC_OscConfig+0x500>)
 8000d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d7c:	4a17      	ldr	r2, [pc, #92]	; (8000ddc <HAL_RCC_OscConfig+0x500>)
 8000d7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d82:	6353      	str	r3, [r2, #52]	; 0x34
 8000d84:	e00b      	b.n	8000d9e <HAL_RCC_OscConfig+0x4c2>
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <HAL_RCC_OscConfig+0x500>)
 8000d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d8a:	4a14      	ldr	r2, [pc, #80]	; (8000ddc <HAL_RCC_OscConfig+0x500>)
 8000d8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d90:	6353      	str	r3, [r2, #52]	; 0x34
 8000d92:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <HAL_RCC_OscConfig+0x500>)
 8000d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d96:	4a11      	ldr	r2, [pc, #68]	; (8000ddc <HAL_RCC_OscConfig+0x500>)
 8000d98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000d9c:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d015      	beq.n	8000dd2 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000da6:	f7ff fcab 	bl	8000700 <HAL_GetTick>
 8000daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000dac:	e00a      	b.n	8000dc4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000dae:	f7ff fca7 	bl	8000700 <HAL_GetTick>
 8000db2:	4602      	mov	r2, r0
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	1ad3      	subs	r3, r2, r3
 8000db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d901      	bls.n	8000dc4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	e0b2      	b.n	8000f2a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000dc4:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <HAL_RCC_OscConfig+0x500>)
 8000dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d0ee      	beq.n	8000dae <HAL_RCC_OscConfig+0x4d2>
 8000dd0:	e023      	b.n	8000e1a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dd2:	f7ff fc95 	bl	8000700 <HAL_GetTick>
 8000dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000dd8:	e019      	b.n	8000e0e <HAL_RCC_OscConfig+0x532>
 8000dda:	bf00      	nop
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	08001424 	.word	0x08001424
 8000de4:	20000000 	.word	0x20000000
 8000de8:	20000004 	.word	0x20000004
 8000dec:	42470020 	.word	0x42470020
 8000df0:	42470680 	.word	0x42470680
 8000df4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000df8:	f7ff fc82 	bl	8000700 <HAL_GetTick>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d901      	bls.n	8000e0e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	e08d      	b.n	8000f2a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000e0e:	4b49      	ldr	r3, [pc, #292]	; (8000f34 <HAL_RCC_OscConfig+0x658>)
 8000e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d1ee      	bne.n	8000df8 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000e1a:	7ffb      	ldrb	r3, [r7, #31]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d105      	bne.n	8000e2c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e20:	4b44      	ldr	r3, [pc, #272]	; (8000f34 <HAL_RCC_OscConfig+0x658>)
 8000e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e24:	4a43      	ldr	r2, [pc, #268]	; (8000f34 <HAL_RCC_OscConfig+0x658>)
 8000e26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e2a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d079      	beq.n	8000f28 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	2b0c      	cmp	r3, #12
 8000e38:	d056      	beq.n	8000ee8 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	d13b      	bne.n	8000eba <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e42:	4b3d      	ldr	r3, [pc, #244]	; (8000f38 <HAL_RCC_OscConfig+0x65c>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e48:	f7ff fc5a 	bl	8000700 <HAL_GetTick>
 8000e4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000e4e:	e008      	b.n	8000e62 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e50:	f7ff fc56 	bl	8000700 <HAL_GetTick>
 8000e54:	4602      	mov	r2, r0
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d901      	bls.n	8000e62 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	e063      	b.n	8000f2a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000e62:	4b34      	ldr	r3, [pc, #208]	; (8000f34 <HAL_RCC_OscConfig+0x658>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d1f0      	bne.n	8000e50 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e6e:	4b31      	ldr	r3, [pc, #196]	; (8000f34 <HAL_RCC_OscConfig+0x658>)
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e7e:	4319      	orrs	r1, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e84:	430b      	orrs	r3, r1
 8000e86:	492b      	ldr	r1, [pc, #172]	; (8000f34 <HAL_RCC_OscConfig+0x658>)
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000e8c:	4b2a      	ldr	r3, [pc, #168]	; (8000f38 <HAL_RCC_OscConfig+0x65c>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e92:	f7ff fc35 	bl	8000700 <HAL_GetTick>
 8000e96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000e98:	e008      	b.n	8000eac <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e9a:	f7ff fc31 	bl	8000700 <HAL_GetTick>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d901      	bls.n	8000eac <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	e03e      	b.n	8000f2a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000eac:	4b21      	ldr	r3, [pc, #132]	; (8000f34 <HAL_RCC_OscConfig+0x658>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d0f0      	beq.n	8000e9a <HAL_RCC_OscConfig+0x5be>
 8000eb8:	e036      	b.n	8000f28 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000eba:	4b1f      	ldr	r3, [pc, #124]	; (8000f38 <HAL_RCC_OscConfig+0x65c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec0:	f7ff fc1e 	bl	8000700 <HAL_GetTick>
 8000ec4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000ec6:	e008      	b.n	8000eda <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ec8:	f7ff fc1a 	bl	8000700 <HAL_GetTick>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d901      	bls.n	8000eda <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e027      	b.n	8000f2a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000eda:	4b16      	ldr	r3, [pc, #88]	; (8000f34 <HAL_RCC_OscConfig+0x658>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d1f0      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x5ec>
 8000ee6:	e01f      	b.n	8000f28 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d101      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	e01a      	b.n	8000f2a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000ef4:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <HAL_RCC_OscConfig+0x658>)
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d10d      	bne.n	8000f24 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d106      	bne.n	8000f24 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d001      	beq.n	8000f28 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	e000      	b.n	8000f2a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3720      	adds	r7, #32
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40023800 	.word	0x40023800
 8000f38:	42470060 	.word	0x42470060

08000f3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d101      	bne.n	8000f50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e11a      	b.n	8001186 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f50:	4b8f      	ldr	r3, [pc, #572]	; (8001190 <HAL_RCC_ClockConfig+0x254>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f003 0301 	and.w	r3, r3, #1
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d919      	bls.n	8000f92 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d105      	bne.n	8000f70 <HAL_RCC_ClockConfig+0x34>
 8000f64:	4b8a      	ldr	r3, [pc, #552]	; (8001190 <HAL_RCC_ClockConfig+0x254>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a89      	ldr	r2, [pc, #548]	; (8001190 <HAL_RCC_ClockConfig+0x254>)
 8000f6a:	f043 0304 	orr.w	r3, r3, #4
 8000f6e:	6013      	str	r3, [r2, #0]
 8000f70:	4b87      	ldr	r3, [pc, #540]	; (8001190 <HAL_RCC_ClockConfig+0x254>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f023 0201 	bic.w	r2, r3, #1
 8000f78:	4985      	ldr	r1, [pc, #532]	; (8001190 <HAL_RCC_ClockConfig+0x254>)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f80:	4b83      	ldr	r3, [pc, #524]	; (8001190 <HAL_RCC_ClockConfig+0x254>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f003 0301 	and.w	r3, r3, #1
 8000f88:	683a      	ldr	r2, [r7, #0]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d001      	beq.n	8000f92 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e0f9      	b.n	8001186 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d008      	beq.n	8000fb0 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f9e:	4b7d      	ldr	r3, [pc, #500]	; (8001194 <HAL_RCC_ClockConfig+0x258>)
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	497a      	ldr	r1, [pc, #488]	; (8001194 <HAL_RCC_ClockConfig+0x258>)
 8000fac:	4313      	orrs	r3, r2
 8000fae:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f003 0301 	and.w	r3, r3, #1
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	f000 808e 	beq.w	80010da <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d107      	bne.n	8000fd6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000fc6:	4b73      	ldr	r3, [pc, #460]	; (8001194 <HAL_RCC_ClockConfig+0x258>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d121      	bne.n	8001016 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e0d7      	b.n	8001186 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	2b03      	cmp	r3, #3
 8000fdc:	d107      	bne.n	8000fee <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000fde:	4b6d      	ldr	r3, [pc, #436]	; (8001194 <HAL_RCC_ClockConfig+0x258>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d115      	bne.n	8001016 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e0cb      	b.n	8001186 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d107      	bne.n	8001006 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000ff6:	4b67      	ldr	r3, [pc, #412]	; (8001194 <HAL_RCC_ClockConfig+0x258>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d109      	bne.n	8001016 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e0bf      	b.n	8001186 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001006:	4b63      	ldr	r3, [pc, #396]	; (8001194 <HAL_RCC_ClockConfig+0x258>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800100e:	2b00      	cmp	r3, #0
 8001010:	d101      	bne.n	8001016 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e0b7      	b.n	8001186 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001016:	4b5f      	ldr	r3, [pc, #380]	; (8001194 <HAL_RCC_ClockConfig+0x258>)
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	f023 0203 	bic.w	r2, r3, #3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	495c      	ldr	r1, [pc, #368]	; (8001194 <HAL_RCC_ClockConfig+0x258>)
 8001024:	4313      	orrs	r3, r2
 8001026:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001028:	f7ff fb6a 	bl	8000700 <HAL_GetTick>
 800102c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	2b02      	cmp	r3, #2
 8001034:	d112      	bne.n	800105c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001036:	e00a      	b.n	800104e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001038:	f7ff fb62 	bl	8000700 <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	f241 3288 	movw	r2, #5000	; 0x1388
 8001046:	4293      	cmp	r3, r2
 8001048:	d901      	bls.n	800104e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800104a:	2303      	movs	r3, #3
 800104c:	e09b      	b.n	8001186 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800104e:	4b51      	ldr	r3, [pc, #324]	; (8001194 <HAL_RCC_ClockConfig+0x258>)
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	f003 030c 	and.w	r3, r3, #12
 8001056:	2b08      	cmp	r3, #8
 8001058:	d1ee      	bne.n	8001038 <HAL_RCC_ClockConfig+0xfc>
 800105a:	e03e      	b.n	80010da <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	2b03      	cmp	r3, #3
 8001062:	d112      	bne.n	800108a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001064:	e00a      	b.n	800107c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001066:	f7ff fb4b 	bl	8000700 <HAL_GetTick>
 800106a:	4602      	mov	r2, r0
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	f241 3288 	movw	r2, #5000	; 0x1388
 8001074:	4293      	cmp	r3, r2
 8001076:	d901      	bls.n	800107c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001078:	2303      	movs	r3, #3
 800107a:	e084      	b.n	8001186 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800107c:	4b45      	ldr	r3, [pc, #276]	; (8001194 <HAL_RCC_ClockConfig+0x258>)
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	f003 030c 	and.w	r3, r3, #12
 8001084:	2b0c      	cmp	r3, #12
 8001086:	d1ee      	bne.n	8001066 <HAL_RCC_ClockConfig+0x12a>
 8001088:	e027      	b.n	80010da <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d11d      	bne.n	80010ce <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001092:	e00a      	b.n	80010aa <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001094:	f7ff fb34 	bl	8000700 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	f241 3288 	movw	r2, #5000	; 0x1388
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d901      	bls.n	80010aa <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80010a6:	2303      	movs	r3, #3
 80010a8:	e06d      	b.n	8001186 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80010aa:	4b3a      	ldr	r3, [pc, #232]	; (8001194 <HAL_RCC_ClockConfig+0x258>)
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	f003 030c 	and.w	r3, r3, #12
 80010b2:	2b04      	cmp	r3, #4
 80010b4:	d1ee      	bne.n	8001094 <HAL_RCC_ClockConfig+0x158>
 80010b6:	e010      	b.n	80010da <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010b8:	f7ff fb22 	bl	8000700 <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d901      	bls.n	80010ce <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80010ca:	2303      	movs	r3, #3
 80010cc:	e05b      	b.n	8001186 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80010ce:	4b31      	ldr	r3, [pc, #196]	; (8001194 <HAL_RCC_ClockConfig+0x258>)
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	f003 030c 	and.w	r3, r3, #12
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d1ee      	bne.n	80010b8 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80010da:	4b2d      	ldr	r3, [pc, #180]	; (8001190 <HAL_RCC_ClockConfig+0x254>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	683a      	ldr	r2, [r7, #0]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d219      	bcs.n	800111c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d105      	bne.n	80010fa <HAL_RCC_ClockConfig+0x1be>
 80010ee:	4b28      	ldr	r3, [pc, #160]	; (8001190 <HAL_RCC_ClockConfig+0x254>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a27      	ldr	r2, [pc, #156]	; (8001190 <HAL_RCC_ClockConfig+0x254>)
 80010f4:	f043 0304 	orr.w	r3, r3, #4
 80010f8:	6013      	str	r3, [r2, #0]
 80010fa:	4b25      	ldr	r3, [pc, #148]	; (8001190 <HAL_RCC_ClockConfig+0x254>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f023 0201 	bic.w	r2, r3, #1
 8001102:	4923      	ldr	r1, [pc, #140]	; (8001190 <HAL_RCC_ClockConfig+0x254>)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	4313      	orrs	r3, r2
 8001108:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800110a:	4b21      	ldr	r3, [pc, #132]	; (8001190 <HAL_RCC_ClockConfig+0x254>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	683a      	ldr	r2, [r7, #0]
 8001114:	429a      	cmp	r2, r3
 8001116:	d001      	beq.n	800111c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e034      	b.n	8001186 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 0304 	and.w	r3, r3, #4
 8001124:	2b00      	cmp	r3, #0
 8001126:	d008      	beq.n	800113a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001128:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <HAL_RCC_ClockConfig+0x258>)
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	4917      	ldr	r1, [pc, #92]	; (8001194 <HAL_RCC_ClockConfig+0x258>)
 8001136:	4313      	orrs	r3, r2
 8001138:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0308 	and.w	r3, r3, #8
 8001142:	2b00      	cmp	r3, #0
 8001144:	d009      	beq.n	800115a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001146:	4b13      	ldr	r3, [pc, #76]	; (8001194 <HAL_RCC_ClockConfig+0x258>)
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	691b      	ldr	r3, [r3, #16]
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	490f      	ldr	r1, [pc, #60]	; (8001194 <HAL_RCC_ClockConfig+0x258>)
 8001156:	4313      	orrs	r3, r2
 8001158:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800115a:	f000 f823 	bl	80011a4 <HAL_RCC_GetSysClockFreq>
 800115e:	4601      	mov	r1, r0
 8001160:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <HAL_RCC_ClockConfig+0x258>)
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	091b      	lsrs	r3, r3, #4
 8001166:	f003 030f 	and.w	r3, r3, #15
 800116a:	4a0b      	ldr	r2, [pc, #44]	; (8001198 <HAL_RCC_ClockConfig+0x25c>)
 800116c:	5cd3      	ldrb	r3, [r2, r3]
 800116e:	fa21 f303 	lsr.w	r3, r1, r3
 8001172:	4a0a      	ldr	r2, [pc, #40]	; (800119c <HAL_RCC_ClockConfig+0x260>)
 8001174:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001176:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <HAL_RCC_ClockConfig+0x264>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff fa74 	bl	8000668 <HAL_InitTick>
 8001180:	4603      	mov	r3, r0
 8001182:	72fb      	strb	r3, [r7, #11]

  return status;
 8001184:	7afb      	ldrb	r3, [r7, #11]
}
 8001186:	4618      	mov	r0, r3
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40023c00 	.word	0x40023c00
 8001194:	40023800 	.word	0x40023800
 8001198:	08001424 	.word	0x08001424
 800119c:	20000000 	.word	0x20000000
 80011a0:	20000004 	.word	0x20000004

080011a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011a6:	b087      	sub	sp, #28
 80011a8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80011aa:	4b4b      	ldr	r3, [pc, #300]	; (80012d8 <HAL_RCC_GetSysClockFreq+0x134>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f003 030c 	and.w	r3, r3, #12
 80011b6:	2b08      	cmp	r3, #8
 80011b8:	d006      	beq.n	80011c8 <HAL_RCC_GetSysClockFreq+0x24>
 80011ba:	2b0c      	cmp	r3, #12
 80011bc:	d007      	beq.n	80011ce <HAL_RCC_GetSysClockFreq+0x2a>
 80011be:	2b04      	cmp	r3, #4
 80011c0:	d176      	bne.n	80012b0 <HAL_RCC_GetSysClockFreq+0x10c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80011c2:	4b46      	ldr	r3, [pc, #280]	; (80012dc <HAL_RCC_GetSysClockFreq+0x138>)
 80011c4:	613b      	str	r3, [r7, #16]
      break;
 80011c6:	e081      	b.n	80012cc <HAL_RCC_GetSysClockFreq+0x128>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80011c8:	4b45      	ldr	r3, [pc, #276]	; (80012e0 <HAL_RCC_GetSysClockFreq+0x13c>)
 80011ca:	613b      	str	r3, [r7, #16]
      break;
 80011cc:	e07e      	b.n	80012cc <HAL_RCC_GetSysClockFreq+0x128>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	0c9b      	lsrs	r3, r3, #18
 80011d2:	f003 030f 	and.w	r3, r3, #15
 80011d6:	4a43      	ldr	r2, [pc, #268]	; (80012e4 <HAL_RCC_GetSysClockFreq+0x140>)
 80011d8:	5cd3      	ldrb	r3, [r2, r3]
 80011da:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	0d9b      	lsrs	r3, r3, #22
 80011e0:	f003 0303 	and.w	r3, r3, #3
 80011e4:	3301      	adds	r3, #1
 80011e6:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80011e8:	4b3b      	ldr	r3, [pc, #236]	; (80012d8 <HAL_RCC_GetSysClockFreq+0x134>)
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d019      	beq.n	8001228 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	f04f 0400 	mov.w	r4, #0
 80011fa:	4a39      	ldr	r2, [pc, #228]	; (80012e0 <HAL_RCC_GetSysClockFreq+0x13c>)
 80011fc:	fb02 f104 	mul.w	r1, r2, r4
 8001200:	2200      	movs	r2, #0
 8001202:	fb02 f203 	mul.w	r2, r2, r3
 8001206:	440a      	add	r2, r1
 8001208:	4935      	ldr	r1, [pc, #212]	; (80012e0 <HAL_RCC_GetSysClockFreq+0x13c>)
 800120a:	fba3 0101 	umull	r0, r1, r3, r1
 800120e:	1853      	adds	r3, r2, r1
 8001210:	4619      	mov	r1, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f04f 0400 	mov.w	r4, #0
 8001218:	461a      	mov	r2, r3
 800121a:	4623      	mov	r3, r4
 800121c:	f7fe ffae 	bl	800017c <__aeabi_uldivmod>
 8001220:	4603      	mov	r3, r0
 8001222:	460c      	mov	r4, r1
 8001224:	617b      	str	r3, [r7, #20]
 8001226:	e040      	b.n	80012aa <HAL_RCC_GetSysClockFreq+0x106>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	461d      	mov	r5, r3
 800122c:	f04f 0600 	mov.w	r6, #0
 8001230:	4629      	mov	r1, r5
 8001232:	4632      	mov	r2, r6
 8001234:	f04f 0300 	mov.w	r3, #0
 8001238:	f04f 0400 	mov.w	r4, #0
 800123c:	0154      	lsls	r4, r2, #5
 800123e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001242:	014b      	lsls	r3, r1, #5
 8001244:	4619      	mov	r1, r3
 8001246:	4622      	mov	r2, r4
 8001248:	1b49      	subs	r1, r1, r5
 800124a:	eb62 0206 	sbc.w	r2, r2, r6
 800124e:	f04f 0300 	mov.w	r3, #0
 8001252:	f04f 0400 	mov.w	r4, #0
 8001256:	0194      	lsls	r4, r2, #6
 8001258:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800125c:	018b      	lsls	r3, r1, #6
 800125e:	1a5b      	subs	r3, r3, r1
 8001260:	eb64 0402 	sbc.w	r4, r4, r2
 8001264:	f04f 0100 	mov.w	r1, #0
 8001268:	f04f 0200 	mov.w	r2, #0
 800126c:	00e2      	lsls	r2, r4, #3
 800126e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001272:	00d9      	lsls	r1, r3, #3
 8001274:	460b      	mov	r3, r1
 8001276:	4614      	mov	r4, r2
 8001278:	195b      	adds	r3, r3, r5
 800127a:	eb44 0406 	adc.w	r4, r4, r6
 800127e:	f04f 0100 	mov.w	r1, #0
 8001282:	f04f 0200 	mov.w	r2, #0
 8001286:	02a2      	lsls	r2, r4, #10
 8001288:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800128c:	0299      	lsls	r1, r3, #10
 800128e:	460b      	mov	r3, r1
 8001290:	4614      	mov	r4, r2
 8001292:	4618      	mov	r0, r3
 8001294:	4621      	mov	r1, r4
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f04f 0400 	mov.w	r4, #0
 800129c:	461a      	mov	r2, r3
 800129e:	4623      	mov	r3, r4
 80012a0:	f7fe ff6c 	bl	800017c <__aeabi_uldivmod>
 80012a4:	4603      	mov	r3, r0
 80012a6:	460c      	mov	r4, r1
 80012a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	613b      	str	r3, [r7, #16]
      break;
 80012ae:	e00d      	b.n	80012cc <HAL_RCC_GetSysClockFreq+0x128>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80012b0:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <HAL_RCC_GetSysClockFreq+0x134>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	0b5b      	lsrs	r3, r3, #13
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	3301      	adds	r3, #1
 80012c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	613b      	str	r3, [r7, #16]
      break;
 80012ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012cc:	693b      	ldr	r3, [r7, #16]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	371c      	adds	r7, #28
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40023800 	.word	0x40023800
 80012dc:	00f42400 	.word	0x00f42400
 80012e0:	016e3600 	.word	0x016e3600
 80012e4:	08001418 	.word	0x08001418

080012e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b087      	sub	sp, #28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80012f0:	2300      	movs	r3, #0
 80012f2:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80012f4:	4b29      	ldr	r3, [pc, #164]	; (800139c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d12c      	bne.n	800135a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001300:	4b26      	ldr	r3, [pc, #152]	; (800139c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d005      	beq.n	8001318 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800130c:	4b24      	ldr	r3, [pc, #144]	; (80013a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001314:	617b      	str	r3, [r7, #20]
 8001316:	e016      	b.n	8001346 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001318:	4b20      	ldr	r3, [pc, #128]	; (800139c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800131a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131c:	4a1f      	ldr	r2, [pc, #124]	; (800139c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800131e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001322:	6253      	str	r3, [r2, #36]	; 0x24
 8001324:	4b1d      	ldr	r3, [pc, #116]	; (800139c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001330:	4b1b      	ldr	r3, [pc, #108]	; (80013a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001338:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800133a:	4b18      	ldr	r3, [pc, #96]	; (800139c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800133c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133e:	4a17      	ldr	r2, [pc, #92]	; (800139c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001340:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001344:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800134c:	d105      	bne.n	800135a <RCC_SetFlashLatencyFromMSIRange+0x72>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001354:	d101      	bne.n	800135a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001356:	2301      	movs	r3, #1
 8001358:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d105      	bne.n	800136c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001360:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a0f      	ldr	r2, [pc, #60]	; (80013a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001366:	f043 0304 	orr.w	r3, r3, #4
 800136a:	6013      	str	r3, [r2, #0]
 800136c:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f023 0201 	bic.w	r2, r3, #1
 8001374:	490b      	ldr	r1, [pc, #44]	; (80013a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	4313      	orrs	r3, r2
 800137a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800137c:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0301 	and.w	r3, r3, #1
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	429a      	cmp	r2, r3
 8001388:	d001      	beq.n	800138e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e000      	b.n	8001390 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800138e:	2300      	movs	r3, #0
}
 8001390:	4618      	mov	r0, r3
 8001392:	371c      	adds	r7, #28
 8001394:	46bd      	mov	sp, r7
 8001396:	bc80      	pop	{r7}
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	40023800 	.word	0x40023800
 80013a0:	40007000 	.word	0x40007000
 80013a4:	40023c00 	.word	0x40023c00

080013a8 <__libc_init_array>:
 80013a8:	b570      	push	{r4, r5, r6, lr}
 80013aa:	2500      	movs	r5, #0
 80013ac:	4e0c      	ldr	r6, [pc, #48]	; (80013e0 <__libc_init_array+0x38>)
 80013ae:	4c0d      	ldr	r4, [pc, #52]	; (80013e4 <__libc_init_array+0x3c>)
 80013b0:	1ba4      	subs	r4, r4, r6
 80013b2:	10a4      	asrs	r4, r4, #2
 80013b4:	42a5      	cmp	r5, r4
 80013b6:	d109      	bne.n	80013cc <__libc_init_array+0x24>
 80013b8:	f000 f822 	bl	8001400 <_init>
 80013bc:	2500      	movs	r5, #0
 80013be:	4e0a      	ldr	r6, [pc, #40]	; (80013e8 <__libc_init_array+0x40>)
 80013c0:	4c0a      	ldr	r4, [pc, #40]	; (80013ec <__libc_init_array+0x44>)
 80013c2:	1ba4      	subs	r4, r4, r6
 80013c4:	10a4      	asrs	r4, r4, #2
 80013c6:	42a5      	cmp	r5, r4
 80013c8:	d105      	bne.n	80013d6 <__libc_init_array+0x2e>
 80013ca:	bd70      	pop	{r4, r5, r6, pc}
 80013cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80013d0:	4798      	blx	r3
 80013d2:	3501      	adds	r5, #1
 80013d4:	e7ee      	b.n	80013b4 <__libc_init_array+0xc>
 80013d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80013da:	4798      	blx	r3
 80013dc:	3501      	adds	r5, #1
 80013de:	e7f2      	b.n	80013c6 <__libc_init_array+0x1e>
 80013e0:	0800143c 	.word	0x0800143c
 80013e4:	0800143c 	.word	0x0800143c
 80013e8:	0800143c 	.word	0x0800143c
 80013ec:	08001440 	.word	0x08001440

080013f0 <memset>:
 80013f0:	4603      	mov	r3, r0
 80013f2:	4402      	add	r2, r0
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d100      	bne.n	80013fa <memset+0xa>
 80013f8:	4770      	bx	lr
 80013fa:	f803 1b01 	strb.w	r1, [r3], #1
 80013fe:	e7f9      	b.n	80013f4 <memset+0x4>

08001400 <_init>:
 8001400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001402:	bf00      	nop
 8001404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001406:	bc08      	pop	{r3}
 8001408:	469e      	mov	lr, r3
 800140a:	4770      	bx	lr

0800140c <_fini>:
 800140c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800140e:	bf00      	nop
 8001410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001412:	bc08      	pop	{r3}
 8001414:	469e      	mov	lr, r3
 8001416:	4770      	bx	lr
